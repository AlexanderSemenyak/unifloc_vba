'=======================================================================================
'Unifloc 7.27a primavera                                          khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2021
'
'=======================================================================================
' array manipulation functions
Public Function array_from_range(var_input, _
                                Optional transpose As Boolean = False)
' return array from range or from array or from number
    Dim ar() As Variant
    Dim rng As range
    Dim col As Collection
    Dim d As Long
    Dim i As Integer, j As Integer
    Dim done As Boolean
    
On Error GoTo err1:
    done = False
    If (TypeOf var_input Is range) Then
        Set rng = var_input
        If rng.Cells.Count = 1 Then
            Dim ST As String
            ST = CStr(rng.Value2)
            If Mid(ST, 1, 1) = "[" Then
                Dim cl As Collection
                Set cl = ParseJson(ST)
                Set var_input = cl.Item(1)
            Else
                ReDim ar(1 To 1, 1 To 1)
                ar(1, 1) = rng.Value
                done = True
            End If
        Else
            ar = rng.Value2
            done = True
        End If
    End If
    
    If Not done Then
        If (TypeOf var_input Is Collection) Then
            Set col = var_input
            ar = collection_to_array_2d(col)
        ElseIf IsArray(var_input) Then
            d = getDimension(var_input)
            If d = 2 Then
                ReDim ar(1 To UBound(var_input, 1) - LBound(var_input, 1) + 1, 1 To UBound(var_input, 2) - LBound(var_input, 2) + 1)
                For i = 1 To UBound(var_input, 1) - LBound(var_input, 1) + 1
                    For j = 1 To UBound(var_input, 2) - LBound(var_input, 2) + 1
                        ar(i, j) = var_input(i + LBound(var_input, 1) - 1, j + LBound(var_input, 2) - 1)
                    Next
                Next
            ElseIf d = 1 Then
                
                ReDim ar(1 To UBound(var_input, 1) - LBound(var_input, 1) + 1, 1 To 1)
                For i = 1 To UBound(var_input, 1) - LBound(var_input, 1) + 1
                    ar(i, 1) = var_input(i + LBound(var_input, 1) - 1)
                Next
            Else
                GoTo err1:
            End If
        Else
            ReDim ar(1 To 1, 1 To 1)
            ar(1, 1) = var_input
        End If
    End If
    If transpose Then
        array_from_range = array_transpose_(ar)
    Else
        array_from_range = ar
    End If
    Exit Function
err1:
    Dim errmsg As String
    errmsg = "Error:array_from_range:" & Err.Description
    add_log_msg (errmsg)
    Err.Raise kreadRangeError, "array_from_range", errmsg
End Function
Public Function array_transpose(var_input)
    Dim i As Integer, j As Integer
    Dim ar() As Variant
    Dim ard() As Double
    
    ar = array_from_range(var_input)
    
    array_transpose = array_transpose_(ar)
End Function
Private Function array_transpose_(var_input)
    Dim i As Integer, j As Integer
    Dim ar
    Dim ard
    
    ar = var_input
    
    ReDim ard(1 To UBound(ar, 2), 1 To UBound(ar, 1))
    For i = LBound(ar, 1) To UBound(ar, 1)
        For j = LBound(ar, 2) To UBound(ar, 2)
            ard(j, i) = ar(i, j)
        Next
    Next
    array_transpose_ = ard
End Function
Public Function array_num_from_dictionary(dict As Dictionary, _
                                          x_key As String, y_key As String)
    ' extract array from dictionary - where stored as vectors
    Dim arr_out() As Double
    Dim i As Integer
    
    Dim xarr
    Dim yarr
    
    If dict.Exists(x_key) Then
        xarr = collection_to_array_1d(dict(x_key))
    End If
    If dict.Exists(y_key) Then
        yarr = collection_to_array_1d(dict(y_key))
    End If
    ReDim arr_out(LBound(xarr) To UBound(xarr), 1 To 2)
    For i = LBound(xarr) To UBound(xarr)
        arr_out(i, 1) = xarr(i)
        arr_out(i, 2) = yarr(i)
    Next i
    array_num_from_dictionary = arr_out
End Function
Public Function array_num_from_range(var_input, _
                            Optional remove_zeros As Boolean = False, _
                            Optional remove_only_rows As Boolean = False, _
                            Optional transpose As Boolean = False)
    Dim ar() As Variant
    Dim ard() As Double
    Dim ard2() As Double
    Dim val As Double
    Dim i As Integer, j As Integer
    
    ar = array_from_range(var_input, transpose)
    
On Error GoTo err1:
    ReDim ard(1 To (UBound(ar, 1) - LBound(ar, 1) + 1), 1 To (UBound(ar, 2) - LBound(ar, 2) + 1))
    For i = LBound(ar, 1) To UBound(ar, 1)
        For j = LBound(ar, 2) To UBound(ar, 2)
            val = Cdbl_(CStr(ar(i, j)))
            ard(i, j) = val
        Next
    Next
    Dim M As Double
    If remove_zeros Then
On Error GoTo err2:
        ' transpose to delete zeros rows
        ReDim ard2(1 To UBound(ard, 2), 1 To UBound(ard, 1))
        For i = UBound(ard, 1) To LBound(ard, 1) Step -1
            For j = UBound(ard, 2) To LBound(ard, 2) Step -1
                ard2(j, i) = ard(i, j)
            Next
        Next
        ' delete zero rows
        For i = UBound(ard2, 2) To LBound(ard2, 2) Step -1
            M = 0
            For j = UBound(ard2, 1) To LBound(ard2, 1) Step -1
                M = M + Abs(ard2(j, i))
            Next
            If M = 0 And i > 1 Then
                ReDim Preserve ard2(1 To UBound(ard2, 1), 1 To i - 1)
            Else
                Exit For
            End If
        Next
        ' transpose back
        
        ReDim ard(1 To UBound(ard2, 2), 1 To UBound(ard2, 1))
        For i = UBound(ard2, 1) To LBound(ard2, 1) Step -1
            For j = UBound(ard2, 2) To LBound(ard2, 2) Step -1
                ard(j, i) = ard2(i, j)
            Next
        Next
        If Not remove_only_rows Then
        ' when array used for pipe trajectory
        ' zeros in columns can have meaning
        ' delete zero cols
            For i = UBound(ard, 2) To LBound(ard, 2) Step -1
                M = 0
                For j = UBound(ard, 1) To LBound(ard, 1) Step -1
                    M = M + Abs(ard(j, i))
                Next
                If M = 0 And i > 1 Then
                    ReDim Preserve ard(1 To UBound(ard, 1), 1 To i - 1)
                Else
                    Exit For
                End If
            Next
        End If
        
    End If
    
    
    array_num_from_range = ard
        
    Exit Function
err1:
    val = 0
    Resume Next
err2:
    Dim errmsg As String
    errmsg = "Error:array_num_from_range:" & Err.Description
    add_log_msg (errmsg)
    Err.Raise kreadRangeError, "array_num_from_range", errmsg
End Function
Public Function array1d_from_range(var_input, _
                        Optional ByVal num_only As Boolean = False, _
                        Optional ByVal no_zero As Boolean = False)
' return 1 d array from range or from array or from number
    Dim ar
    Dim arout() As Variant
    Dim rng As range
    Dim i As Integer
    Dim j As Integer
    Dim K As Integer
    Dim num As Integer
On Error GoTo err1:
    If num_only And no_zero Then
        ar = array_num_from_range(var_input, remove_zeros:=True)
    ElseIf num_only Then
        ar = array_num_from_range(var_input, remove_zeros:=False)
    Else
        ar = array_from_range(var_input)
    End If
    num = (UBound(ar, 1) - LBound(ar, 1) + 1) * (UBound(ar, 2) - LBound(ar, 2) + 1)
    ReDim arout(1 To num)
    K = 1
    For i = LBound(ar, 1) To UBound(ar, 1)
        For j = LBound(ar, 2) To UBound(ar, 2)
            arout(K) = ar(i, j)
            K = K + 1
        Next
    Next
    array1d_from_range = arout
    Exit Function
err1:
    Dim errmsg As String
    errmsg = "Error:array1d_from_range:" & Err.Description
    add_log_msg (errmsg)
    Err.Raise kreadRangeError, "array1d_from_range", errmsg
End Function
Public Function collection_to_array_1d(myCol As Collection)
    Dim ncol As Integer
    Dim i As Integer
    Dim res() As Variant
    
    ncol = myCol.Count
    ReDim res(1 To ncol)
    For i = 1 To ncol
        res(i) = myCol(i)
    Next i
    collection_to_array_1d = res
End Function
Public Function collection_to_array_2d(myCol As Collection, _
                           Optional transpose As Boolean = False) As Variant
' на входе должно быть двумерная коллекция - коллекция коллекций
    Dim Result  As Variant
    Dim cnt     As Long
    Dim ncol As Integer
    Dim nrow As Integer
    Dim j As Long
    
    ncol = myCol.Count
    If ncol >= 1 Then
        nrow = myCol(1).Count
    Else
        Err.Raise kErrArraySize, , "collection_to_array_2d error - wrong dimension"
    End If
    
    'If ncol = 2 And nrow > 0 Then
    If transpose Then
        ReDim Result(1 To nrow, 1 To ncol)
        
        For cnt = 1 To myCol.Count
            For j = 1 To nrow
                Result(j, cnt) = myCol(cnt)(j)
                
            Next j
        Next cnt
    Else
        
        ReDim Result(1 To ncol, 1 To nrow)
        
        For cnt = 1 To myCol.Count
            For j = 1 To nrow
                Result(cnt, j) = myCol(cnt)(j)
                
            Next j
        Next cnt
    End If
    collection_to_array_2d = Result
End Function
Public Function array_join(arr_in As Variant)
' get one two dimensional array from array of arrays
' needed to support array output to range from VBA
    Dim arr_out As Variant
    Dim num_rows As Integer
    Dim num_cols As Integer
    Dim L As Integer, U As Integer
    Dim i As Integer, j As Integer
    L = LBound(arr_in)
    U = UBound(arr_in)
    num_cols = UBound(arr_in(L)) - LBound(arr_in(L)) + 1
    num_rows = UBound(arr_in) - LBound(arr_in) + 1
    ReDim arr_out(1 To num_rows, 1 To num_cols)
    For i = 1 To num_rows
        For j = 1 To num_cols
            arr_out(i, j) = arr_in(i - 1 + L)(j - 1 + L)
        Next j
    Next i
    array_join = arr_out
End Function
Private Function getDimension(var As Variant) As Long
    On Error GoTo Err
    Dim i As Long
    Dim Tmp As Long
    i = 0
    Do While True
        i = i + 1
        Tmp = UBound(var, i)
    Loop
Err:
    getDimension = i - 1
End Function

