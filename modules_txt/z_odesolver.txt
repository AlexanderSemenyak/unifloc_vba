''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright 2009 by Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
Public Type ODESolverState
    N As Long
    M As Long
    XScale As Double
    h As Double
    Eps As Double
    FracEps As Boolean
    YC() As Double
    EScale() As Double
    XG() As Double
    SolverType As Long
    x As Double
    y() As Double
    DY() As Double
    YTbl() As Double
    RepTerminationType As Long
    RepNFEV As Long
    YN() As Double
    YNS() As Double
    RKA() As Double
    RKC() As Double
    RKCS() As Double
    RKB() As Double
    RKK() As Double
    RState As RCommState
End Type
Public Type ODESolverReport
    NFEV As Long
    TerminationType As Long
End Type
'Global constants
Private Const ODESolverMaxGrow As Double = 3#
Private Const ODESolverMaxShrink As Double = 10#
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Cash-Karp adaptive ODE solver.
'
'This subroutine solves ODE  Y'=f(Y,x)  with  initial  conditions  Y(xs)=Ys
'(here Y may be single variable or vector of N variables).
'
'INPUT PARAMETERS:
'    Y       -   initial conditions, array[0..N-1].
'                contains values of Y[] at X[0]
'    N       -   system size
'    X       -   points at which Y should be tabulated, array[0..M-1]
'                integrations starts at X[0], ends at X[M-1],  intermediate
'                values at X[i] are returned too.
'                SHOULD BE ORDERED BY ASCENDING OR BY DESCENDING!!!!
'    M       -   number of intermediate points + first point + last point:
'                * M>2 means that you need both Y(X[M-1]) and M-2 values at
'                  intermediate points
'                * M=2 means that you want just to integrate from  X[0]  to
'                  X[1] and don't interested in intermediate values.
'                * M=1 means that you don't want to integrate :)
'                  it is degenerate case, but it will be handled correctly.
'                * M<1 means error
'    Eps     -   tolerance (absolute/relative error on each  step  will  be
'                less than Eps). When passing:
'                * Eps>0, it means desired ABSOLUTE error
'                * Eps<0, it means desired RELATIVE error.  Relative errors
'                  are calculated with respect to maximum values of  Y seen
'                  so far. Be careful to use this criterion  when  starting
'                  from Y[] that are close to zero.
'    H       -   initial  step  lenth,  it  will  be adjusted automatically
'                after the first  step.  If  H=0,  step  will  be  selected
'                automatically  (usualy  it  will  be  equal  to  0.001  of
'                min(x[i]-x[j])).
'
'OUTPUT PARAMETERS
'    State   -   structure which stores algorithm state between  subsequent
'                calls of OdeSolverIteration. Used for reverse communication.
'                This structure should be passed  to the OdeSolverIteration
'                subroutine.
'
'SEE ALSO
'    AutoGKSmoothW, AutoGKSingular, AutoGKIteration, AutoGKResults.
'
'
'  -- ALGLIB --
'     Copyright 01.09.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ODESolverRKCK(ByRef y() As Double, _
         ByVal N As Long, _
         ByRef x() As Double, _
         ByVal M As Long, _
         ByVal Eps As Double, _
         ByVal h As Double, _
         ByRef State As ODESolverState)
    Call ODESolverInit(0#, y, N, x, M, Eps, h, State)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'One iteration of ODE solver.
'
'Called after inialization of State structure with OdeSolverXXX subroutine.
'See HTML docs for examples.
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between subsequent
'                calls and which is used for reverse communication. Must be
'                initialized with OdeSolverXXX() call first.
'
'If subroutine returned False, algorithm have finished its work.
'If subroutine returned True, then user should:
'* calculate F(State.X, State.Y)
'* store it in State.DY
'Here State.X is real, State.Y and State.DY are arrays[0..N-1] of reals.
'
'  -- ALGLIB --
'     Copyright 01.09.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function ODESolverIteration(ByRef State As ODESolverState) As Boolean
    Dim Result As Boolean
    Dim N As Long
    Dim M As Long
    Dim i As Long
    Dim j As Long
    Dim K As Long
    Dim XC As Double
    Dim V As Double
    Dim h As Double
    Dim H2 As Double
    Dim GridPoint As Boolean
    Dim Err As Double
    Dim MaxGrowPow As Double
    Dim KLimit As Long
    Dim i_ As Long
    
    '
    ' Reverse communication preparations
    ' I know it looks ugly, but it works the same way
    ' anywhere from C++ to Python.
    '
    ' This code initializes locals by:
    ' * random values determined during code
    '   generation - on first subroutine call
    ' * values from previous call - on subsequent calls
    '
    If State.RState.Stage >= 0# Then
        N = State.RState.IA(0#)
        M = State.RState.IA(1#)
        i = State.RState.IA(2#)
        j = State.RState.IA(3#)
        K = State.RState.IA(4#)
        KLimit = State.RState.IA(5#)
        GridPoint = State.RState.BA(0#)
        XC = State.RState.RA(0#)
        V = State.RState.RA(1#)
        h = State.RState.RA(2#)
        H2 = State.RState.RA(3#)
        Err = State.RState.RA(4#)
        MaxGrowPow = State.RState.RA(5#)
    Else
        N = -983#
        M = -989#
        i = -834#
        j = 900#
        K = -287#
        KLimit = 364#
        GridPoint = False
        XC = -338#
        V = -686#
        h = 912#
        H2 = 585#
        Err = 497#
        MaxGrowPow = -271#
    End If
    If State.RState.Stage = 0# Then
        GoTo lbl_0
    End If
    
    '
    ' Routine body
    '
    
    '
    ' prepare
    '
    If State.RepTerminationType <> 0# Then
        Result = False
        ODESolverIteration = Result
        Exit Function
    End If
    N = State.N
    M = State.M
    h = State.h
    ReDim State.y(0 To N - 1)
    ReDim State.DY(0 To N - 1)
    MaxGrowPow = Power(ODESolverMaxGrow, 5#)
    State.RepNFEV = 0#
    
    '
    ' some preliminary checks for internal errors
    ' after this we assume that H>0 and M>1
    '
    
    '
    ' choose solver
    '
    If State.SolverType <> 0# Then
        GoTo lbl_1
    End If
    
    '
    ' Cask-Karp solver
    ' Prepare coefficients table.
    ' Check it for errors
    '
    ReDim State.RKA(0 To 6# - 1)
    State.RKA(0#) = 0#
    State.RKA(1#) = 1# / 5#
    State.RKA(2#) = 3# / 10#
    State.RKA(3#) = 3# / 5#
    State.RKA(4#) = 1#
    State.RKA(5#) = 7# / 8#
    ReDim State.RKB(0 To 6# - 1, 0 To 5# - 1)
    State.RKB(1#, 0#) = 1# / 5#
    State.RKB(2#, 0#) = 3# / 40#
    State.RKB(2#, 1#) = 9# / 40#
    State.RKB(3#, 0#) = 3# / 10#
    State.RKB(3#, 1#) = -(9# / 10#)
    State.RKB(3#, 2#) = 6# / 5#
    State.RKB(4#, 0#) = -(11# / 54#)
    State.RKB(4#, 1#) = 5# / 2#
    State.RKB(4#, 2#) = -(70# / 27#)
    State.RKB(4#, 3#) = 35# / 27#
    State.RKB(5#, 0#) = 1631# / 55296#
    State.RKB(5#, 1#) = 175# / 512#
    State.RKB(5#, 2#) = 575# / 13824#
    State.RKB(5#, 3#) = 44275# / 110592#
    State.RKB(5#, 4#) = 253# / 4096#
    ReDim State.RKC(0 To 6# - 1)
    State.RKC(0#) = 37# / 378#
    State.RKC(1#) = 0#
    State.RKC(2#) = 250# / 621#
    State.RKC(3#) = 125# / 594#
    State.RKC(4#) = 0#
    State.RKC(5#) = 512# / 1771#
    ReDim State.RKCS(0 To 6# - 1)
    State.RKCS(0#) = 2825# / 27648#
    State.RKCS(1#) = 0#
    State.RKCS(2#) = 18575# / 48384#
    State.RKCS(3#) = 13525# / 55296#
    State.RKCS(4#) = 277# / 14336#
    State.RKCS(5#) = 1# / 4#
    ReDim State.RKK(0 To 6# - 1, 0 To N - 1)
    
    '
    ' Main cycle consists of two iterations:
    ' * outer where we travel from X[i-1] to X[i]
    ' * inner where we travel inside [X[i-1],X[i]]
    '
    ReDim State.YTbl(0 To M - 1, 0 To N - 1)
    ReDim State.EScale(0 To N - 1)
    ReDim State.YN(0 To N - 1)
    ReDim State.YNS(0 To N - 1)
    XC = State.XG(0#)
    For i_ = 0# To N - 1# Step 1
        State.YTbl(0#, i_) = State.YC(i_)
    Next i_
    For j = 0# To N - 1# Step 1
        State.EScale(j) = 0#
    Next j
    i = 1#
lbl_3:
    If i > M - 1# Then
        GoTo lbl_5
    End If
    
    '
    ' begin inner iteration
    '
lbl_6:
    If False Then
        GoTo lbl_7
    End If
    
    '
    ' truncate step if needed (beyond right boundary).
    ' determine should we store X or not
    '
    If XC + h >= State.XG(i) Then
        h = State.XG(i) - XC
        GridPoint = True
    Else
        GridPoint = False
    End If
    
    '
    ' Update error scale maximums
    '
    ' These maximums are initialized by zeros,
    ' then updated every iterations.
    '
    For j = 0# To N - 1# Step 1
        State.EScale(j) = MaxReal(State.EScale(j), Abs(State.YC(j)))
    Next j
    
    '
    ' make one step:
    ' 1. calculate all info needed to do step
    ' 2. update errors scale maximums using values/derivatives
    '    obtained during (1)
    '
    ' Take into account that we use scaling of X to reduce task
    ' to the form where x[0] < x[1] < ... < x[n-1]. So X is
    ' replaced by x=xscale*t, and dy/dx=f(y,x) is replaced
    ' by dy/dt=xscale*f(y,xscale*t).
    '
    For i_ = 0# To N - 1# Step 1
        State.YN(i_) = State.YC(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        State.YNS(i_) = State.YC(i_)
    Next i_
    K = 0#
lbl_8:
    If K > 5# Then
        GoTo lbl_10
    End If
    
    '
    ' prepare data for the next update of YN/YNS
    '
    State.x = State.XScale * (XC + State.RKA(K) * h)
    For i_ = 0# To N - 1# Step 1
        State.y(i_) = State.YC(i_)
    Next i_
    For j = 0# To K - 1# Step 1
        V = State.RKB(K, j)
        For i_ = 0# To N - 1# Step 1
            State.y(i_) = State.y(i_) + V * State.RKK(j, i_)
        Next i_
    Next j
    State.RState.Stage = 0#
    GoTo lbl_rcomm
lbl_0:
    State.RepNFEV = State.RepNFEV + 1#
    V = h * State.XScale
    For i_ = 0# To N - 1# Step 1
        State.RKK(K, i_) = V * State.DY(i_)
    Next i_
    
    '
    ' update YN/YNS
    '
    V = State.RKC(K)
    For i_ = 0# To N - 1# Step 1
        State.YN(i_) = State.YN(i_) + V * State.RKK(K, i_)
    Next i_
    V = State.RKCS(K)
    For i_ = 0# To N - 1# Step 1
        State.YNS(i_) = State.YNS(i_) + V * State.RKK(K, i_)
    Next i_
    K = K + 1#
    GoTo lbl_8
lbl_10:
    
    '
    ' estimate error
    '
    Err = 0#
    For j = 0# To N - 1# Step 1
        If Not State.FracEps Then
            
            '
            ' absolute error is estimated
            '
            Err = MaxReal(Err, Abs(State.YN(j) - State.YNS(j)))
        Else
            
            '
            ' Relative error is estimated
            '
            V = State.EScale(j)
            If V = 0# Then
                V = 1#
            End If
            Err = MaxReal(Err, Abs(State.YN(j) - State.YNS(j)) / V)
        End If
    Next j
    
    '
    ' calculate new step, restart if necessary
    '
    If MaxGrowPow * Err <= State.Eps Then
        H2 = ODESolverMaxGrow * h
    Else
        H2 = h * Power(State.Eps / Err, 0.2)
    End If
    If H2 < h / ODESolverMaxShrink Then
        H2 = h / ODESolverMaxShrink
    End If
    If Err > State.Eps Then
        h = H2
        GoTo lbl_6
    End If
    
    '
    ' advance position
    '
    XC = XC + h
    For i_ = 0# To N - 1# Step 1
        State.YC(i_) = State.YN(i_)
    Next i_
    
    '
    ' update H
    '
    h = H2
    
    '
    ' break on grid point
    '
    If GridPoint Then
        GoTo lbl_7
    End If
    GoTo lbl_6
lbl_7:
    
    '
    ' save result
    '
    For i_ = 0# To N - 1# Step 1
        State.YTbl(i, i_) = State.YC(i_)
    Next i_
    i = i + 1#
    GoTo lbl_3
lbl_5:
    State.RepTerminationType = 1#
    Result = False
    ODESolverIteration = Result
    Exit Function
lbl_1:
    Result = False
    ODESolverIteration = Result
    Exit Function
    
    '
    ' Saving state
    '
lbl_rcomm:
    Result = True
    State.RState.IA(0#) = N
    State.RState.IA(1#) = M
    State.RState.IA(2#) = i
    State.RState.IA(3#) = j
    State.RState.IA(4#) = K
    State.RState.IA(5#) = KLimit
    State.RState.BA(0#) = GridPoint
    State.RState.RA(0#) = XC
    State.RState.RA(1#) = V
    State.RState.RA(2#) = h
    State.RState.RA(3#) = H2
    State.RState.RA(4#) = Err
    State.RState.RA(5#) = MaxGrowPow
    ODESolverIteration = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'ODE solver results
'
'Called after OdeSolverIteration returned False.
'
'INPUT PARAMETERS:
'    State   -   algorithm state (used by OdeSolverIteration).
'
'OUTPUT PARAMETERS:
'    M       -   number of tabulated values, M>=1
'    XTbl    -   array[0..M-1], values of X
'    YTbl    -   array[0..M-1,0..N-1], values of Y in X[i]
'    Rep     -   solver report:
'                * Rep.TerminationType completetion code:
'                    * -2    X is not ordered  by  ascending/descending  or
'                            there are non-distinct X[],  i.e.  X[i]=X[i+1]
'                    * -1    incorrect parameters were specified
'                    *  1    task has been solved
'                * Rep.NFEV contains number of function calculations
'
'  -- ALGLIB --
'     Copyright 01.09.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ODESolverResults(ByRef State As ODESolverState, _
         ByRef M As Long, _
         ByRef XTbl() As Double, _
         ByRef YTbl() As Double, _
         ByRef Rep As ODESolverReport)
    Dim V As Double
    Dim i As Long
    Dim i_ As Long
    Rep.TerminationType = State.RepTerminationType
    If Rep.TerminationType > 0# Then
        M = State.M
        Rep.NFEV = State.RepNFEV
        ReDim XTbl(0 To State.M - 1)
        V = State.XScale
        For i_ = 0# To State.M - 1# Step 1
            XTbl(i_) = V * State.XG(i_)
        Next i_
        ReDim YTbl(0 To State.M - 1, 0 To State.N - 1)
        For i = 0# To State.M - 1# Step 1
            For i_ = 0# To State.N - 1# Step 1
                YTbl(i, i_) = State.YTbl(i, i_)
            Next i_
        Next i
    Else
        Rep.NFEV = 0#
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal initialization subroutine
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub ODESolverInit(ByVal SolverType As Long, _
         ByRef y() As Double, _
         ByVal N As Long, _
         ByRef x() As Double, _
         ByVal M As Long, _
         ByVal Eps As Double, _
         ByVal h As Double, _
         ByRef State As ODESolverState)
    Dim i As Long
    Dim V As Double
    Dim i_ As Long
    
    '
    ' Prepare RComm
    '
    ReDim State.RState.IA(0# To 5#)
    ReDim State.RState.BA(0# To 0#)
    ReDim State.RState.RA(0# To 5#)
    State.RState.Stage = -1#
    
    '
    ' check parameters.
    '
    If N <= 0# Or M < 1# Or Eps = 0# Then
        State.RepTerminationType = -1#
        Exit Sub
    End If
    If h < 0# Then
        h = -h
    End If
    
    '
    ' quick exit if necessary.
    ' after this block we assume that M>1
    '
    If M = 1# Then
        State.RepNFEV = 0#
        State.RepTerminationType = 1#
        ReDim State.YTbl(0 To 1# - 1, 0 To N - 1)
        For i_ = 0# To N - 1# Step 1
            State.YTbl(0#, i_) = y(i_)
        Next i_
        ReDim State.XG(0 To M - 1)
        For i_ = 0# To M - 1# Step 1
            State.XG(i_) = x(i_)
        Next i_
        Exit Sub
    End If
    
    '
    ' check again: correct order of X[]
    '
    If x(1#) = x(0#) Then
        State.RepTerminationType = -2#
        Exit Sub
    End If
    For i = 1# To M - 1# Step 1
        If x(1#) > x(0#) And x(i) <= x(i - 1#) Or x(1#) < x(0#) And x(i) >= x(i - 1#) Then
            State.RepTerminationType = -2#
            Exit Sub
        End If
    Next i
    
    '
    ' auto-select H if necessary
    '
    If h = 0# Then
        V = Abs(x(1#) - x(0#))
        For i = 2# To M - 1# Step 1
            V = MinReal(V, Abs(x(i) - x(i - 1#)))
        Next i
        h = 0.001 * V
    End If
    
    '
    ' store parameters
    '
    State.N = N
    State.M = M
    State.h = h
    State.Eps = Abs(Eps)
    State.FracEps = Eps < 0#
    ReDim State.XG(0 To M - 1)
    For i_ = 0# To M - 1# Step 1
        State.XG(i_) = x(i_)
    Next i_
    If x(1#) > x(0#) Then
        State.XScale = 1#
    Else
        State.XScale = -1#
        For i_ = 0# To M - 1# Step 1
            State.XG(i_) = -1 * State.XG(i_)
        Next i_
    End If
    ReDim State.YC(0 To N - 1)
    For i_ = 0# To N - 1# Step 1
        State.YC(i_) = y(i_)
    Next i_
    State.SolverType = SolverType
    State.RepTerminationType = 0#
End Sub

