'=======================================================================================
'Unifloc 7.26  coronav2                                          khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2020
'
'=======================================================================================
' набор функций для решения ДУ и уравнений для различных классов и процедур
Option Explicit
' функция градиента давления для одномерной задачи расчета
' распределения давления в трубопроводе
Public Function calc_grad_1d(l_m As Double, _
                              y() As Double, _
                              pipe As CPipe) As Double()
    Dim out(0 To 0) As Double
    Dim res As PIPE_FLOW_PARAMS
    With pipe
        res = pipe.calc_grad(l_m, y(0), pipe.t_h_mes_C(l_m), calc_dtdl:=False)
    End With
    out(0) = res.dp_dl
    calc_grad_1d = out
End Function
' функция градиента давления для двухмерной задачи расчета
' распределения давления в трубопроводе
Public Function calc_grad_2d(l_m As Double, _
                             y() As Double, _
                             pipe As CPipe) As Double()
    Dim out(0 To 1) As Double
    Dim res As PIPE_FLOW_PARAMS
    With pipe
        res = pipe.calc_grad(l_m, y(0), y(1))
    End With
    out(0) = res.dp_dl
    out(1) = res.dt_dl
    calc_grad_2d = out
End Function
' функция расчета ошибки в оценке давления для штуцера
' в зависимости от поправки на калибровочный параметр
Public Function calc_choke_dp_error_calibr_grav_atm(ByVal c_calibr As Double, _
                                                    CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pt0 As PTtype
    Dim choke As Cchoke
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    
    ' read coeffA - parameters
    Set choke = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With choke
        .c_calibr_fr = c_calibr
        pt0.p_atma = p_out_atma
        pt0.t_C = .t_choke_C
        PT = .calc_choke_p(pt0, calc_p_down:=0)
        calc_choke_dp_error_calibr_grav_atm = (PT.p_atma - p_in_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для штуцера
' в зависимости от диаметра
Public Function calc_choke_dp_error_diam_atm(ByVal diam_m As Double, _
                                                    CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pt0 As PTtype
    Dim choke As Cchoke
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    
    ' read coeffA - parameters
    Set choke = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    On Error Resume Next
    ' low diam can be unstable - trying eliminate it
    
    With choke
        .d_choke_m = diam_m
        pt0.p_atma = p_out_atma
        pt0.t_C = .t_choke_C
        PT = .calc_choke_p(pt0, calc_p_down:=0)
        If PT.p_atma < 0 Then PT.p_atma = 0
        calc_choke_dp_error_diam_atm = (PT.p_atma - p_in_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для штуцера
' в зависимости от газового фактора
Public Function calc_choke_dp_error_rp_atm(ByVal RP As Double, _
                                                    CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pt0 As PTtype
    Dim choke As Cchoke
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    
    ' read coeffA - parameters
    Set choke = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With choke
        .fluid.rp_m3m3 = RP
        pt0.p_atma = p_out_atma
        pt0.t_C = .t_choke_C
        PT = .calc_choke_p(pt0, calc_p_down:=0)
        calc_choke_dp_error_rp_atm = (PT.p_atma - p_in_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для штуцера
' в зависимости от обводненности
Public Function calc_choke_dp_error_fw_atm(ByVal fw_fr As Double, _
                                                    CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pt0 As PTtype
    Dim choke As Cchoke
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    
    ' read coeffA - parameters
    Set choke = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With choke
        .fluid.fw_fr = fw_fr
        pt0.p_atma = p_out_atma
        pt0.t_C = .t_choke_C
        PT = .calc_choke_p(pt0, calc_p_down:=0)
        calc_choke_dp_error_fw_atm = (PT.p_atma - p_in_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для штуцера
' в зависимости от обводненности
Public Function calc_choke_dp_error_qliq_atm(ByVal qliq As Double, _
                                                    CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pt0 As PTtype
    Dim choke As Cchoke
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    
    ' read coeffA - parameters
    Set choke = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With choke
        .fluid.qliq_sm3day = qliq
        pt0.p_atma = p_out_atma
        pt0.t_C = .t_choke_C
        PT = .calc_choke_p(pt0, calc_p_down:=0)
        calc_choke_dp_error_qliq_atm = (PT.p_atma - p_in_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для штуцера
' в зависимости от обводненности
Public Function calc_choke_dp_error_qgas_atm(ByVal qgas As Double, _
                                                    CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pt0 As PTtype
    Dim choke As Cchoke
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    
    ' read coeffA - parameters
    Set choke = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With choke
        .fluid.q_gas_free_sm3day = qgas
        pt0.p_atma = p_out_atma
        pt0.t_C = .t_choke_C
        PT = .calc_choke_p(pt0, calc_p_down:=0)
        calc_choke_dp_error_qgas_atm = (PT.p_atma - p_in_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для ЭЦН
' в зависимости от поправки на напор насоса
Public Function calc_ESP_dp_error_calibr_head_atm(ByVal c_calibr_head As Double, _
                                   CoeffA As Variant) As Double
    
    Dim pump As CESPpump
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    Dim t_in_C As Double
    Dim t_dis_C As Double
    ' read coeffA - parameters
    Set pump = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    t_in_C = CoeffA(3)
    t_dis_C = CoeffA(4)
    
    With pump
        .c_calibr_head = c_calibr_head
        Call .calc_ESP(p_in_atma, t_in_C, t_dis_C, True, False)
        calc_ESP_dp_error_calibr_head_atm = (.p_dis_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для ЭЦН
' в зависимости от поправки на напор насоса
Public Function calc_ESP_dp_error_calibr_rate_atm(ByVal c_calibr_rate As Double, _
                                   CoeffA As Variant) As Double
    
    Dim pump As CESPpump
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    Dim t_in_C As Double
    Dim t_dis_C As Double
    ' read coeffA - parameters
    Set pump = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    t_in_C = CoeffA(3)
    t_dis_C = CoeffA(4)
    
    With pump
        .c_calibr_rate = c_calibr_rate
        Call .calc_ESP(p_in_atma, t_in_C, t_dis_C, True, False)
        calc_ESP_dp_error_calibr_rate_atm = (.p_dis_atma - p_out_atma)
    End With
    
End Function
' расчет параметров трубы
' функция расчета ошибки в оценке давления для трубы
' в зависимости от поправки на гравитационную составляющую градиента
Public Function calc_pipe_dp_error_calibr_grav_atm(ByVal c_calibr_grav As Double, _
                                   CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With pipe
        .c_calibr_grav = c_calibr_grav
        PT = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_calibr_grav_atm = (PT.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от поправки на составляющую градиента по трению
Public Function calc_pipe_dp_error_calibr_fric_atm(ByVal c_calibr_fric As Double, _
                                   CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With pipe
        .c_calibr_fric = c_calibr_fric
        PT = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_calibr_fric_atm = (PT.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от газового фактора
Public Function calc_pipe_dp_error_rp_atm(ByVal RP As Double, _
                                   CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With pipe
        .fluid.rp_m3m3 = RP
        PT = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_rp_atm = (PT.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от обводненности
Public Function calc_pipe_dp_error_fw_atm(ByVal fw As Double, _
                                   CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With pipe
        .fluid.fw_fr = fw
        PT = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_fw_atm = (PT.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от дебита жидкости
Public Function calc_pipe_dp_error_qliq_atm(ByVal qliq_sm3day As Double, _
                                   CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With pipe
        .fluid.qliq_sm3day = qliq_sm3day
        PT = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_qliq_atm = (PT.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от дебита газа
Public Function calc_pipe_dp_error_qgas_atm(ByVal qgas_sm3day As Double, _
                                   CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With pipe
        .fluid.q_gas_free_sm3day = qgas_sm3day
        PT = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_qgas_atm = (PT.p_atma - p_out_atma)
    End With
    
End Function
Function calc_pipe_val(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim A As Double, B As Double, C As Double, D As Double, E As Double, F As Double, Slopea As Variant, X1 As Double, X2 As Double
    Dim Th As Double, T As Double
'    A = CoeffA(0)
'    B = CoeffA(1)
'    C = CoeffA(2)
'    D = CoeffA(3)
'
'    Th = XA(0)
'    T = XA(1)
'
'    Select Case RtnType
'    Case 1
'        CreepFD1 = A * Log(B * T) - C * T - D * Th
'    Case 2
'        CreepFD1 = GradientA("CreepFD1", CoeffA, XA, 4, 2)
'    End Select
End Function
' примеры функций для подгонки
Function ExpFunc1(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim A As Double, B As Double, C As Double, Slopea(0 To 2) As Double, X As Double
    A = CoeffA(0)
    B = CoeffA(1)
    C = CoeffA(2)
    X = XA(0)
    Select Case RtnType
    Case 1
        ExpFunc1 = A + C * Exp(-B * X)
    Case 2
        Slopea(0) = 1
        Slopea(1) = -C * X * Exp(-B * X)
        Slopea(2) = Exp(-B * X)
        ExpFunc1 = Slopea
    End Select
End Function
Function ExpFunc2(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim A As Double, B As Double, C As Double, Slopea(0 To 2) As Double, X1 As Double, X2 As Double
    A = CoeffA(0)
    B = CoeffA(1)
    C = CoeffA(2)
    X1 = XA(0)
    X2 = XA(1)
    Select Case RtnType
    Case 1
        ExpFunc2 = A * X2 + C * Exp(-B * X1)
    Case 2
        Slopea(0) = X2
        Slopea(1) = -C * X1 * Exp(-B * X1)
        Slopea(2) = Exp(-B * X1)
        ExpFunc2 = Slopea
    End Select
End Function
Function ExpFuncFD(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim A As Double, B As Double, C As Double, Slopea As Variant, X1 As Double, X2 As Double
    A = CoeffA(0)
    B = CoeffA(1)
    C = CoeffA(2)
    X1 = XA(0)
    X2 = XA(1)
    Select Case RtnType
    Case 1
        ExpFuncFD = A * X2 + C * Exp(-B * X1)
    Case 2
        ExpFuncFD = GradientA("ExpFuncFD", CoeffA, XA, 3, 3)
    End Select
End Function
Function ExpFunc2H(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim A As Double, B As Double, C As Double, Slopea(0 To 2) As Double, X1 As Double, X2 As Double
    Dim HessA(0 To 2, 0 To 2) As Double
    A = CoeffA(0)
    B = CoeffA(1)
    C = CoeffA(2)
    X1 = XA(0)
    X2 = XA(1)
    Select Case RtnType
    Case 1
        ExpFunc2H = A * X2 + C * Exp(-B * X1)
    Case 2
        Slopea(0) = X2
        Slopea(1) = -C * X1 * Exp(-B * X1)
        Slopea(2) = Exp(-B * X1)
        ExpFunc2H = Slopea
    Case 3
        HessA(0, 0) = 0
        HessA(0, 1) = 0
        HessA(0, 2) = 0
        HessA(1, 0) = 0
        HessA(1, 1) = C * X1 ^ 2 * Exp(-B * X1)
        HessA(1, 2) = -X1 * Exp(-B * X1)
        HessA(2, 0) = 0
        HessA(2, 1) = -X1 * Exp(-B * X1)
        HessA(2, 2) = 0
        ExpFunc2H = HessA
    End Select
End Function
Function PolyFunc(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim A As Double, B As Double, C As Double, Slopea(0 To 2) As Double, X As Double
    A = CoeffA(0)
    B = CoeffA(1)
    ' C = CoeffA(2)
    X = XA(0)
    ' X2 = XA(1)
    Select Case RtnType
    Case 1
        PolyFunc = A * X ^ 4 + B * X ^ 3 + A * X ^ 2 + B * X
    Case 2
        Slopea(0) = X ^ 4
        Slopea(1) = X ^ 3
        ' Slopea(2) = Exp(-B * X1)
        PolyFunc = Slopea
    End Select
End Function
Function CreepFD1(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim A As Double, B As Double, C As Double, D As Double, E As Double, F As Double, Slopea As Variant, X1 As Double, X2 As Double
    Dim Th As Double, T As Double
    A = CoeffA(0)
    B = CoeffA(1)
    C = CoeffA(2)
    D = CoeffA(3)
    
    Th = XA(0)
    T = XA(1)
    Select Case RtnType
    Case 1
        CreepFD1 = A * log(B * T) - C * T - D * Th
    Case 2
        CreepFD1 = GradientA("CreepFD1", CoeffA, XA, 4, 2)
    End Select
End Function
Function CreepFD2(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim A As Double, B As Double, C As Double, D As Double, E As Double, F As Double, Slopea As Variant, X1 As Double, X2 As Double
    Dim Th As Double, T As Double
    A = CoeffA(0)
    B = CoeffA(1)
    C = CoeffA(2)
    D = CoeffA(3)
    E = CoeffA(4)
    F = CoeffA(5)
    Th = XA(0)
    T = XA(1)
    Select Case RtnType
    Case 1
        CreepFD2 = (A + B * Exp(C * Th)) * T ^ D / (T ^ E + F * Th)
    Case 2
        CreepFD2 = GradientA("CreepFD2", CoeffA, XA, 6, 2)
    End Select
End Function
' функция для поиска решения по расчету давления в клапане
Public Function calc_dq_gas_pu_valve(Pu As Double, CoeffA)
   Dim q_gas As Double, d_mm As Double, pd As Double, gg As Double, T As Double
   Dim c_calibr As Double
   q_gas = CoeffA(0)
   d_mm = CoeffA(1)
   pd = CoeffA(2)
   gg = CoeffA(3)
   T = CoeffA(4)
   c_calibr = CoeffA(5)
   
   calc_dq_gas_pu_valve = q_gas - GLV_q_gas_sm3day(d_mm, Pu, pd, gg, T, c_calibr)(0)(0)
End Function
Public Function calc_dq_gas_pd_valve(pd As Double, CoeffA)
   Dim q_gas As Double, d_mm As Double, Pu As Double, gg As Double, T As Double
   Dim c_calibr As Double
   q_gas = CoeffA(0)
   d_mm = CoeffA(1)
   Pu = CoeffA(2)
   gg = CoeffA(3)
   T = CoeffA(4)
   c_calibr = CoeffA(5)
   
   calc_dq_gas_pd_valve = q_gas - GLV_q_gas_sm3day(d_mm, Pu, pd, gg, T, c_calibr)(0)(0)
End Function
' функция расчета ошибки в расходе газа при произвольном давлении внутри клапана
Public Function calc_dq_gas_pv_vkr_valve(PV As Double, CoeffA)
   Dim q_gas As Double, d_mm As Double, Pu As Double, pd As Double, gg As Double, T As Double
   Dim d_vkr As Double
   Dim c_calibr As Double
   
   d_mm = CoeffA(0)
   d_vkr = CoeffA(1)
   Pu = CoeffA(2)
   pd = CoeffA(3)
   gg = CoeffA(4)
   T = CoeffA(5)
   c_calibr = CoeffA(5)
   
   calc_dq_gas_pv_vkr_valve = GLV_q_gas_sm3day(d_mm, Pu, PV, gg, T, c_calibr)(0)(0) - GLV_q_gas_sm3day(d_vkr, PV, pd, gg, T, c_calibr)(0)(0)
End Function

