'=======================================================================================
'Unifloc 7.35 new year                                     khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2021
'
'=======================================================================================
' набор функций для решения ДУ и уравнений для различных классов и процедур
Option Explicit
' функция градиента давления для одномерной задачи расчета
' распределения давления в трубопроводе
Public Function calc_grad_1d(l_m As Double, _
                              y() As Double, _
                              pipe As CPipe) As Double()
    Dim out(0 To 0) As Double
    Dim res As PIPE_FLOW_PARAMS
    With pipe
        res = pipe.calc_grad(l_m, y(0), pipe.t_h_mes_C(l_m), calc_dtdl:=False)
    End With
    out(0) = res.dp_dl
    calc_grad_1d = out
End Function
' функция градиента давления для двухмерной задачи расчета
' распределения давления в трубопроводе
Public Function calc_grad_2d(l_m As Double, _
                             y() As Double, _
                             pipe As CPipe) As Double()
    Dim out(0 To 1) As Double
    Dim res As PIPE_FLOW_PARAMS
    With pipe
        res = pipe.calc_grad(l_m, y(0), y(1))
    End With
    out(0) = res.dp_dl
    out(1) = res.dt_dl
    calc_grad_2d = out
End Function
' функция расчета ошибки в оценке давления для штуцера
' в зависимости от поправки на калибровочный параметр
Public Function calc_choke_dp_error_calibr_grav_atm(ByVal calibr As Double, _
                                                    CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pt0 As PTtype
    Dim choke As Cchoke
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    
    ' read coeffA - parameters
    Set choke = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With choke
        .calibr_fr = calibr
        pt0.p_atma = p_out_atma
        pt0.t_C = .t_choke_C
        PT = .calc_choke_p(pt0, calc_p_down:=0)
        calc_choke_dp_error_calibr_grav_atm = (PT.p_atma - p_in_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для штуцера
' в зависимости от диаметра
Public Function calc_choke_dp_error_diam_atm(ByVal diam_m As Double, _
                                                    CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pt0 As PTtype
    Dim choke As Cchoke
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    
    ' read coeffA - parameters
    Set choke = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    'On Error Resume Next
    On Error GoTo er1
    ' low diam can be unstable - trying eliminate it
    
    With choke
        .d_choke_m = diam_m
        pt0.p_atma = p_out_atma
        pt0.t_C = .t_choke_C
        PT = .calc_choke_p(pt0, calc_p_down:=0)
        If PT.p_atma < 0 Then PT.p_atma = 0
        calc_choke_dp_error_diam_atm = (PT.p_atma - p_in_atma)
    End With
    Exit Function
er1:
    Dim str1 As String
    str1 = "calc_choke_dp_error_diam_atm:  error " & Err.Description & " processed. calc continue"
    
    On Error Resume Next
    Call choke.add_log_msg(str1)
    
    On Error GoTo er1
    Resume Next
    
End Function
' функция расчета ошибки в оценке давления для штуцера
' в зависимости от газового фактора
Public Function calc_choke_dp_error_rp_atm(ByVal RP As Double, _
                                                    CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pt0 As PTtype
    Dim choke As Cchoke
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    
    ' read coeffA - parameters
    Set choke = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With choke
        .fluid.rp_m3m3 = RP
        pt0.p_atma = p_out_atma
        pt0.t_C = .t_choke_C
        PT = .calc_choke_p(pt0, calc_p_down:=0)
        calc_choke_dp_error_rp_atm = (PT.p_atma - p_in_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для штуцера
' в зависимости от обводненности
Public Function calc_choke_dp_error_fw_atm(ByVal fw_fr As Double, _
                                                    CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pt0 As PTtype
    Dim choke As Cchoke
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    
    ' read coeffA - parameters
    Set choke = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With choke
        .fluid.fw_fr = fw_fr
        pt0.p_atma = p_out_atma
        pt0.t_C = .t_choke_C
        PT = .calc_choke_p(pt0, calc_p_down:=0)
        calc_choke_dp_error_fw_atm = (PT.p_atma - p_in_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для штуцера
' в зависимости от обводненности
Public Function calc_choke_dp_error_qliq_atm(ByVal qliq As Double, _
                                                    CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pt0 As PTtype
    Dim choke As Cchoke
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    
    ' read coeffA - parameters
    Set choke = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With choke
        .fluid.q_liq_sm3day = qliq
        pt0.p_atma = p_out_atma
        pt0.t_C = .t_choke_C
        PT = .calc_choke_p(pt0, calc_p_down:=0)
        calc_choke_dp_error_qliq_atm = (PT.p_atma - p_in_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для штуцера
' в зависимости от обводненности
Public Function calc_choke_dp_error_qgas_atm(ByVal qgas As Double, _
                                                    CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pt0 As PTtype
    Dim choke As Cchoke
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    
    ' read coeffA - parameters
    Set choke = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With choke
        .fluid.q_gas_free_sm3day = qgas
        pt0.p_atma = p_out_atma
        pt0.t_C = .t_choke_C
        PT = .calc_choke_p(pt0, calc_p_down:=0)
        calc_choke_dp_error_qgas_atm = (PT.p_atma - p_in_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для ЭЦН
' в зависимости от поправки на напор насоса
Public Function calc_ESP_dp_error_calibr_head_atm(ByVal calibr_head As Double, _
                                   CoeffA As Variant) As Double
    
    Dim pump As CESPpump
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    Dim t_in_C As Double
    Dim t_dis_C As Double
    ' read coeffA - parameters
    Set pump = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    t_in_C = CoeffA(3)
    t_dis_C = CoeffA(4)
    
    With pump
        .calibr_head = calibr_head
        Call .calc_ESP(p_in_atma, t_in_C, t_dis_C, True, False)
        calc_ESP_dp_error_calibr_head_atm = (.p_dis_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для ЭЦН
' в зависимости от поправки на напор насоса
Public Function calc_ESP_dp_error_calibr_rate_atm(ByVal calibr_rate As Double, _
                                   CoeffA As Variant) As Double
    
    Dim pump As CESPpump
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    Dim t_in_C As Double
    Dim t_dis_C As Double
    ' read coeffA - parameters
    Set pump = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    t_in_C = CoeffA(3)
    t_dis_C = CoeffA(4)
    
    With pump
        .calibr_rate = calibr_rate
        Call .calc_ESP(p_in_atma, t_in_C, t_dis_C, True, False)
        calc_ESP_dp_error_calibr_rate_atm = (.p_dis_atma - p_out_atma)
    End With
    
End Function
' расчет параметров трубы
' функция расчета ошибки в оценке давления для трубы
' в зависимости от поправки на гравитационную составляющую градиента
Public Function calc_pipe_dp_error_calibr_grav_atm(ByVal calibr_grav As Double, _
                                   CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With pipe
        .calibr_grav = calibr_grav
        PT = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_calibr_grav_atm = (PT.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от поправки на составляющую градиента по трению
Public Function calc_pipe_dp_error_calibr_fric_atm(ByVal calibr_fric As Double, _
                                   CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With pipe
        .calibr_fric = calibr_fric
        PT = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_calibr_fric_atm = (PT.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от газового фактора
Public Function calc_pipe_dp_error_rp_atm(ByVal RP As Double, _
                                   CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With pipe
        .fluid.rp_m3m3 = RP
        PT = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_rp_atm = (PT.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от обводненности
Public Function calc_pipe_dp_error_fw_atm(ByVal fw As Double, _
                                   CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With pipe
        .fluid.fw_fr = fw
        PT = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_fw_atm = (PT.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от дебита жидкости
Public Function calc_pipe_dp_error_qliq_atm(ByVal q_liq_sm3day As Double, _
                                   CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With pipe
        .fluid.q_liq_sm3day = q_liq_sm3day
        PT = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_qliq_atm = (PT.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от дебита газа
Public Function calc_pipe_dp_error_qgas_atm(ByVal qgas_sm3day As Double, _
                                   CoeffA As Variant) As Double
    Dim PT As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = CoeffA(0)
    p_in_atma = CoeffA(1)
    p_out_atma = CoeffA(2)
    
    With pipe
        .fluid.q_gas_free_sm3day = qgas_sm3day
        PT = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_qgas_atm = (PT.p_atma - p_out_atma)
    End With
    
End Function
Function calc_pipe_val(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, d As Double, e As Double, f As Double, Slopea As Variant, X1 As Double, X2 As Double
    Dim Th As Double, t As Double
'    A = CoeffA(0)
'    B = CoeffA(1)
'    C = CoeffA(2)
'    D = CoeffA(3)
'
'    Th = XA(0)
'    T = XA(1)
'
'    Select Case RtnType
'    Case 1
'        CreepFD1 = A * Log(B * T) - C * T - D * Th
'    Case 2
'        CreepFD1 = GradientA("CreepFD1", CoeffA, XA, 4, 2)
'    End Select
End Function
' примеры функций для подгонки
Function ExpFunc1(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, Slopea(0 To 2) As Double, x As Double
    a = CoeffA(0)
    b = CoeffA(1)
    c = CoeffA(2)
    x = XA(0)
    Select Case RtnType
    Case 1
        ExpFunc1 = a + c * Exp(-b * x)
    Case 2
        Slopea(0) = 1
        Slopea(1) = -c * x * Exp(-b * x)
        Slopea(2) = Exp(-b * x)
        ExpFunc1 = Slopea
    End Select
End Function
Function ExpFunc2(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, Slopea(0 To 2) As Double, X1 As Double, X2 As Double
    a = CoeffA(0)
    b = CoeffA(1)
    c = CoeffA(2)
    X1 = XA(0)
    X2 = XA(1)
    Select Case RtnType
    Case 1
        ExpFunc2 = a * X2 + c * Exp(-b * X1)
    Case 2
        Slopea(0) = X2
        Slopea(1) = -c * X1 * Exp(-b * X1)
        Slopea(2) = Exp(-b * X1)
        ExpFunc2 = Slopea
    End Select
End Function
Function ExpFuncFD(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, Slopea As Variant, X1 As Double, X2 As Double
    a = CoeffA(0)
    b = CoeffA(1)
    c = CoeffA(2)
    X1 = XA(0)
    X2 = XA(1)
    Select Case RtnType
    Case 1
        ExpFuncFD = a * X2 + c * Exp(-b * X1)
    Case 2
        ExpFuncFD = GradientA("ExpFuncFD", CoeffA, XA, 3, 3)
    End Select
End Function
Private Function GradientA(Func As Variant, Pvaluea0() As Double, _
                   XvalueA0() As Double, NumP As Long, NumX As Long, Optional DP As Double = 0.000001) As Variant
    Dim Eform As String, Eform2 As String, i As Long, j As Long, K As Long, ResA() As Double
    Dim res1 As Double, res2 As Double
    ' Evaluate the gradient vector (vector of partial first differentials, wrt each parameter)
    ' for the function specified in Func, using finite difference method.
    ReDim ResA(0 To NumP - 1)
    For i = 0 To NumP - 1
        Pvaluea0(i) = Pvaluea0(i) + DP
        res1 = Application.Run(Func, XvalueA0, Pvaluea0, 1)
        Pvaluea0(i) = Pvaluea0(i) - DP * 2
        res2 = Application.Run(Func, XvalueA0, Pvaluea0, 1)
        ResA(i) = (res1 - res2) / (DP * 2)
        Pvaluea0(i) = Pvaluea0(i) + DP
    Next i
    GradientA = ResA
End Function
Function ExpFunc2H(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, Slopea(0 To 2) As Double, X1 As Double, X2 As Double
    Dim HessA(0 To 2, 0 To 2) As Double
    a = CoeffA(0)
    b = CoeffA(1)
    c = CoeffA(2)
    X1 = XA(0)
    X2 = XA(1)
    Select Case RtnType
    Case 1
        ExpFunc2H = a * X2 + c * Exp(-b * X1)
    Case 2
        Slopea(0) = X2
        Slopea(1) = -c * X1 * Exp(-b * X1)
        Slopea(2) = Exp(-b * X1)
        ExpFunc2H = Slopea
    Case 3
        HessA(0, 0) = 0
        HessA(0, 1) = 0
        HessA(0, 2) = 0
        HessA(1, 0) = 0
        HessA(1, 1) = c * X1 ^ 2 * Exp(-b * X1)
        HessA(1, 2) = -X1 * Exp(-b * X1)
        HessA(2, 0) = 0
        HessA(2, 1) = -X1 * Exp(-b * X1)
        HessA(2, 2) = 0
        ExpFunc2H = HessA
    End Select
End Function
Function PolyFunc(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, Slopea(0 To 2) As Double, x As Double
    a = CoeffA(0)
    b = CoeffA(1)
    ' C = CoeffA(2)
    x = XA(0)
    ' X2 = XA(1)
    Select Case RtnType
    Case 1
        PolyFunc = a * x ^ 4 + b * x ^ 3 + a * x ^ 2 + b * x
    Case 2
        Slopea(0) = x ^ 4
        Slopea(1) = x ^ 3
        ' Slopea(2) = Exp(-B * X1)
        PolyFunc = Slopea
    End Select
End Function
Function CreepFD1(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, d As Double, e As Double, f As Double, Slopea As Variant, X1 As Double, X2 As Double
    Dim Th As Double, t As Double
    a = CoeffA(0)
    b = CoeffA(1)
    c = CoeffA(2)
    d = CoeffA(3)
    
    Th = XA(0)
    t = XA(1)
    Select Case RtnType
    Case 1
        CreepFD1 = a * Log(b * t) - c * t - d * Th
    Case 2
        CreepFD1 = GradientA("CreepFD1", CoeffA, XA, 4, 2)
    End Select
End Function
Function CreepFD2(XA() As Double, CoeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, d As Double, e As Double, f As Double, Slopea As Variant, X1 As Double, X2 As Double
    Dim Th As Double, t As Double
    a = CoeffA(0)
    b = CoeffA(1)
    c = CoeffA(2)
    d = CoeffA(3)
    e = CoeffA(4)
    f = CoeffA(5)
    Th = XA(0)
    t = XA(1)
    Select Case RtnType
    Case 1
        CreepFD2 = (a + b * Exp(c * Th)) * t ^ d / (t ^ e + f * Th)
    Case 2
        CreepFD2 = GradientA("CreepFD2", CoeffA, XA, 6, 2)
    End Select
End Function
' функция для поиска решения по расчету давления в клапане
Public Function calc_dq_gas_pu_valve(Pu As Double, CoeffA)
   Dim q_gas As Double, d_mm As Double, pd As Double, gg As Double, t As Double
   Dim calibr As Double
   q_gas = CoeffA(0)
   d_mm = CoeffA(1)
   pd = CoeffA(2)
   gg = CoeffA(3)
   t = CoeffA(4)
   calibr = CoeffA(5)
   
   calc_dq_gas_pu_valve = q_gas - GLV_q_gas_sm3day(d_mm, Pu, pd, gg, t, calibr)(0)(0)
End Function
Public Function calc_dq_gas_pd_valve(pd As Double, CoeffA)
   Dim q_gas As Double, d_mm As Double, Pu As Double, gg As Double, t As Double
   Dim calibr As Double
   q_gas = CoeffA(0)
   d_mm = CoeffA(1)
   Pu = CoeffA(2)
   gg = CoeffA(3)
   t = CoeffA(4)
   calibr = CoeffA(5)
   
   calc_dq_gas_pd_valve = q_gas - GLV_q_gas_sm3day(d_mm, Pu, pd, gg, t, calibr)(0)(0)
End Function
' функция расчета ошибки в расходе газа при произвольном давлении внутри клапана
Public Function calc_dq_gas_pv_vkr_valve(PV As Double, CoeffA)
   Dim q_gas As Double, d_mm As Double, Pu As Double, pd As Double, gg As Double, t As Double
   Dim d_vkr As Double
   Dim calibr As Double
   
   d_mm = CoeffA(0)
   d_vkr = CoeffA(1)
   Pu = CoeffA(2)
   pd = CoeffA(3)
   gg = CoeffA(4)
   t = CoeffA(5)
   calibr = CoeffA(5)
   
   calc_dq_gas_pv_vkr_valve = GLV_q_gas_sm3day(d_mm, Pu, PV, gg, t, calibr)(0)(0) - GLV_q_gas_sm3day(d_vkr, PV, pd, gg, t, calibr)(0)(0)
End Function
' функция ищет корни уравнения вида
' f(x) = 0 на отрезке [x1..x2]
Public Function solve_equation_bisection(func_name As String, _
                                         ByVal X1 As Double, _
                                         ByVal X2 As Double, _
                                         CoeffA, _
                                         prm As CSolveParam) As Boolean
' func_name             - название функции для которой ищем решение
' x1                    - левая граница аргумента для поиска решения
' x2                    - правая граница аргумента для поиска решения
' coeffA                - параметры функции для которой ищем решение
' prm                   - объект с настройками поиска решения
'                         через этот же объект возвращаются решение и его параметры
    Dim Y1 As Double
    Dim Y2 As Double
    Dim y_temp As Double
    Dim x_temp As Double
    Dim i As Long
    Dim err_msg As String
    i = 0
On Error GoTo err1:
    ' определим значения параметров на границе
    Y1 = Application.Run(func_name, X1, CoeffA)
    Y2 = Application.Run(func_name, X2, CoeffA)
    With prm
        If Y1 * Y2 > 0 Then
            ' если значения на границе одного знака - то метод поиска решения не работает
            ' возможно решения нет и найти его не получится
            .iterations = 0
            .found_solution = False
            .msg = "solve_equation_bisection: values at segment's ends must have a different sign"
            solve_equation_bisection = False
            Exit Function
        End If
        ' начинаем цикл поиска решений (итерации)
        Do
            i = i + 1
            ' делим отрезок пополам
            x_temp = (X1 + X2) / 2
            y_temp = Application.Run(func_name, x_temp, CoeffA)
            If Abs(y_temp) < .y_tolerance Then
                solve_equation_bisection = True
                .x_solution = x_temp
                .y_solution = y_temp
                .iterations = i
                .found_solution = True
                .msg = "solve_equation_bisection: done by  " + CStr(i) + " iterations, tolerance " + CStr(.y_tolerance)
                Exit Function
            Else
                If y_temp * Y1 > 0 Then
                    X1 = x_temp
                    Y1 = y_temp
                Else
                    X2 = x_temp
                    Y2 = y_temp
                End If
            End If
        Loop Until i >= 100
        
        solve_equation_bisection = False
        .x_solution = x_temp
        .y_solution = y_temp
        .iterations = i
        .found_solution = False
        .msg = "solve_equation_bisection: too many iterations " + CStr(i)
    End With
    Exit Function
err1:
    On Error GoTo 0
    With prm
        .iterations = i
        .found_solution = False
        .msg = "solve_equation_bisection error " & Err.Description
    End With
    solve_equation_bisection = False
End Function
' функция решения ОДУ методом Кэш Карпа (Cash-Karp adaptive ODE solver)
' Решается ОДУ вида  Y'=f(Y,x)  с начальными устьвиями Y(xs)=Ys
' Y или одна переменная или вектор размерности N.
Public Function solve_ode(ByVal func_name As String, _
                          y0() As Double, _
                          XA() As Double, _
                          CoeffA As Variant, _
                 Optional eps As Double = 0.000001, _
                 Optional step As Double = 10, _
                 Optional MaxIts As Long = 1000)
' func_name         - имя функции  f(x)
' Y0                - начальное значение для расчета
' XA                - значения аргумента для которых ищем решение
' CoeffA            - дополнительные параметры функции градиента
' Eps
' Step
' MaxIts
    Dim M As Long, N As Long, State As ODESolverState, _
    YA() As Double, i As Long, _
    Rtn As Boolean, Rep As ODESolverReport
    Dim R() As Double
  
    N = UBound(y0) + 1
    M = UBound(XA) + 1
    'Set up any required output arrays
    ReDim YA(0 To M - 1, 0 To N - 1)
    
    'Call the appropriate AlgLib routine to initialise the State object
    Call ODESolverRKCK(y0(), N, XA, M, eps, step, State)
    
    ' Loop through the AlgLib solver routine and the external ODE
    ' evaluation routine until the solver routine returns "False",
    ' which indicates that it has finished.
    ' The VBA function named in "func_name" is called using
    ' the Application.Run method.
    Rtn = True
    i = 0
    Do While Rtn = True And i < MaxIts
        Rtn = ODESolverIteration(State)
        R = Application.Run(func_name, State.x, State.y, CoeffA(0))
        State.DY(0) = R(0)
        i = i + 1
    Loop
    
     ' Extract the desired results from the State
     ' object using the appropriate AlgLib routine
     Call ODESolverResults(State, M, XA, YA, Rep)
    
    ' If necessary convert the AlgLib output array(s) to
    ' a form suitable for Excel.  In this case YA2 is
    ' a 2D base 0 array, which may be assigned to the
    ' function return value without further processing.
    
    ' Assign the output array to the function return value
     solve_ode = YA
End Function

