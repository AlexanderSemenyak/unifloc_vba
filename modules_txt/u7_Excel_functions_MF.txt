'=======================================================================================
'Unifloc 7.27 primavera                                     khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2021
'
'=======================================================================================
'функции для проведения расчетов из интерфейса Excel
'многофазный поток в трубах и элементах инфраструктуры
Option Explicit
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
'расчет градиента давления
'с использованием многофазных корреляций
Public Function MF_dpdl_atmm(ByVal d_m As Double, _
             ByVal p_atma As Double, _
             ByVal Ql_rc_m3day As Double, _
             ByVal Qg_rc_m3day As Double, _
    Optional ByVal mu_oil_cP As Double = const_mu_o, _
    Optional ByVal mu_gas_cP As Double = const_mu_g, _
    Optional ByVal sigma_oil_gas_Nm As Double = const_sigma_oil_Nm, _
    Optional ByVal rho_lrc_kgm3 As Double = const_go_ * 1000, _
    Optional ByVal rho_grc_kgm3 As Double = const_gg_ * const_rho_air, _
    Optional ByVal eps_m As Double = 0.0001, _
    Optional ByVal theta_deg As Double = 90, _
    Optional ByVal hcorr As Integer = 1, _
    Optional ByVal param_out As Integer = 0, _
    Optional ByVal c_calibr_grav As Double = 1, _
    Optional ByVal c_calibr_fric As Double = 1)
' расчет градиента давления по одной из корреляций
' d_m - диаметр трубы в которой идет поток
' p_atma - давление в точке расчета
' Ql_rc_m3day - дебит жидкости в рабочих условиях
' Qg_rc_m3day - дебит газа в рабочих условиях
' mu_oil_cP - вязкость нефти в рабочих условиях
' mu_gas_cP - вязкость газа в рабочих условиях
' sigma_oil_gas_Nm - поверхностное натяжение
'              жидкость газ
' rho_lrc_kgm3 - плотность нефти
' rho_grc_kgm3 - плотность газа
' eps_m     - шероховатость
' theta_deg - угол от горизонтали
' hcorr  - тип корреляции
' param_out - параметр для вывода
' c_calibr_grav - калибровка гравитации
' c_calibr_fric - калибровка трения
'description_end
    
    Dim PrGrad
    
On Error GoTo er1:
    Select Case hcorr
        Case 0
        
                PrGrad = unf_BegsBrillGradient(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, , , c_calibr_grav, c_calibr_fric)
        Case 1
        
                PrGrad = unf_AnsariGradient(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, _
                                p_atma, c_calibr_grav, c_calibr_fric)
       Case 2
        
                PrGrad = unf_UnifiedTUFFPGradient(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, _
                                p_atma, c_calibr_grav, c_calibr_fric)
       Case 3
        
                PrGrad = unf_GrayModifiedGradient(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, _
                                , , , c_calibr_grav, c_calibr_fric)
       Case 4
        
                PrGrad = unf_HagedornandBrawnmodified(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, _
                                p_atma, , , , c_calibr_grav, c_calibr_fric)
    End Select
    
    If param_out = 0 Then
        MF_dpdl_atmm = PrGrad
    Else
        MF_dpdl_atmm = PrGrad(param_out)
    End If
    Exit Function
er1:
    MF_dpdl_atmm = -1
    addLogMsg "Error:MF_dpdl_atmm:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет корректирующего фактора (множителя) модели штуцера под замеры
' медленный расчет - калибровка подбирается
Public Function MF_choke_calibr( _
            ByVal feed As String, _
            ByVal d_choke_mm As Double, _
            Optional ByVal p_in_atma As Double = -1, _
            Optional ByVal p_out_atma As Double = -1, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal t_choke_C As Double = 20, _
            Optional ByVal param As String = "")
            
' feed         - закодированная строка с параметрами потока.
' d_choke_mm    - диаметр штуцера (эффективный), мм
' p_in_atma     - давление на входе (высокой стороне)
' p_out_atma    - давление на выходе (низкой стороне)
' d_pipe_mm     - диаметр трубы до и после штуцера, мм
' t_choke_C     - температура, С.
' param        - параметры расчета json строка
' результат     - число - калибровочный коэффициент для модели.
'                 штуцера  - множитель на дебит через штуцер
'description_end
' calibr_type - тип калибровки
'             0 - подбор параметра c_calibr
'             1 - подбор диаметра штуцера
'             2 - подбор газового фактор
'             3 - подбор обводненности
'             4 - подбор дебита жидкости
'             5 - подбор дебита газа свободного
On Error GoTo err1:
    Dim choke As New Cchoke
    Dim PT As PTtype
 '   Dim PVT As CPVT
    Dim out, out_desc
    Dim CoeffA(0 To 2)
    Dim Func As String
    Dim cal_type_string As String
    Dim val_min As Double, val_max As Double
    Dim prm As New CSolveParam
    
    Dim show_log As Boolean
    Dim name_value As String
    Dim calibr As Double
    Dim calibr_type As Integer
    Dim log_str As String
    
    show_log = True
    name_value = ""
    calibr = 1
    
    Call read_choke_param(choke, param, calibr, show_log, name_value, calibr_type)
    
    Call choke.fluid.init_feed(feed)
    
    If choke.fluid.gas_only Then
        MF_choke_calibr = "not implemented yet"
        Exit Function
    End If
    
'    Set choke.fluid = PVT
    choke.d_down_m = d_pipe_mm / 1000
    choke.d_up_m = d_pipe_mm / 1000
    choke.d_choke_m = d_choke_mm / 1000
    choke.t_choke_C = t_choke_C
    
     ' prepare solution function
    Set CoeffA(0) = choke
        CoeffA(1) = p_in_atma
        CoeffA(2) = p_out_atma
        
    Select Case calibr_type
        Case 0
            Func = "calc_choke_dp_error_calibr_grav_atm"
            cal_type_string = "calibr"
            val_min = 0.5
            val_max = 1.5
        Case 1
            Func = "calc_choke_dp_error_diam_atm"
            cal_type_string = "diam_choke"
            val_min = choke.d_choke_m / 2
            val_max = choke.d_up_m
        Case 2
            Func = "calc_choke_dp_error_rp_atm"
            cal_type_string = "rp"
            val_min = 20 'pipe.fluid.rp_m3m3 * 0.5
            val_max = choke.fluid.rp_m3m3 * 2
            ' Расширить диапазон поиска по газовому фактору может быть опасно
            ' так как возможна неоднозначность решения
            ' а текущий метод поиска работает только если есть одно решение
        Case 3
            Func = "calc_choke_dp_error_fw_atm"
            cal_type_string = "fw"
            val_min = 0
            val_max = 1
            If val_max > 1 Then val_max = 1
        Case 4
            Func = "calc_choke_dp_error_qliq_atm"
            cal_type_string = "qliq"
            val_min = 0
            val_max = choke.fluid.q_liq_sm3day * 1.5
        Case 5
            Func = "calc_choke_dp_error_qgas_atm"
            cal_type_string = "qgas_free"
            val_min = 0
            If choke.fluid.q_gas_free_sm3day > 0 Then
                val_max = choke.fluid.q_gas_free_sm3day * 2
            Else
                val_max = 10000
            End If
       Case Else
            ' solve_equation_bisection without initialasing func crashes excel
            MF_choke_calibr = "not implemented"
            Exit Function
    End Select
   
    prm.y_tolerance = const_pressure_tolerance
    If solve_equation_bisection(Func, val_min, val_max, CoeffA, prm) Then
    
        out = Array(prm.x_solution, _
                    cal_type_string, _
                    prm.y_solution, _
                    prm.iterations, _
                    prm.msg)
    Else
        out = Array("no solution", _
                    cal_type_string, _
                    prm.y_solution, _
                    prm.iterations, _
                    prm.msg)
    End If
        
    out_desc = Array("solution", _
                     "cal_type", _
                     "y_solution", _
                     "iterations", _
                     "description")
                     
    If show_log Then
            log_str = choke.log.get_str
            If Len(log_str) > 32000 Then
                log_str = "log too long"
            End If
    Else
        log_str = ""
    End If
    MF_choke_calibr = array_join(Array(out, out_desc, Array(log_str, "", "", "", "")))
    
 
    
    Exit Function
err1:
    On Error Resume Next
    addLogMsg "Error:MF_choke_calibr:" & Err.Description
    log_str = choke.log.get_str
    MF_choke_calibr = array_join(Array(Array(-1, "", "", "", ""), _
                                       Array("", "", "", "", ""), _
                                       Array(log_str, "", "", "", "")))
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
'  расчет распределения давления и температуры в трубопроводе
'  с использованием многофазных корреляций
Public Function MF_pipe_p_atma( _
                 ByVal p_calc_from_atma As Double, _
                 ByVal t_calc_from_C As Double, _
        Optional ByVal construction As String = "", _
        Optional ByVal feed As String = "", _
        Optional ByVal t_model As String = "", _
        Optional ByVal calc_along_coord As Boolean = True, _
        Optional ByVal flow_along_coord As Boolean = True, _
        Optional ByVal flow_correlation As Integer = 0, _
        Optional ByVal param As String)
' p_calc_from_atma  - давление с которого начинается расчет, атм
'           граничное значение для проведения расчета
' t_calc_from_C - температура в точке где задано давление расчета
' feed      - параметры потока флюидов json строка. Используйте
'           функцию encode_feed() для генерации
' construction - параметры конструкции json строка. Используйте
'           функцию encode_pipe() для генерации
' t_model   - параметры температурной модели json строка.
'           Используйте функцию encode_feed() для генерации
' calc_along_coord - направление расчета относительно координат.
' flow_along_coord - направление потока относительно координат.
' flow_correlation - гидравлическая корреляция, номер
' param     - дополнительные параметры расчета потока
' результат - число - давление на другом конце трубы atma.
'           и распределение параметров по трубе
'description_end
    Dim pipe As New CPipe
    Dim res, res1
    Dim out_curves As Integer
    Dim num_value As Integer
    Dim out_curves_num_points As Integer
    
    out_curves_num_points = 20
On Error GoTo err1:
    
    Set pipe = new_pipeline_with_feed(construction, _
                                      feed, _
                                      t_model, _
                                      calc_along_coord, _
                                      flow_along_coord, _
                                      flow_correlation, _
                                      param)
    
    ' calc pressure distribution
    res1 = PT_to_array(pipe.calc_dPipe(p_calc_from_atma, t_calc_from_C, allCurves))
    If out_curves = 2 Then
        res = pipe.array_out_new(out_curves_num_points, all_curves_out:=True)
    Else
        res = pipe.array_out_new()
    End If
    res(0, 0) = res1(0)
    
    res(0, 0) = res(0, num_value)
    res(1, 0) = res(1, num_value)
    MF_pipe_p_atma = res
    Exit Function
err1:
    MF_pipe_p_atma = pipe.array_out()  ' Array(-1, "error")
    addLogMsg "Error:MF_pipe_p_atma:" & Err.Description
End Function
' ==============  функции для расчета штуцера ==========================
' =====================================================================
Private Sub read_choke_param(choke As Cchoke, _
                            param As String, _
                            ByRef calibr As Double, _
                            ByRef show_log As Boolean, _
                            ByRef name_value As String, _
                          Optional ByRef calibr_type As Integer = 0)
    Dim prmd As Dictionary ' param dictionary and settings variables with default values
    
    On Error Resume Next
        ' decode param here
        Set prmd = ParseJson(param)
        If prmd Is Nothing Then
            choke.addLogMsg "info: no param found, default settings applied"
        End If
        ' for references to parameter names we use constants to make it easier to manage later.
        ' by default the variables will be set to zero or empty (if no key is found)
    
        show_log = prmd(prm_show_log)
        
        name_value = prmd(prm_name_value)
       ' If name_value = 0 Or num_value > nv Then num_value = 0
        
        calibr = prmd(prm_choke_calibr)
        
        calibr_type = 0 ' default value
        ' here expect calibr type in param
        ' MF_choke_calibr for details
        '       Select Case calibr_type
        '                Case 0
        '                    Func = "calc_choke_dp_error_calibr_grav_atm"
        '                    cal_type_string = "calibr"
        '                Case 1
        '                    Func = "calc_choke_dp_error_diam_atm"
        '                    cal_type_string = "diam_choke"
        '                Case 2
        '                    Func = "calc_choke_dp_error_rp_atm"
        '                    cal_type_string = "rp"
        '                Case 3
        '                    Func = "calc_choke_dp_error_fw_atm"
        '                    cal_type_string = "fw"
        '                Case 4
        '                    Func = "calc_choke_dp_error_qliq_atm"
        '                    cal_type_string = "qliq"
        '                Case 5
        '                    Func = "calc_choke_dp_error_qgas_atm"
        '                    cal_type_string = "qgas_free"
        '               Case Else
        '                    ' solve_equation_bisection without initialasing func crashes excel
        '                    MF_choke_calibr = "not implemented"
        '                    Exit Function
        '            End Select
        '
        calibr_type = prmd(prm_choke_calibr_type)
        If calibr_type < 0 Or calibr_type > 5 Then calibr = 0
        Select Case calibr_type
             Case 0
                If calibr < 0.00001 Then calibr = 1
                Call choke.addLogMsg("info: calibr_type = 0, standard calibration, choke_calibr = " & calibr)
             Case 1
                If calibr < 1 Then calibr = 1
                Call choke.addLogMsg("info: calibr_type = 1, diam calibration, choke_calibr = " & calibr)
             Case 2
                If calibr < 1 Then calibr = 1
                Call choke.addLogMsg("info: calibr_type = 2, rp calibration, choke_calibr = " & calibr)
             Case 3
                If calibr < 0 Then
                    calibr = 0
                ElseIf calibr > 100 Then
                    calibr = 100
                End If
                Call choke.addLogMsg("info: calibr_type = 3, fw calibration, choke_calibr = " & calibr)
             Case 4
                If calibr < 1 Then calibr = 1
                Call choke.addLogMsg("info: calibr_type = 4, qliq calibration, choke_calibr = " & calibr)
             Case 5
                If calibr < 1 Then calibr = 1
                Call choke.addLogMsg("info: calibr_type = 5, qgas_free calibration, choke_calibr = " & calibr)
        End Select
        
End Sub
Private Function make_choke_output_array()
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет давления в штуцере
Public Function MF_choke_q_sm3day( _
                     ByVal feed As String, _
                     ByVal d_choke_mm As Double, _
                     ByVal p_in_atma As Double, _
                     ByVal p_out_atma As Double, _
            Optional ByVal t_choke_C = 20, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal param As String = "")
' feed         - закодированная строка с параметрами потока.
' d_choke_mm   - диаметр штуцера (эффективный)
' p_in_atma    - давление на входе в штуцер, атм.
'                высокая сторона
' p_out_atma   - давление на выходе из штуцера, атм.
'                низкая сторона
' t_choke_C    - температура потока, С.
' d_pipe_mm    - диаметр трубы до и после штуцера
' param        - параметры расчета json строка
' результат    - число - массив значений с параметрами штуцера
'                и давление на штуцере на расчетной стороне.
'description_end
On Error GoTo err1:
    Dim choke As New Cchoke
   ' Dim res(0 To 2, 0 To nv) As Variant
        
    
    Dim show_log As Boolean
    show_log = 1
    Dim name_value As String
    name_value = 0
    Dim calibr As Double
    calibr = 1
    ' auxiliary variables
    Dim log_str As String
    Dim i As Integer
    Dim PT As PTtype
    Dim pres As Double
    Dim out, out_desc
    Dim q As Double
    Dim feed_out As String
    With choke
        Call read_choke_param(choke, param, calibr, show_log, name_value, 10)
        If name_value = "" Then name_value = "q_liq_sm3day"
    On Error GoTo err1:
        
        Call .fluid.init_feed(feed)
        .d_down_m = d_pipe_mm / 1000
        .d_up_m = d_pipe_mm / 1000
        .d_choke_m = d_choke_mm / 1000
        .c_calibr_fr = calibr
        
        q = .calc_choke_q_liq_sm3day(p_in_atma, p_out_atma, t_choke_C)
        .fluid.q_liq_sm3day = q
        feed_out = .fluid.feed
err1done:
        On Error Resume Next
        MF_choke_q_sm3day = .array_out(name_value, show_log)
    End With
    Exit Function
err1:
    MF_choke_q_sm3day = -1
    choke.addLogMsg "error:MF_choke_q_sm3day:" & Err.Description
    Resume err1done:
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет давления в штуцере (дросселе)
Public Function MF_choke_p_atma( _
                     ByVal d_choke_mm As Double, _
                     ByVal feed As String, _
                     ByVal p_calc_from_atma As Double, _
            Optional ByVal t_choke_C As Double = 20, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal calc_along_flow As Boolean = True, _
            Optional ByVal param As String = "")
' d_choke_mm      - диаметр штуцера (эффективный)
' feed            - закодированная строка с параметрами потока.
' p_calc_from_atma - давление с которого начинается расчет, атм
'                  граничное значение для проведения расчета
'                  либо давление на входе, либо на выходе
' t_choke_C       - температура потока, С.
' d_pipe_mm       - диаметр трубы до и после штуцера
' calc_along_flow - флаг направления расчета относительно потока
' param           - параметры расчета json строка
' результат       - число - массив значений с параметрами штуцера
'                   и давление на штуцере на расчетной стороне.
'description_end
'Const nv = 9  ' output array dimension (number of columns)
On Error GoTo err1:
    Dim choke As New Cchoke
    
'    Dim prmd As Dictionary ' param dictionary and settings variables with default values
    Dim show_log As Boolean
    Dim name_value As String
    Dim calibr As Double
    
    show_log = True
   ' num_value = 0
    calibr = 1
    With choke
        Call read_choke_param(choke, param, calibr, show_log, name_value)
        Call .fluid.init_feed(feed)
        .d_down_m = d_pipe_mm / 1000
        .d_up_m = d_pipe_mm / 1000
        .d_choke_m = d_choke_mm / 1000
        .c_calibr_fr = calibr
        
        If calc_along_flow Then
            Call .calc_choke_p_lin(set_PT(p_calc_from_atma, t_choke_C))
            If name_value = "" Then name_value = "p_out_atma"
        Else
            Call .calc_choke_p_buf(set_PT(p_calc_from_atma, t_choke_C))
            If name_value = "" Then name_value = "p_intake_atma"
        End If
err1done:
    On Error Resume Next
        MF_choke_p_atma = .array_out(name_value, show_log)
    End With
    Exit Function
err1:
    MF_choke_p_atma = -1
    choke.addLogMsg "error:MF_p_choke_atma:" & Err.Description
    Resume err1done:
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет корректирующего фактора (множителя) модели штуцера под замеры
' быстрый расчет - калибровка вычисляется
Public Function MF_choke_calibr_fast( _
            ByVal feed As String, _
            ByVal d_choke_mm As Double, _
            Optional ByVal p_in_atma As Double = -1, _
            Optional ByVal p_out_atma As Double = -1, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal t_choke_C As Double = 20, _
            Optional ByVal param As String = "")
' feed         - закодированная строка с параметрами потока.
' d_choke_mm    - диаметр штуцера (эффективный), мм
' p_in_atma     - давление на входе (высокой стороне)
' p_out_atma    - давление на выходе (низкой стороне)
' d_pipe_mm     - диаметр трубы до и после штуцера, мм
' t_choke_C     - температура, С.
' param        - параметры расчета json строка
' результат     - число - калибровочный коэффициент для модели.
'                 штуцера  - множитель на дебит через штуцер
'description_end
On Error GoTo err1:
    Dim choke As New Cchoke
    Dim arr_out
    Dim out As String, out_desc As String
    
    Call choke.fluid.init_feed(feed)
    
    If choke.fluid.gas_only Then
        MF_choke_calibr_fast = "not implemented yet"
        Exit Function
    End If
    
    choke.d_down_m = d_pipe_mm / 1000
    choke.d_up_m = d_pipe_mm / 1000
    choke.d_choke_m = d_choke_mm / 1000
    
    If p_in_atma > p_out_atma And p_out_atma >= 1 Then
        Call choke.calc_choke_calibration(p_in_atma, p_out_atma, t_choke_C)
        out = choke.c_calibr_fr
        out_desc = "c_calibr_fr"
    End If
    arr_out = Array(Array(out, p_in_atma, p_out_atma, t_choke_C, choke.c_calibr_fr), _
                    Array(out_desc, "p_intake_atma", "p_out_atma", "t_choke_C", "c_calibr_fr"), _
                    Array(choke.log.get_str, "", "", "", "")) ' на выходе выдаем массив
    MF_choke_calibr_fast = array_join(arr_out)
    Exit Function
err1:
    choke.addLogMsg "Error:MF_choke_calibr_fast:" & Err.Description
    arr_out = Array(Array(-1, "", "", "", ""), _
                    Array(out_desc, "p_intake_atma", "p_out_atma", "t_choke_C", "c_calibr_fr"), _
                    Array(choke.log.get_str, "", "", "", "")) ' на выходе выдаем массив
    MF_choke_calibr_fast = array_join(arr_out)
End Function

