'=======================================================================================
'Unifloc 7.33 tashkent                                   khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2021
'
'=======================================================================================
'функции для проведения расчетов из интерфейса Excel
'многофазный поток в трубах и элементах инфраструктуры
Option Explicit
'description_to_manual      - для автогенерации
'расчет градиента давления
'с использованием многофазных корреляций
Public Function MF_dpdl_atmm(ByVal d_m As Double, _
             ByVal p_atma As Double, _
             ByVal Ql_rc_m3day As Double, _
             ByVal Qg_rc_m3day As Double, _
    Optional ByVal mu_oil_cP As Double = const_mu_o, _
    Optional ByVal mu_gas_cP As Double = const_mu_g, _
    Optional ByVal sigma_oil_gas_Nm As Double = const_sigma_oil_Nm, _
    Optional ByVal rho_lrc_kgm3 As Double = const_go_ * 1000, _
    Optional ByVal rho_grc_kgm3 As Double = const_gg_ * const_rho_air, _
    Optional ByVal eps_m As Double = 0.0001, _
    Optional ByVal theta_deg As Double = 90, _
    Optional ByVal hcorr As Integer = 1, _
    Optional ByVal param_out As Integer = 0, _
    Optional ByVal calibr_grav As Double = 1, _
    Optional ByVal calibr_fric As Double = 1)
' расчет градиента давления по одной из корреляций
' d_m - диаметр трубы в которой идет поток
' p_atma - давление в точке расчета
' Ql_rc_m3day - дебит жидкости в рабочих условиях
' Qg_rc_m3day - дебит газа в рабочих условиях
' mu_oil_cP - вязкость нефти в рабочих условиях
' mu_gas_cP - вязкость газа в рабочих условиях
' sigma_oil_gas_Nm - поверхностное натяжение
'              жидкость газ
' rho_lrc_kgm3 - плотность нефти
' rho_grc_kgm3 - плотность газа
' eps_m     - шероховатость
' theta_deg - угол от горизонтали
' hcorr  - тип корреляции
' param_out - параметр для вывода
' calibr_grav - калибровка гравитации
' calibr_fric - калибровка трения
'description_end
    
    Dim PrGrad
    
On Error GoTo er1:
    Select Case hcorr
        Case 0
        
                PrGrad = unf_BegsBrillGradient(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, , , calibr_grav, calibr_fric)
        Case 1
        
                PrGrad = unf_AnsariGradient(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, _
                                p_atma, calibr_grav, calibr_fric)
       Case 2
        
                PrGrad = unf_UnifiedTUFFPGradient(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, _
                                p_atma, calibr_grav, calibr_fric)
       Case 3
        
                PrGrad = unf_GrayModifiedGradient(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, _
                                , , , calibr_grav, calibr_fric)
       Case 4
        
                PrGrad = unf_HagedornandBrawnmodified(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, _
                                p_atma, , , , calibr_grav, calibr_fric)
    End Select
    
    If param_out = 0 Then
        MF_dpdl_atmm = PrGrad
    Else
        MF_dpdl_atmm = PrGrad(param_out)
    End If
    Exit Function
er1:
    MF_dpdl_atmm = -1
    add_log_msg "Error:MF_dpdl_atmm:" & Err.Description
End Function
'description_to_manual      - для автогенерации
' расчет корректирующего фактора (множителя) модели штуцера под замеры
' медленный расчет - калибровка подбирается
Public Function MF_choke_calibr( _
            ByVal feed As String, _
            ByVal d_choke_mm As Double, _
            Optional ByVal p_in_atma As Double = -1, _
            Optional ByVal p_out_atma As Double = -1, _
            Optional ByVal calibr_type As Integer = 0, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal t_choke_C As Double = 20, _
            Optional ByVal param As String = "")
            
' feed         - закодированная строка с параметрами потока.
' d_choke_mm    - диаметр штуцера (эффективный), мм
' p_in_atma     - давление на входе (высокой стороне)
' p_out_atma    - давление на выходе (низкой стороне)
' d_pipe_mm     - диаметр трубы до и после штуцера, мм
' t_choke_C     - температура, С.
' param        - параметры расчета json строка
' результат     - число - калибровочный коэффициент для модели.
'                 штуцера  - множитель на дебит через штуцер
'description_end
' calibr_type - тип калибровки
'             0 - подбор параметра calibr
'             1 - подбор диаметра штуцера
'             2 - подбор газового фактор
'             3 - подбор обводненности
'             4 - подбор дебита жидкости
'             5 - подбор дебита газа свободного
On Error GoTo err1:
    Dim choke As Cchoke
    Dim CoeffA(0 To 2)
    Dim Func As String
    Dim val_min As Double, val_max As Double
    Dim prm As New CSolveParam
    Dim calibr As Double
    'Dim calibr_type As Integer
    Dim cal_type_string As String
    Dim prmd As Dictionary
    Dim show_log As Boolean
    Dim show_array As Boolean
    
    Dim resd As New Dictionary
    Dim res(0 To 1, 0 To 3) As String
    
    calibr = 1
    
    Call set_choke_data(choke, d_choke_mm, feed, d_pipe_mm, calibr)
    
    If choke.fluid.gas_only Then
        MF_choke_calibr = "not implemented yet"
        Exit Function
    End If
    
    ' читаем параметры чтобы настроить правильный вывод
    Set prmd = param_to_dict(param)
    'calibr_type = prmd(prm_choke_calibr_type)
    show_log = prmd(prm_show_log)
    show_array = prmd(prm_show_array)
    
     ' prepare solution function
    Set CoeffA(0) = choke
        CoeffA(1) = p_in_atma
        CoeffA(2) = p_out_atma
        
    Select Case calibr_type
        Case 0
            Func = "calc_choke_dp_error_calibr_grav_atm"
            cal_type_string = "calibr"
            val_min = 0.5
            val_max = 1.5
        Case 1
            Func = "calc_choke_dp_error_diam_atm"
            cal_type_string = "diam_choke"
            val_min = choke.d_choke_m / 2
            val_max = choke.d_up_m
        Case 2
            Func = "calc_choke_dp_error_rp_atm"
            cal_type_string = "rp"
            val_min = 20
            val_max = choke.fluid.rp_m3m3 * 2
            ' Расширить диапазон поиска по газовому фактору может быть опасно
            ' так как возможна неоднозначность решения
            ' а текущий метод поиска работает только если есть одно решение
        Case 3
            Func = "calc_choke_dp_error_fw_atm"
            cal_type_string = "fw"
            val_min = 0
            val_max = 1
            If val_max > 1 Then val_max = 1
        Case 4
            Func = "calc_choke_dp_error_qliq_atm"
            cal_type_string = "qliq"
            val_min = 0
            val_max = choke.fluid.q_liq_sm3day * 1.5
        Case 5
            Func = "calc_choke_dp_error_qgas_atm"
            cal_type_string = "qgas_free"
            val_min = 0
            If choke.fluid.q_gas_free_sm3day > 0 Then
                val_max = choke.fluid.q_gas_free_sm3day * 2
            Else
                val_max = 10000
            End If
       Case Else
            ' solve_equation_bisection without initialasing func crashes excel
            MF_choke_calibr = "not implemented"
            Exit Function
    End Select
   
    prm.y_tolerance = const_pressure_tolerance
    If solve_equation_bisection(Func, val_min, val_max, CoeffA, prm) Then
        resd("x_solution") = prm.x_solution
        resd("y_solution") = prm.y_solution
    Else
        resd("x_solution") = "no solution"
        resd("y_solution") = "no solution"
    End If
    
    resd.Add "cal_type", cal_type_string
    resd.Add "iterations", prm.iterations
    resd.Add "description", prm.msg
    
    res(0, 0) = ConvertToJson(resd): res(1, 0) = "result"
    res(0, 1) = ConvertToJson(choke.get_result_dict): res(1, 1) = "last calc"
    res(0, 2) = choke.fluid.get_json: res(1, 2) = "feed"
    res(0, 3) = choke.log_.get_str_safe(show_log): res(1, 3) = "log"
    
    If show_array Then
        MF_choke_calibr = res
    Else
        MF_choke_calibr = res(0, 0)
    End If
    
    Exit Function
err1:
    On Error Resume Next
    MF_choke_calibr = "Error:MF_choke_calibr:" & Err.Description
End Function
'description_to_manual      - для автогенерации
'  расчет распределения давления и температуры в трубопроводе
'  выводит результат в виде таблицы значений
Public Function MF_pipe_p_atma( _
                 ByVal p_calc_from_atma, _
                 ByVal t_calc_from_C, _
        Optional ByVal construction As String = "", _
        Optional ByVal feed As String = "", _
        Optional ByVal t_model As String = "", _
        Optional ByVal calc_along_coord As Boolean = True, _
        Optional ByVal flow_along_coord As Boolean = True, _
        Optional ByVal flow_correlation As Integer = 0, _
        Optional ByVal calibr_grav As Double = 1, _
        Optional ByVal calibr_fric As Double = 1, _
        Optional ByVal param As String = "", _
        Optional ByVal h_start_m As Double = -10000000000.1, _
        Optional ByVal h_end_m As Double = 10000000000.1)
' p_calc_from_atma  - давление с которого начинается расчет, атм
'           граничное значение для проведения расчета
' t_calc_from_C - температура в точке где задано давление расчета
' feed      - параметры потока флюидов json строка. Используйте
'           функции encode_feed() или encode_feed_list()
' construction - параметры конструкции json строка. Используйте
'           функцию encode_pipe() для генерации
' t_model   - параметры температурной модели json строка.
'           Используйте функцию encode_t_model() для генерации
' calc_along_coord - направление расчета относительно координат.
' flow_along_coord - направление потока относительно координат.
' flow_correl ation - гидравлическая корреляция, номер
' calibr_grav  - калибровка на гравитационную составляющую
'                градиента давления
' calibr_fric  - калибровка на составляющую трения
'                градиента давления
' param     - дополнительные параметры расчета потока
' h_start_m - начало расчета по трубе, м
' h_end_m   - конечная точка расчета по трубе, м
' результат - число - давление на другом конце трубы atma.
'           и распределение параметров по трубе
'description_end
    Dim pipe As New CPipe
    Dim prmd As Dictionary
    Dim res1
    Dim num_value As Integer
    Dim out_points As Integer
    
    Dim show_log As Boolean
    Dim show_array As Boolean
    
    Dim ptq As PTQ_LIST
    Dim ptq_out As PTQ_LIST
    'Dim col_res As New Collection
    
    Dim i As Integer
 
    out_points = 20
On Error GoTo err1:
    ' инициализируем трубу с первым фидом, который всегда есть
    Set pipe = new_pipeline_with_feed(construction, _
                                      encode_feed(), _
                                      t_model, _
                                      calc_along_coord, _
                                      flow_along_coord, _
                                      flow_correlation, _
                                      calibr_grav, _
                                      calibr_fric, _
                                      h_start_m, h_end_m)
    Call read_PTQ(ptq, feed, p_calc_from_atma, t_calc_from_C, pipe.log_)
    Call init_ptq(ptq_out, ptq)
                                      
    ' читаем параметры
    Set prmd = param_to_dict(param)
    
    show_log = prmd(prm_show_log)
    num_value = prmd(prm_num_value)
    show_array = prmd(prm_show_array)
    
    If prmd.Exists(prm_out_points) Then out_points = prmd(prm_out_points)
    
    ' запускаем цикл по вектору потоков, даже если он один все сработает как надо
    For i = 1 To ptq.len
        Call pipe.fluid.init_feed(ptq.feed(i))
        If show_array And ptq.len = 1 Then
                res1 = PT_to_array(pipe.calc_dPipe(ptq.p(i), ptq.T(i), mainCurves))
'                res = pipe.get_result_array(out_points, show_log)
'
'                res(0, 0) = res1(0)
'
'                res(0, 0) = res(0, num_value)
'                res(1, 0) = res(1, num_value)
        Else
            res1 = PT_to_array(pipe.calc_dPipe(ptq.p(i), ptq.T(i), noCurves))  ' noCurves a bit faster - not save crv at all
'            If ptq.len = 1 Then
'                res = res1(0)
'            Else
'                col_res.Add res1(0)
'            End If
        End If
        ptq_out.p(i) = Round(res1(0), const_num_decimal_out)
        ptq_out.T(i) = Round(res1(1), const_num_decimal_out)
        ptq_out.feed(i) = ptq.feed(i)
    Next i
    ' вывод отличается для вектора и для одного расчета
'    If ptq.len = 1 Then
'        MF_pipe_p_atma = res
'    Else
'        If show_array And show_log Then
'            MF_pipe_p_atma = Array(ConvertToJson(col_res), pipe.log_.get_str_safe(show_log))
'        Else
'            MF_pipe_p_atma = ConvertToJson(col_res)
'        End If
'    End If
    
    If show_array Then
        If ptq.len = 1 Then
            MF_pipe_p_atma = pipe.get_result_array(out_points, show_log)
        Else
            MF_pipe_p_atma = Array(convert_to_json_ptq(ptq_out), pipe.log_.get_str_safe(show_log))
        End If
    Else
        If ptq.len = 1 Then
            MF_pipe_p_atma = res1(0)
        Else
            MF_pipe_p_atma = convert_to_json_ptq(ptq_out)
        End If
    End If
    Exit Function
err1:
    MF_pipe_p_atma = "Error:MF_pipe_p_atma :" & Err.Description
   ' add_log_msg "Error:MF_pipe_p_atma:" & Err.Description
End Function
' ==============  функции для расчета штуцера ==========================
' =====================================================================
'description_to_manual      - для автогенерации
' расчет давления в штуцере
Public Function MF_choke_q_sm3day( _
                     ByVal feed As String, _
                     ByVal d_choke_mm As Double, _
                     ByVal p_in_atma As Double, _
                     ByVal p_out_atma As Double, _
            Optional ByVal t_choke_C = 20, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal calibr As Double = 1, _
            Optional ByVal param As String = "")
' feed         - закодированная строка с параметрами потока.
' d_choke_mm   - диаметр штуцера (эффективный)
' p_in_atma    - давление на входе в штуцер, атм.
'                высокая сторона
' p_out_atma   - давление на выходе из штуцера, атм.
'                низкая сторона
' t_choke_C    - температура потока, С.
' d_pipe_mm    - диаметр трубы до и после штуцера
' param        - параметры расчета json строка
' результат    - число - массив значений с параметрами штуцера
'                и давление на штуцере на расчетной стороне.
'description_end
On Error GoTo err1:
    Dim choke As Cchoke
    Dim num_value As Integer, nv As Integer
    Dim show_array As Boolean
    Dim show_log As Boolean
    ' auxiliary variables
    Dim i As Integer
    Dim pres As Double
    Dim q As Double
    Dim prmd As Dictionary
    
    num_value = 3
    Set choke = New Cchoke
    Call set_choke_data(choke, d_choke_mm, feed, d_pipe_mm, calibr)
    q = choke.calc_choke_q_liq_sm3day(p_in_atma, p_out_atma, t_choke_C)
    choke.fluid.q_liq_sm3day = q
'    feed_out = choke.fluid.feed
    ' читаем параметры чтобы настроить правильный вывод
    Set prmd = param_to_dict(param)
    show_array = prmd(prm_show_array)
    If prmd.Exists(prm_num_value) Then
        nv = prmd(prm_num_value)
        If nv > 0 And nv < 10 Then num_value = nv
    End If
    If show_array Then
        show_log = prmd(prm_show_log)
        MF_choke_q_sm3day = choke.get_result_array(num_value, show_log)
    Else
        MF_choke_q_sm3day = q
    End If
    Exit Function
err1:
    MF_choke_q_sm3day = "error:MF_choke_q_sm3day:" & Err.Description
End Function
'description_to_manual      - для автогенерации
' расчет давления в штуцере (дросселе)
Public Function MF_choke_p_atma( _
                     ByVal d_choke_mm As Double, _
                     ByVal feed As String, _
                     ByVal p_calc_from_atma, _
            Optional ByVal t_choke_C = 20, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal calc_along_flow As Boolean = True, _
            Optional ByVal calibr As Double = 1, _
            Optional ByVal param As String = "")
' d_choke_mm      - диаметр штуцера (эффективный)
' feed      - параметры потока флюидов json строка. Используйте
'           функции encode_feed() или encode_feed_list()
' p_calc_from_atma - давление с которого начинается расчет, атм
'                  граничное значение для проведения расчета
'                  либо давление на входе, либо на выходе.
'                   может быть списком.
' t_choke_C       - температура потока, С.
'                   может быть списком.
' d_pipe_mm       - диаметр трубы до и после штуцера
' calc_along_flow - флаг направления расчета относительно потока
' param           - параметры расчета json строка
' результат       - число или массив значений с параметрами штуцера
'                   и давление на штуцере на расчетной стороне.
'description_end
'Const nv = 9  ' output array dimension (number of columns)
On Error GoTo err1:
    Dim choke As Cchoke
    Dim num_value As Integer, nv As Integer
    Dim p_out As Double
    Dim show_array As Boolean
    Dim show_log As Boolean
    Dim prmd As Dictionary
    
    Dim ptq As PTQ_LIST
    Dim ptq_out As PTQ_LIST
    Dim i As Integer
    
    ' один раз заводим объект, даже если считаем вектор
    ' потом в логе должна сохраниться вся история расчетов
    Set choke = New Cchoke
    
    Call read_PTQ(ptq, feed, p_calc_from_atma, t_choke_C, choke.log_)
    Call init_ptq(ptq_out, ptq)
    
    ' цикл расчетов - срабатывает если пришел feed вектор, иначе считает только один раз
    For i = 1 To ptq.len
        Call set_choke_data(choke, d_choke_mm, ptq.feed(i), d_pipe_mm, calibr)
        ' запускаем расчет в зависимости от опции направления расчета
        If calc_along_flow Then
            Call choke.calc_choke_p_lin(set_PT(ptq.p(i), ptq.T(i)))
            p_out = choke.p_out_atma
            num_value = 2
        Else
            Call choke.calc_choke_p_buf(set_PT(ptq.p(i), ptq.T(i)))
            p_out = choke.p_in_atma
            num_value = 1
        End If
      '  col_res.Add p_out
        
        ptq_out.p(i) = Round(p_out, const_num_decimal_out)
        ptq_out.T(i) = Round(ptq.T(i), const_num_decimal_out)
        ptq_out.feed(i) = ptq.feed(i)
        
    Next i
    ' читаем параметры чтобы настроить правильный вывод
    Set prmd = param_to_dict(param)
    show_array = prmd(prm_show_array)
    If prmd.Exists(prm_num_value) Then
        nv = prmd(prm_num_value)
        If nv > 0 And nv < 10 Then num_value = nv
    End If
    ' формируем вывод в зависимости от значений параметров
    If show_array Then
        show_log = prmd(prm_show_log)
        If ptq.len = 1 Then
            MF_choke_p_atma = choke.get_result_array(num_value, show_log)
        Else
            MF_choke_p_atma = Array(convert_to_json_ptq(ptq_out), choke.log_.get_str_safe(show_log))
        End If
    Else
        If ptq.len = 1 Then
            MF_choke_p_atma = p_out
        Else
            MF_choke_p_atma = convert_to_json_ptq(ptq_out)
        End If
    End If
    Exit Function
err1:
    MF_choke_p_atma = "error:MF_p_choke_atma:" & Err.Description
End Function
'description_to_manual      - для автогенерации
' расчет корректирующего фактора (множителя) модели штуцера под замеры
' быстрый расчет - калибровка вычисляется
Public Function MF_choke_calibr_fast( _
            ByVal feed As String, _
            ByVal d_choke_mm As Double, _
            Optional ByVal p_in_atma As Double = -1, _
            Optional ByVal p_out_atma As Double = -1, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal t_choke_C As Double = 20, _
            Optional ByVal param As String = "")
' feed         - закодированная строка с параметрами потока.
' d_choke_mm    - диаметр штуцера (эффективный), мм
' p_in_atma     - давление на входе (высокой стороне)
' p_out_atma    - давление на выходе (низкой стороне)
' d_pipe_mm     - диаметр трубы до и после штуцера, мм
' t_choke_C     - температура, С.
' param        - параметры расчета json строка
' результат     - число - калибровочный коэффициент для модели.
'                 штуцера  - множитель на дебит через штуцер
'description_end
On Error GoTo err1:
    Dim choke As New Cchoke
    Dim num_value As Integer, nv As Integer
    Dim arr_out
    Dim out As String, out_desc As String
    Dim show_log As Boolean
    Dim show_array As Boolean
    Dim prmd As Dictionary
    Dim res
    
    Call set_choke_data(choke, d_choke_mm, feed, d_pipe_mm, 1)
    
    If choke.fluid.gas_only Then
        MF_choke_calibr_fast = "not implemented yet"
        Exit Function
    End If
    
    If p_in_atma > p_out_atma And p_out_atma >= 1 Then
        Call choke.calc_choke_calibration(p_in_atma, p_out_atma, t_choke_C)
        out = choke.calibr_fr
        out_desc = "calibr_fr"
    End If
    
    
    ' читаем параметры чтобы настроить правильный вывод
    Set prmd = param_to_dict(param)
    show_array = prmd(prm_show_array)
    show_log = prmd(prm_show_log)
    If prmd.Exists(prm_num_value) Then
        nv = prmd(prm_num_value)
        If nv > 0 And nv < 5 Then num_value = nv
    End If
    If show_array Then
        arr_out = Array(Array(out, p_in_atma, p_out_atma, t_choke_C, choke.calibr_fr, choke.log_.get_str_safe(show_log)), _
                        Array(out_desc, "p_intake_atma", "p_out_atma", "t_choke_C", "calibr_fr", "log")) ' на выходе выдаем массив
        res = array_join(arr_out)
        If num_value > 0 Then
            res(1, 1) = res(1, num_value + 1)
            res(2, 1) = res(2, num_value + 1)
        End If
        MF_choke_calibr_fast = res
        
    Else
        MF_choke_calibr_fast = out
    End If
    
    Exit Function
err1:
    choke.add_log_msg "Error:MF_choke_calibr_fast:" & Err.Description
    arr_out = Array(Array(-1, "", "", "", "", choke.log_.get_str_safe), _
                    Array(out_desc, "p_intake_atma", "p_out_atma", "t_choke_C", "calibr_fr", "log")) ' на выходе выдаем массив
    MF_choke_calibr_fast = array_join(arr_out)
End Function
' инициализация штуцера по исходным данным
' чтобы не повторять код несколько раз для разных функций работы со штуцером
Private Sub set_choke_data( _
                           choke As Cchoke, _
                     ByVal d_choke_mm As Double, _
                     ByVal feed As String, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal calibr As Double = 1)
' d_choke_mm      - диаметр штуцера (эффективный)
' feed            - закодированная строка с параметрами потока.
' p_calc_from_atma - давление с которого начинается расчет, атм
'                  граничное значение для проведения расчета
'                  либо давление на входе, либо на выходе
' t_choke_C       - температура потока, С.
' d_pipe_mm       - диаметр трубы до и после штуцера
' param           - параметры расчета json строка
' результат       - число - массив значений с параметрами штуцера
'                   и давление на штуцере на расчетной стороне.
    'Dim choke As New Cchoke
    
    With choke
        Call .fluid.init_feed(feed)
        .d_down_m = d_pipe_mm / 1000
        .d_up_m = d_pipe_mm / 1000
        .d_choke_m = d_choke_mm / 1000
        .calibr_fr = calibr
        
    End With
    
End Sub
'description_to_manual      - для автогенерации
' расчет кривой - характеристики штуцера
' pq - давление дебит
Public Function MF_choke_pq_crv( _
                     ByVal d_choke_mm As Double, _
                     ByVal feed As String, _
                     ByVal p_calc_from_atma As Double, _
            Optional ByVal t_choke_C As Double = 20, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal calc_along_flow As Boolean = True, _
            Optional ByVal calibr As Double = 1, _
            Optional ByVal param As String = "")
' d_choke_mm      - диаметр штуцера (эффективный)
' feed            - закодированная строка с параметрами потока.
' p_calc_from_atma - давление с которого начинается расчет, атм
'                  граничное значение для проведения расчета
'                  либо давление на входе, либо на выходе
' t_choke_C       - температура потока, С.
' d_pipe_mm       - диаметр трубы до и после штуцера
' calc_along_flow - флаг направления расчета относительно потока
' param           - параметры расчета json строка
' результат       - число или массив значений с параметрами штуцера
'                   и давление на штуцере на расчетной стороне.
'description_end
'Const nv = 9  ' output array dimension (number of columns)
On Error GoTo err1:
    Dim i As Integer
    Dim num As Integer
    Dim crv_choke As New CInterpolation
    Dim p_i As Double
    Dim q_i As Double
    Dim p_cr As Double
    
    Dim choke As New Cchoke
    
    Dim p_max As Double
    Dim show_log As Boolean
    Dim prmd As Dictionary
    
    Set prmd = param_to_dict(param)
    num = prmd(prm_num_value) - 1
    If num <= 1 Then
        num = 19
    End If
    
    Call set_choke_data(choke, d_choke_mm, feed, d_pipe_mm, calibr)
    ' расчет штуцера всегда будет как зависимость дебита от давления -
    ' это надо для того, чтобы всегда было однозначное значение итоговой кривой
    
    ' запускаем расчет в зависимости от опции направления расчета
    If calc_along_flow Then
        p_i = 1
        q_i = choke.calc_choke_q_liq_sm3day(p_calc_from_atma, p_i, t_choke_C)
        crv_choke.AddPoint p_i, q_i
       
        p_cr = choke.p_ratio_crit * p_calc_from_atma
        For i = 0 To num - 1
            p_i = p_cr + (p_calc_from_atma - p_cr) / (num - 1) * i
            q_i = choke.calc_choke_q_liq_sm3day(p_calc_from_atma, p_i, t_choke_C)
            crv_choke.AddPoint p_i, q_i
            
        Next i
        crv_choke.xName = "p_out_atma"
        crv_choke.yName = "q_liq_sm3day"
    Else
        p_max = p_calc_from_atma * 2
        For i = 0 To num
            p_i = p_calc_from_atma + (p_max - p_calc_from_atma) / num * i  '+ 0.06 * Exp(i * 0.25) * i
            If p_i > p_max Or i = num Then p_i = p_max
            q_i = choke.calc_choke_q_liq_sm3day(p_i, p_calc_from_atma, t_choke_C)
            crv_choke.AddPoint p_i, q_i
            
        Next i
        crv_choke.xName = "p_in_atma"
        crv_choke.yName = "q_liq_sm3day"
    End If
    MF_choke_pq_crv = ConvertToJson(crv_choke.getDict)
    Exit Function
err1:
    MF_choke_pq_crv = "error:MF_choke_pq_crv:" & Err.Description
End Function
'==========================================================================
' перспективные варианты расчетных функций, которые пока отключены
'==========================================================================
'' расчет штуцера (дросселя) с выводом всех параметров расчета
'' тип расчета зависит от исходных данных
'Public Function MF_choke_calc( _
'                     ByVal d_choke_mm As Double, _
'                     ByVal feed As String, _
'            Optional ByVal p_in_atma As Double = -1, _
'            Optional ByVal p_out_atma As Double = -1, _
'            Optional ByVal t_choke_C As Double = 20, _
'            Optional ByVal d_pipe_mm As Double = 70, _
'            Optional ByVal calibr As Double = 1, _
'            Optional ByVal param As String = "")
'' d_choke_mm      - диаметр штуцера (эффективный)
'' feed            - закодированная строка с параметрами потока.
'' p_in_atma       - давление на входе в штуцер, атм
''                   если задано, то используется в расчете
'' p_out_atma      - давление на выходе из штуцера, атм
''                   если задано, то используется в расчете
'' t_choke_C       - температура потока, С.
'' d_pipe_mm       - диаметр трубы до и после штуцера
'' calibr          - базовая калибровка штуцера (на расход)
'' param           - параметры расчета json строка
'' результат       - число или массив значений с параметрами штуцера
''                   и давление на штуцере на расчетной стороне.
'
'
'Const nv = 3  ' output array dimension (number of columns)
'
'On Error GoTo err1:
'    Dim choke As Cchoke
'    Dim resd As Dictionary
'    Dim res(1 To 2, 1 To nv) As String
'    Dim q As Double
'    Dim show_array As Boolean
'    Dim show_log As Boolean
'    Dim prmd As Dictionary
'
'    Call set_choke_data(choke, d_choke_mm, feed, d_pipe_mm, calibr)
'
'    Set prmd = param_to_dict(param)
'    show_log = prmd(prm_show_log)
'    show_array = prmd(prm_show_array)
'
'    ' запускаем расчет в зависимости от опции направления расчета
'    If p_in_atma > 0 And p_out_atma < 0 Then
'        Call choke.calc_choke_p_lin(set_PT(p_in_atma, t_choke_C))
'    ElseIf p_in_atma < 0 And p_out_atma > 0 Then
'        Call choke.calc_choke_p_buf(set_PT(p_out_atma, t_choke_C))
'    ElseIf p_in_atma > 0 And p_out_atma > 0 Then
'        q = choke.calc_choke_q_liq_sm3day(p_in_atma, p_out_atma, t_choke_C)
'        choke.fluid.q_liq_sm3day = q
'        choke.add_log_msg "info: rate calculation done, check feed for results"
'    End If
'
'    res(1, 1) = ConvertToJson(choke.get_result_dict()): res(2, 1) = "results"
'    res(1, 2) = choke.fluid.get_json: res(2, 2) = "feed"
'    res(1, 3) = choke.log_.get_str_safe(show_log): res(2, 3) = "log"
'
'
'    If show_array Then
'        MF_choke_calc = res
'    Else
'        MF_choke_calc = res(1, 1)
'    End If
'
'
'    Exit Function
'err1:
'    MF_choke_calc = "error:MF_choke_calc:" & Err.Description
'End Function
'
''  расчет распределения давления и температуры в трубопроводе
''  выводит полный набор результатов в виде массива json параметров
'Public Function MF_pipe_calc( _
'                 ByVal p_calc_from_atma As Double, _
'                 ByVal t_calc_from_C As Double, _
'        Optional ByVal construction As String = "", _
'        Optional ByVal feed As String = "", _
'        Optional ByVal t_model As String = "", _
'        Optional ByVal calc_along_coord As Boolean = True, _
'        Optional ByVal flow_along_coord As Boolean = True, _
'        Optional ByVal flow_correlation As Integer = 0, _
'        Optional ByVal calibr_grav As Double = 1, _
'        Optional ByVal calibr_fric As Double = 1, _
'        Optional ByVal param As String = "")
'' p_calc_from_atma  - давление с которого начинается расчет, атм
''           граничное значение для проведения расчета
'' t_calc_from_C - температура в точке где задано давление расчета
'' feed      - параметры потока флюидов json строка. Используйте
''           функцию encode_feed() для генерации
'' construction - параметры конструкции json строка. Используйте
''           функцию encode_pipe() для генерации
'' t_model   - параметры температурной модели json строка.
''           Используйте функцию encode_feed() для генерации
'' calc_along_coord - направление расчета относительно координат.
'' flow_along_coord - направление потока относительно координат.
'' flow_correl ation - гидравлическая корреляция, номер
'' calibr_grav  - калибровка на гравитационную составляющую
''                градиента давления
'' calibr_fric  - калибровка на составляющую трения
''                градиента давления
'' param     - дополнительные параметры расчета потока
'' результат - число - давление на другом конце трубы atma.
''           и распределение параметров по трубе
'
'    Dim pipe As New CPipe
'    Dim num_value As Integer
'    Dim out_points As Integer
'    Dim out_curves As CALC_RESULTS
'    Dim prmd As Dictionary
'
'    Dim show_log As Boolean
'    Dim show_all As Boolean
'
'    out_points = 20
'Const nv = 4  ' output array dimension (number of columns)
'
'    Dim res(0 To 1, 0 To nv) As String
'
'On Error GoTo err1:
'
'    Set pipe = new_pipeline_with_feed(construction, _
'                                      feed, _
'                                      t_model, _
'                                      calc_along_coord, _
'                                      flow_along_coord, _
'                                      flow_correlation, _
'                                      calibr_grav, _
'                                      calibr_fric)
'
'    Set prmd = param_to_dict(param)
'
'    show_log = prmd(prm_show_log)
'    num_value = prmd(prm_num_value)
'    show_all = prmd(prm_show_all)
'
'    If show_all Then
'        out_curves = allCurves
'    Else
'        out_curves = mainCurves
'    End If
'    If prmd.Exists(prm_out_points) Then out_points = prmd(prm_out_points)
'
'    ' calc pressure distribution
'    Call PT_to_array(pipe.calc_dPipe(p_calc_from_atma, t_calc_from_C, out_curves))
'
'    res(0, 0) = ConvertToJson(pipe.get_result_dict(out_points))
'    res(1, 0) = "results"
'
'    res(0, 1) = ConvertToJson(pipe.get_result_dict_crv_main(out_points))
'    res(1, 1) = "curves"
'
'    res(0, 2) = ConvertToJson(pipe.get_result_dict_crv_add(out_points))
'    res(1, 2) = "curves add"
'
'    res(0, 3) = pipe.log_.get_str_safe(show_log)
'    res(1, 3) = "log"
'
'    MF_pipe_calc = res
'
'    Exit Function
'err1:
'    MF_pipe_calc = "error"
'    add_log_msg "Error:MF_pipe_calc:" & Err.Description
'End Function
'
'

