'=======================================================================================
'Unifloc 7.26  coronav2                                     khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2020
'
'=======================================================================================
'функции для проведения расчетов из интерфейса Excel
'многофазный поток в трубах и элементах инфраструктуры
Option Explicit
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет натуральной сепарации газа на приеме насоса
Public Function MF_ksep_natural_d( _
             ByVal q_liq_sm3day As Double, _
             ByVal fw_perc As Double, _
             ByVal p_intake_atma As Double, _
    Optional ByVal t_intake_C As Double = 50, _
    Optional ByVal d_intake_mm As Double = 90, _
    Optional ByVal d_cas_mm As Double = 120, _
    Optional ByVal str_PVT As String = PVT_DEFAULT)
' q_liq_sm3day   - дебит жидкости в поверхностных условиях
' fw_perc       - обводненность
' p_intake_atma - давление сепарации
' t_intake_C    - температура сепарации
' d_intake_mm   - диаметр приемной сетки
' d_cas_mm      - диаметр эксплуатационной колонны
' str_PVT       - закодированная строка с параметрами PVT.
'                 если задана - перекрывает другие значения
' результат     - число - естественная сепарация
'description_end
On Error GoTo err1:
    Dim fluid As New CPVT
    Call fluid.init_feed(str_PVT)
    fluid.q_liq_sm3day = q_liq_sm3day
    fluid.fw_perc = fw_perc
    Call fluid.calc_PVT(p_intake_atma, t_intake_C)
    With fluid
        MF_ksep_natural_d = unf_natural_separation(d_intake_mm / 1000, d_cas_mm / 1000, .q_liq_sm3day, .q_gas_sm3day, .bo_m3m3, .bg_m3m3, _
                                                    .sigma_oil_gas_Nm, .sigma_wat_gas_Nm, .rho_oil_sckgm3, .rho_gas_sckgm3, .fw_perc)
    End With
    Exit Function
err1:
    MF_ksep_natural_d = -1
    addLogMsg "Error:MF_ksep_natural_d:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет общей сепарации на приеме насоса
Public Function MF_ksep_total_d( _
        ByVal SepNat As Double, _
        ByVal SepGasSep As Double)
' SepNat        - естественная сепарация
' SepGasSep     - искусственная сепарация (газосепаратор)
    MF_ksep_total_d = SepNat + (1 - SepNat) * SepGasSep
End Function
'description_end
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
'расчет градиента давления
'с использованием многофазных корреляций
Public Function MF_dpdl_atmm(ByVal d_m As Double, _
             ByVal p_atma As Double, _
             ByVal Ql_rc_m3day As Double, _
             ByVal Qg_rc_m3day As Double, _
    Optional ByVal mu_oil_cP As Double = const_mu_o, _
    Optional ByVal mu_gas_cP As Double = const_mu_g, _
    Optional ByVal sigma_oil_gas_Nm As Double = const_sigma_oil_Nm, _
    Optional ByVal rho_lrc_kgm3 As Double = const_go_ * 1000, _
    Optional ByVal rho_grc_kgm3 As Double = const_gg_ * const_rho_air, _
    Optional ByVal eps_m As Double = 0.0001, _
    Optional ByVal theta_deg As Double = 90, _
    Optional ByVal hcorr As Integer = 1, _
    Optional ByVal param_out As Integer = 0, _
    Optional ByVal c_calibr_grav As Double = 1, _
    Optional ByVal c_calibr_fric As Double = 1)
' расчет градиента давления по одной из корреляций
' d_m - диаметр трубы в которой идет поток
' p_atma - давление в точке расчета
' Ql_rc_m3day - дебит жидкости в рабочих условиях
' Qg_rc_m3day - дебит газа в рабочих условиях
' mu_oil_cP - вязкость нефти в рабочих условиях
' mu_gas_cP - вязкость газа в рабочих условиях
' sigma_oil_gas_Nm - поверхностное натяжение
'              жидкость газ
' rho_lrc_kgm3 - плотность нефти
' rho_grc_kgm3 - плотность газа
' eps_m     - шероховатость
' theta_deg - угол от горизонтали
' hcorr  - тип корреляции
' param_out - параметр для вывода
' c_calibr_grav - калибровка гравитации
' c_calibr_fric - калибровка трения
'description_end
    
    Dim PrGrad
    
On Error GoTo er1:
    Select Case hcorr
        Case 0
        
                PrGrad = unf_BegsBrillGradient(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, , , c_calibr_grav, c_calibr_fric)
        Case 1
        
                PrGrad = unf_AnsariGradient(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, _
                                p_atma, c_calibr_grav, c_calibr_fric)
       Case 2
        
                PrGrad = unf_UnifiedTUFFPGradient(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, _
                                p_atma, c_calibr_grav, c_calibr_fric)
       Case 3
        
                PrGrad = unf_GrayModifiedGradient(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, _
                                , , , c_calibr_grav, c_calibr_fric)
       Case 4
        
                PrGrad = unf_HagedornandBrawnmodified(d_m, theta_deg, eps_m, _
                                Ql_rc_m3day, Qg_rc_m3day, _
                                mu_oil_cP, mu_gas_cP, _
                                sigma_oil_gas_Nm, _
                                rho_lrc_kgm3, _
                                rho_grc_kgm3, _
                                p_atma, , , , c_calibr_grav, c_calibr_fric)
    End Select
    
    If param_out = 0 Then
        MF_dpdl_atmm = PrGrad
    Else
        MF_dpdl_atmm = PrGrad(param_out)
    End If
    Exit Function
er1:
    MF_dpdl_atmm = -1
    addLogMsg "Error:MF_dpdl_atmm:" & Err.Description
End Function
''description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
''  подбор параметров потока через трубу при известном
''  перепаде давления с использованием многофазных корреляций
'Public Function MF_calibr_pipeline( _
'                 ByVal p_calc_from_atma As Double, _
'                 ByVal p_calc_to_atma As Double, _
'             ByVal t_calc_from_C As Double, _
'             ByVal t_val, _
'             ByVal h_list_m As Variant, _
'             ByVal diam_list_mm As Variant, _
'             ByVal q_liq_sm3day As Double, _
'             ByVal fw_perc As Double, _
'    Optional ByVal q_gas_sm3day As Double = 0, _
'    Optional ByVal str_PVT As String = PVT_DEFAULT, _
'    Optional ByVal calc_flow_direction As Integer = 11, _
'    Optional ByVal hydr_corr As H_CORRELATION = 0, _
'    Optional ByVal temp_method As TEMP_CALC_METHOD = StartEndTemp, _
'    Optional ByVal c_calibr = 1, _
'    Optional ByVal roughness_m As Double = 0.0001, _
'    Optional ByVal out_curves As Integer = 1, _
'    Optional ByVal out_curves_num_points As Integer = 20, _
'    Optional ByVal calibr_type As Integer = 0)
'
''p_calc_from_atma - давление начальное, атм
''                   граничное значение для проведения расчета
''p_calc_to_atma   - давление конечное, атм
''                   граничное значение для проведения расчета
'' t_calc_from_C - температура в точке где задано давление расчета
'' t_val     - температура вдоль трубопровода
''           если число то температура на другом конце трубы
''           если range или таблица [0..N,0..1] то температура
''           окружающей среды по вертикальной глубине, С
'' h_list_m  - траектория трубопровода, если число то измеренная
''           длина, range или таблица [0..N,0..1] то траектория
'' diam_list_mm  - внутрнний диаметр трубы, если число то задается
''           постоянный диаметр, если range или таблица [0..N,0..1]
''           то задается зависимость диаметра от измеренной длины
'' q_liq_sm3day - дебит жидкости в поверхностных условиях, нм3/сут
''           если q_liq_sm3day =0 и q_gas_sm3day > 0
''           тогда считается барботаж газа через жидкость
'' fw_perc   - обводненность объемная в стандартных условиях
'' q_gas_sm3day  - свободный газ нм3/сут. дополнительный к PVT потоку.
''           учитывается для барботажа или режима потока газа
''           в других случаях добавляется к общему потоку меняя rp
'' str_PVT   - закодированная строка с параметрами PVT.
''           если задана - перекрывает другие значения
''           если задан флаг gas_only = 1 то жидкость не учитывается
'' calc_flow_direction - направление расчета и потока относительно
''           координат.  11 расчет и поток по координате
''                       10 расчет по коордиате, поток против
''                       00 расчет и поток против координате
''                       01 расчет против координат, поток по
'' hydr_corr   - гидравлическая корреляция, H_CORRELATION
''           BeggsBrill = 0,
''           Ansari = 1,
''           Unified = 2,
''           Gray = 3,
''           HagedornBrown = 4,
''           SakharovMokhov = 5
'' temp_method  - метод расчета температуры
''           0 - линейное распределение по длине
''           1 - температура равна температуре окружающей среды
''           2 - расчет температуры с учетом эмиссии в окр. среду
'' c_calibr  - поправка на гравитационную составляющую
''           перепада давления, если дать ссылку на две ячейки,
''           то вторая будет поправка на трение.
'' roughness_m - шероховатость трубы
'' out_curves - флаг вывод значений между концами трубы
''           1 основные, 2 все значения.
''           вывод может замедлять расчет (не сильно)
'' out_curves_num_points - количество точек для вывода значений
''           между концами трубы.
'' calibr_type - тип калибровки
''          0 - подбор параметра c_calibr_grav
''          1 - подбор параметра c_calibr_fric
''          2 - подбор газового фактор
''          3 - подбор обводненности
'' результат   - массив с подобранным парамером и подробностями.
''description_end
'
'    Dim pipe As New CPipe
'    Dim res(), res1()
'    Dim CoeffA(0 To 2)
'    Dim Func As String
'    Dim cal_type_string As String
'    Dim val_min As Double, val_max As Double
'    Dim out, out_desc
'    Dim prm As New CSolveParam
'
'On Error GoTo err1:
'
'    Set pipe = new_pipeline_with_stream(q_liq_sm3day, _
'                                        fw_perc, _
'                                        h_list_m, _
'                                        t_calc_from_C, _
'                                        calc_flow_direction, _
'                                        str_PVT, _
'                                        diam_list_mm, _
'                                        hydr_corr, _
'                                        t_val, _
'                                        temp_method, _
'                                        c_calibr, _
'                                        roughness_m, _
'                                        q_gas_sm3day)
'
'    ' prepare solution function
'    Set CoeffA(0) = pipe
'        CoeffA(1) = p_calc_from_atma
'        CoeffA(2) = p_calc_to_atma
'
'    Select Case calibr_type
'        Case 0
'            Func = "calc_pipe_dp_error_calibr_grav_atm"
'            cal_type_string = "calibr_grav"
'            val_min = 0.5
'            val_max = 1.5
'        Case 1
'            Func = "calc_pipe_dp_error_calibr_fric_atm"
'            cal_type_string = "calibr_fric"
'            val_min = 0.1
'            val_max = 1
'        Case 2
'            Func = "calc_pipe_dp_error_rp_atm"
'            cal_type_string = "rp"
'            val_min = 20 'pipe.fluid.rp_m3m3 * 0.5
'            val_max = pipe.fluid.rp_m3m3 * 2
'            ' Расширить диапазон поиска по газовому фактору может быть опасно
'            ' так как возможна неоднозначность решения
'            ' а текущий метод поиска работает только если есть одно решение
'        Case 3
'            Func = "calc_pipe_dp_error_fw_atm"
'            cal_type_string = "fw"
'            val_min = 0
'            val_max = 1
'            If val_max > 1 Then val_max = 1
'        Case 4
'            Func = "calc_pipe_dp_error_qliq_atm"
'            cal_type_string = "qliq"
'            val_min = 0
'            val_max = pipe.fluid.q_liq_sm3day * 1.5
'        Case 5
'            Func = "calc_pipe_dp_error_qgas_atm"
'            cal_type_string = "qgas"
'            val_min = 0
'            If q_gas_sm3day > 0 Then
'                val_max = q_gas_sm3day * 2
'            Else
'                val_max = 10000
'            End If
'        Case Else
'            ' solve_equation_bisection without initialasing func crashes excel
'            MF_calibr_pipeline = "not implemented"
'            Exit Function
'    End Select
'
'    prm.y_tolerance = const_pressure_tolerance
'    If solve_equation_bisection(Func, val_min, val_max, CoeffA, prm) Then
'
'        out = Array(prm.x_solution, _
'                    cal_type_string, _
'                    prm.y_solution, _
'                    prm.iterations, _
'                    prm.msg)
'
'    Else
'        out = Array("no solution", _
'                    cal_type_string, _
'                    prm.y_solution, _
'                    prm.iterations, _
'                    prm.msg)
'    End If
'
'    out_desc = Array("solution", _
'                     "cal_type", _
'                     "y_solution", _
'                     "iterations", _
'                     "description")
'
'    MF_calibr_pipeline = array_join(Array(out, out_desc))
'
'    Exit Function
'err1:
'    MF_calibr_pipeline = Array(-1, "error")
'    addLogMsg "Error:MF_calibr_pipeline:" & Err.Description
'
'End Function
''description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
''  подбор параметров потока через трубу при известном
''  перепаде давления с использованием многофазных корреляций
'' (лучше не использовать - используйте MF_calibr_pipeline)
'Public Function MF_calibr_pipe( _
'        ByVal p_calc_from_atma As Double, _
'        ByVal p_calc_to_atma As Double, _
'        ByVal t_calc_from_C As Double, _
'        ByVal t_calc_to_C As Double, _
'        ByVal length_m As Double, _
'        ByVal theta_deg As Double, _
'        ByVal d_mm As Double, _
'        ByVal q_liq_sm3day As Double, _
'        ByVal fw_perc As Double, _
'        Optional ByVal q_gas_sm3day As Double = 0, _
'        Optional ByVal str_PVT As String = PVT_DEFAULT, _
'        Optional ByVal calc_flow_direction As Integer = 11, _
'        Optional ByVal hydr_corr As H_CORRELATION = 0, _
'        Optional ByVal c_calibr = 1, _
'        Optional ByVal roughness_m As Double = 0.0001, _
'        Optional ByVal calibr_type As Integer = 0)
''p_calc_from_atma - давление с которого начинается расчет, атм
''                   граничное значение для проведения расчета
'' t_calc_from_C   - температура в точке где задано давление, С
'' t_calc_to_C     - температура на другом конце трубы
''                 по умолчанию температура вдоль трубы постоянна
''                   если задано то меняется линейно по трубе
'' length_m        - Длина трубы, измеренная, м
'' theta_deg       - угол направления потока к горизонтали
'' d_mm            - внутренний диаметр трубы
'' q_liq_sm3day     - дебит жидкости в поверхностных условиях
''              если q_liq_sm3day =0 и q_gas_sm3day > 0
''              тогда считается барботаж газа через жидкость
'' fw_perc         - обводненность
'' q_gas_sm3day    - свободный газ. дополнительный к PVT потоку.
'' str_PVT         - закодированная строка с параметрами PVT.
''                   если задана - перекрывает другие значения
''        если задан флаг gas_only = 1 то жидкость не учитывается
'' calc_flow_direction - направление расчета и потока
''                   относительно координат
''                   если = 11 расчет и поток по координате
''                   если = 10 расчет по, поток против координат
''                   если = 00 расчет и поток против координате
''                   если = 01 расчет против, поток по координате
'' hydr_corr       - гидравлическая корреляция, H_CORRELATION
''                    BeggsBrill = 0
''                    Ansari = 1
''                    Unified = 2
''                    Gray = 3
''                    HagedornBrown = 4
''                    SakharovMokhov = 5
'' c_calibr        - поправка на гравитационную составляющую
''           перепада давления, если дать ссылку на две ячейки,
''           то вторая будет поправка на трение
'' roughness_m     - шероховатость трубы
'' out_curves      - флаг вывод значений между концами трубы
''                   0 минимум, 1 основные, 2 все значения.
''                   вывод может замедлять расчет (не сильно)
'' out_curves_num_points - количество точек для вывода значений
''                   между концами трубы.
'' результат       - число - давление на другом конце трубы atma.
''                  или массив - первая строка значения
''                               вторая строка - подписи
''description_end
'
'
'    Dim pipe As New CPipe
'    Dim prm As New CSolveParam
'    Dim CoeffA(0 To 2)
'    Dim Func As String
'    Dim cal_type_string As String
'    Dim val_min As Double, val_max As Double
'    Dim out, out_desc
'
'On Error GoTo err1:
'    ' check pipe length
'    length_m = Abs(length_m)                ' length must be positive
'    If length_m = 0 Then
'        MF_calibr_pipe = Array(p_calc_from_atma, t_calc_from_C)
'        Exit Function
'    End If
'    ' initialize pipe
'    Set pipe = new_pipe_with_stream(q_liq_sm3day, fw_perc, length_m, calc_flow_direction, _
'                                    str_PVT, theta_deg, d_mm, hydr_corr, _
'                                    t_calc_from_C, t_calc_to_C, _
'                                    c_calibr, _
'                                    roughness_m, q_gas_sm3day)
'
'    ' prepare solution function
'    Set CoeffA(0) = pipe
'        CoeffA(1) = p_calc_from_atma
'        CoeffA(2) = p_calc_to_atma
'
'    Select Case calibr_type
'        Case 0
'            Func = "calc_pipe_dp_error_calibr_grav_atm"
'            cal_type_string = "calibr_grav"
'            val_min = 0.5
'            val_max = 1.5
'        Case 1
'            Func = "calc_pipe_dp_error_calibr_fric_atm"
'            cal_type_string = "calibr_fric"
'            val_min = 0.5
'            val_max = 1.5
'        Case 2
'            Func = "calc_pipe_dp_error_rp_atm"
'            cal_type_string = "rp"
'            val_min = 20 'pipe.fluid.rp_m3m3 * 0.5
'            val_max = pipe.fluid.rp_m3m3 * 2
'            ' Расширить диапазон поиска по газовому фактору может быть опасно
'            ' так как возможна неоднозначность решения
'            ' а текущий метод поиска работает только если есть одно решение
'        Case 3
'            Func = "calc_pipe_dp_error_fw_atm"
'            cal_type_string = "fw"
'            val_min = 0
'            val_max = 1
'            If val_max > 1 Then val_max = 1
'        Case 4
'            Func = "calc_pipe_dp_error_qliq_atm"
'            cal_type_string = "qliq"
'            val_min = 1
'            val_max = pipe.fluid.q_liq_sm3day * 1.5
'        Case 5
'            Func = "calc_pipe_dp_error_qgas_atm"
'            cal_type_string = "qgas"
'            val_min = 0
'            If q_gas_sm3day > 0 Then
'                val_max = q_gas_sm3day * 2
'            Else
'                val_max = 10000
'            End If
'        Case Else
'            ' solve_equation_bisection without initialasing func crashes excel
'            MF_calibr_pipe = "not implemented"
'            Exit Function
'    End Select
'
'    prm.y_tolerance = const_pressure_tolerance
'    If solve_equation_bisection(Func, val_min, val_max, CoeffA, prm) Then
'
'        out = Array(prm.x_solution, _
'                    cal_type_string, _
'                    prm.y_solution, _
'                    prm.iterations, _
'                    prm.msg)
'
'    Else
'        out = Array("no solution", _
'                    cal_type_string, _
'                    CStr(prm.y_solution), _
'                    CStr(prm.iterations), _
'                    prm.msg)
'    End If
'
'    out_desc = Array("solution", _
'                     "cal_type", _
'                     "y_solution", _
'                     "iterations", _
'                     "description")
'    MF_calibr_pipe = array_join(Array(out, out_desc))
'
'    Exit Function
'err1:
'    MF_calibr_pipe = Array(-1, "error")
'    addLogMsg "Error:MF_calibr_pipe:" & Err.Description
'
'
'End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет корректирующего фактора (множителя) модели штуцера под замеры
' медленный расчет - калибровка подбирается
Public Function MF_choke_calibr( _
            ByVal feed As String, _
            ByVal d_choke_mm As Double, _
            Optional ByVal p_in_atma As Double = -1, _
            Optional ByVal p_out_atma As Double = -1, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal t_choke_C As Double = 20, _
            Optional ByVal param As String = "")
            
' feed         - закодированная строка с параметрами потока.
' d_choke_mm    - диаметр штуцера (эффективный), мм
' p_in_atma     - давление на входе (высокой стороне)
' p_out_atma    - давление на выходе (низкой стороне)
' d_pipe_mm     - диаметр трубы до и после штуцера, мм
' t_choke_C     - температура, С.
' param        - параметры расчета json строка
' результат     - число - калибровочный коэффициент для модели.
'                 штуцера  - множитель на дебит через штуцер
'description_end
' calibr_type - тип калибровки
'             0 - подбор параметра c_calibr
'             1 - подбор диаметра штуцера
'             2 - подбор газового фактор
'             3 - подбор обводненности
'             4 - подбор дебита жидкости
'             5 - подбор дебита газа свободного
On Error GoTo err1:
    Dim choke As New Cchoke
    Dim PT As PTtype
 '   Dim PVT As CPVT
    Dim out, out_desc
    Dim CoeffA(0 To 2)
    Dim Func As String
    Dim cal_type_string As String
    Dim val_min As Double, val_max As Double
    Dim prm As New CSolveParam
    
    Dim show_log As Boolean
    Dim num_value As Integer
    Dim calibr As Double
    Dim calibr_type As Integer
    Dim log_str As String
    
    show_log = True
    num_value = 1
    calibr = 1
    
    Call read_choke_param(choke, param, calibr, show_log, num_value, 10, calibr_type)
    
    Call choke.fluid.init_feed(feed)
    
    If choke.fluid.gas_only Then
        MF_choke_calibr = "not implemented yet"
        Exit Function
    End If
    
'    Set choke.fluid = PVT
    choke.d_down_m = d_pipe_mm / 1000
    choke.d_up_m = d_pipe_mm / 1000
    choke.d_choke_m = d_choke_mm / 1000
    choke.t_choke_C = t_choke_C
    
     ' prepare solution function
    Set CoeffA(0) = choke
        CoeffA(1) = p_in_atma
        CoeffA(2) = p_out_atma
        
    Select Case calibr_type
        Case 0
            Func = "calc_choke_dp_error_calibr_grav_atm"
            cal_type_string = "calibr"
            val_min = 0.5
            val_max = 1.5
        Case 1
            Func = "calc_choke_dp_error_diam_atm"
            cal_type_string = "diam_choke"
            val_min = choke.d_choke_m / 2
            val_max = choke.d_up_m
        Case 2
            Func = "calc_choke_dp_error_rp_atm"
            cal_type_string = "rp"
            val_min = 20 'pipe.fluid.rp_m3m3 * 0.5
            val_max = choke.fluid.rp_m3m3 * 2
            ' Расширить диапазон поиска по газовому фактору может быть опасно
            ' так как возможна неоднозначность решения
            ' а текущий метод поиска работает только если есть одно решение
        Case 3
            Func = "calc_choke_dp_error_fw_atm"
            cal_type_string = "fw"
            val_min = 0
            val_max = 1
            If val_max > 1 Then val_max = 1
        Case 4
            Func = "calc_choke_dp_error_qliq_atm"
            cal_type_string = "qliq"
            val_min = 0
            val_max = choke.fluid.q_liq_sm3day * 1.5
        Case 5
            Func = "calc_choke_dp_error_qgas_atm"
            cal_type_string = "qgas_free"
            val_min = 0
            If choke.fluid.q_gas_free_sm3day > 0 Then
                val_max = choke.fluid.q_gas_free_sm3day * 2
            Else
                val_max = 10000
            End If
       Case Else
            ' solve_equation_bisection without initialasing func crashes excel
            MF_choke_calibr = "not implemented"
            Exit Function
    End Select
   
    prm.y_tolerance = const_pressure_tolerance
    If solve_equation_bisection(Func, val_min, val_max, CoeffA, prm) Then
    
        out = Array(prm.x_solution, _
                    cal_type_string, _
                    prm.y_solution, _
                    prm.iterations, _
                    prm.msg)
    Else
        out = Array("no solution", _
                    cal_type_string, _
                    prm.y_solution, _
                    prm.iterations, _
                    prm.msg)
    End If
        
    out_desc = Array("solution", _
                     "cal_type", _
                     "y_solution", _
                     "iterations", _
                     "description")
                     
    If show_log Then
            log_str = choke.log.get_str
            If Len(log_str) > 32000 Then
                log_str = "log too long"
            End If
    Else
        log_str = ""
    End If
    MF_choke_calibr = array_join(Array(out, out_desc, Array(log_str, "", "", "", "")))
    
 
    
    Exit Function
err1:
    On Error Resume Next
    addLogMsg "Error:MF_choke_calibr:" & Err.Description
    log_str = choke.log.get_str
    MF_choke_calibr = array_join(Array(Array(-1, "", "", "", ""), _
                                       Array("", "", "", "", ""), _
                                       Array(log_str, "", "", "", "")))
End Function
''description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
''  расчет распределения давления и температуры в трубопроводе
''  с использованием многофазных корреляций
'Public Function MF_p_pipeline_atma( _
'                 ByVal p_calc_from_atma As Double, _
'                 ByVal t_calc_from_C As Double, _
'                 ByVal t_val_C As Variant, _
'                 ByVal h_list_m As Variant, _
'                 ByVal diam_list_mm As Variant, _
'                 ByVal q_liq_sm3day As Double, _
'                 ByVal fw_perc As Double, _
'        Optional ByVal q_gas_sm3day As Double = 0, _
'        Optional ByVal str_PVT As String = PVT_DEFAULT, _
'        Optional ByVal calc_flow_direction As Integer = 11, _
'        Optional ByVal hydr_corr As H_CORRELATION = 0, _
'        Optional ByVal temp_method As TEMP_CALC_METHOD = StartEndTemp, _
'        Optional ByVal c_calibr = 1, _
'        Optional ByVal roughness_m As Double = 0.0001, _
'        Optional ByVal out_curves As Integer = 1, _
'        Optional ByVal out_curves_num_points As Integer = 20, _
'        Optional ByVal num_value As Integer = 0, _
'        Optional ByVal znlf As Boolean = False)
'' p_calc_from_atma  - давление с которого начинается расчет, атм
''           граничное значение для проведения расчета
'' t_calc_from_C - температура в точке где задано давление расчета
'' t_val_C   - температура вдоль трубопровода
''           если число то температура на другом конце трубы
''           если range или таблица [0..N,0..1] то температура
''           окружающей среды по вертикальной глубине, С
'' h_list_m  - траектория трубопровода, если число то измеренная
''           длина, range или таблица [0..N,0..1] то траектория
'' diam_list_mm  - внутрнний диаметр трубы, если число то задается
''           постоянный диаметр, если range или таблица [0..N,0..1]
''           то задается зависимость диаметра от измеренной длины
'' q_liq_sm3day - дебит жидкости в поверхностных условиях, нм3/сут
''           если q_liq_sm3day =0 и q_gas_sm3day > 0
''           тогда считается барботаж газа через жидкость
'' fw_perc   - обводненность объемная в стандартных условиях
'' q_gas_sm3day  - свободный газ нм3/сут. дополнительный к PVT потоку.
''           учитывается для барботажа или режима потока газа
''           в других случаях добавляется к общему потоку меняя rp
'' str_PVT   - закодированная строка с параметрами PVT.
''           если задана - перекрывает другие значения
''           если задан флаг gas_only = 1 то жидкость не учитывается
'' calc_flow_direction - направление расчета и потока относительно
''           координат.  11 расчет и поток по координате
''                       10 расчет по коордиате, поток против
''                       00 расчет и поток против координате
''                       01 расчет против координат, поток по
'' hydr_corr - гидравлическая корреляция, H_CORRELATION
''           BeggsBrill = 0,
''           Ansari = 1,
''           Unified = 2,
''           Gray = 3,
''           HagedornBrown = 4,
''           SakharovMokhov = 5
'' temp_method  - метод расчета температуры
''           0 - линейное распределение по длине
''           1 - температура равна температуре окружающей среды
''           2 - расчет температуры с учетом эмиссии в окр. среду
'' c_calibr  - поправка на гравитационную составляющую
''           перепада давления, если дать ссылку на две ячейки,
''           то вторая будет поправка на трение.
'' roughness_m - шероховатость трубы
'' out_curves - флаг вывод значений между концами трубы
''           1 основные, 2 все значения.
''           вывод может замедлять расчет (не сильно)
'' out_curves_num_points - количество точек для вывода значений
''           между концами трубы.
'' num_value       - значение которое будет выводиться первым
'' znlf    - флаг для расчета вертикального барботажа (дин уровень)
'' результат - число - давление на другом конце трубы atma.
''           и распределение параметров по трубе
''description_end
'
'    Dim pipe As New CPipe
'    Dim res, res1
'
'On Error GoTo err1:
'
'    Set pipe = new_pipeline_with_stream(q_liq_sm3day, _
'                                        fw_perc, _
'                                        h_list_m, _
'                                        t_calc_from_C, _
'                                        calc_flow_direction, _
'                                        str_PVT, _
'                                        diam_list_mm, _
'                                        hydr_corr, _
'                                        t_val_C, _
'                                        temp_method, _
'                                        c_calibr, _
'                                        roughness_m, _
'                                        q_gas_sm3day, _
'                                        znlf)
'
'    ' calc pressure distribution
'    res1 = PT_to_array(pipe.calc_dPipe(p_calc_from_atma, t_calc_from_C, allCurves))
'    If out_curves = 2 Then
'        res = pipe.array_out(out_curves_num_points, all_curves_out:=True)
'    Else
'        res = pipe.array_out(out_curves_num_points)
'    End If
'    res(0, 0) = res1(0)
'
'    res(0, 0) = res(0, num_value)
'    res(1, 0) = res(1, num_value)
'    MF_p_pipeline_atma = res
'
'    Exit Function
'err1:
'    MF_p_pipeline_atma = Array(-1, "error")
'    addLogMsg "Error:MF_p_pipeline_atma:" & Err.Description
'End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
'  расчет распределения давления и температуры в трубопроводе
'  с использованием многофазных корреляций
Public Function MF_pipe_p_atma( _
                 ByVal p_calc_from_atma As Double, _
                 ByVal t_calc_from_C As Double, _
                 ByVal feed As String, _
                 ByVal construction As String, _
                 ByVal t_model As String, _
        Optional ByVal calc_flow_direction As Integer = 11, _
        Optional ByVal param As String)
' p_calc_from_atma  - давление с которого начинается расчет, атм
'           граничное значение для проведения расчета
' t_calc_from_C - температура в точке где задано давление расчета
' t_val_C   - температура вдоль трубопровода
'           если число то температура на другом конце трубы
'           если range или таблица [0..N,0..1] то температура
'           окружающей среды по вертикальной глубине, С
' h_list_m  - траектория трубопровода, если число то измеренная
'           длина, range или таблица [0..N,0..1] то траектория
' diam_list_mm  - внутрнний диаметр трубы, если число то задается
'           постоянный диаметр, если range или таблица [0..N,0..1]
'           то задается зависимость диаметра от измеренной длины
' q_liq_sm3day - дебит жидкости в поверхностных условиях, нм3/сут
'           если q_liq_sm3day =0 и q_gas_sm3day > 0
'           тогда считается барботаж газа через жидкость
' fw_perc   - обводненность объемная в стандартных условиях
' q_gas_sm3day  - свободный газ нм3/сут. дополнительный к PVT потоку.
'           учитывается для барботажа или режима потока газа
'           в других случаях добавляется к общему потоку меняя rp
' str_PVT   - закодированная строка с параметрами PVT.
'           если задана - перекрывает другие значения
'           если задан флаг gas_only = 1 то жидкость не учитывается
' calc_flow_direction - направление расчета и потока относительно
'           координат.  11 расчет и поток по координате
'                       10 расчет по коордиате, поток против
'                       00 расчет и поток против координате
'                       01 расчет против координат, поток по
' hydr_corr - гидравлическая корреляция, H_CORRELATION
'           BeggsBrill = 0,
'           Ansari = 1,
'           Unified = 2,
'           Gray = 3,
'           HagedornBrown = 4,
'           SakharovMokhov = 5
' temp_method  - метод расчета температуры
'           0 - линейное распределение по длине
'           1 - температура равна температуре окружающей среды
'           2 - расчет температуры с учетом эмиссии в окр. среду
' c_calibr  - поправка на гравитационную составляющую
'           перепада давления, если дать ссылку на две ячейки,
'           то вторая будет поправка на трение.
' roughness_m - шероховатость трубы
' out_curves - флаг вывод значений между концами трубы
'           1 основные, 2 все значения.
'           вывод может замедлять расчет (не сильно)
' out_curves_num_points - количество точек для вывода значений
'           между концами трубы.
' num_value       - значение которое будет выводиться первым
' znlf    - флаг для расчета вертикального барботажа (дин уровень)
' результат - число - давление на другом конце трубы atma.
'           и распределение параметров по трубе
'description_end
    Dim pipe As New CPipe
    Dim res, res1
    Dim out_curves As Integer
    Dim num_value As Integer
    Dim out_curves_num_points As Integer
    
    out_curves_num_points = 20
On Error GoTo err1:
    
    Set pipe = new_pipeline_with_feed(feed, _
                                        construction, _
                                        t_calc_from_C, _
                                        t_model, _
                                        param)
    
    ' calc pressure distribution
    res1 = PT_to_array(pipe.calc_dPipe(p_calc_from_atma, t_calc_from_C, allCurves))
    If out_curves = 2 Then
        res = pipe.array_out(out_curves_num_points, all_curves_out:=True)
    Else
        res = pipe.array_out(out_curves_num_points)
    End If
    res(0, 0) = res1(0)
    
    res(0, 0) = res(0, num_value)
    res(1, 0) = res(1, num_value)
    MF_pipe_p_atma = res
    Exit Function
err1:
    MF_pipe_p_atma = pipe.array_out()  ' Array(-1, "error")
    addLogMsg "Error:MF_pipe_p_atma:" & Err.Description
End Function
''description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
'' расчет распределения давления и температуры в трубе
'' (лучше не использовать - используйте MF_p_pipeline_atma)
'Public Function MF_p_pipe_atma( _
'        ByVal p_calc_from_atma As Double, _
'        ByVal t_calc_from_C As Double, _
'        ByVal t_calc_to_C As Double, _
'        ByVal length_m As Double, _
'        ByVal theta_deg As Double, _
'        ByVal d_mm As Double, _
'        ByVal q_liq_sm3day As Double, _
'        ByVal fw_perc As Double, _
'        Optional ByVal q_gas_sm3day As Double = 0, _
'        Optional ByVal str_PVT As String = PVT_DEFAULT, _
'        Optional ByVal calc_flow_direction As Integer = 11, _
'        Optional ByVal hydr_corr As H_CORRELATION = 0, _
'        Optional ByVal c_calibr = 1, _
'        Optional ByVal roughness_m As Double = 0.0001, _
'        Optional ByVal out_curves As Integer = 1, _
'        Optional ByVal out_curves_num_points As Integer = 20, _
'        Optional ByVal num_value As Integer = 0)
''p_calc_from_atma - давление с которого начинается расчет, атм
''                   граничное значение для проведения расчета
'' t_calc_from_C   - температура в точке где задано давление, С
'' t_calc_to_C     - температура на другом конце трубы
''                 по умолчанию температура вдоль трубы постоянна
''                   если задано то меняется линейно по трубе
'' length_m        - Длина трубы, измеренная, м
'' theta_deg       - угол направления потока к горизонтали
'' d_mm            - внутренний диаметр трубы
'' q_liq_sm3day     - дебит жидкости в поверхностных условиях
''              если q_liq_sm3day =0 и q_gas_sm3day > 0
''              тогда считается барботаж газа через жидкость
'' fw_perc         - обводненность
'' q_gas_sm3day    - свободный газ. дополнительный к PVT потоку.
'' str_PVT         - закодированная строка с параметрами PVT.
''                   если задана - перекрывает другие значения
''        если задан флаг gas_only = 1 то жидкость не учитывается
'' calc_flow_direction - направление расчета и потока
''                   относительно координат
''                   если = 11 расчет и поток по координате
''                   если = 10 расчет по, поток против координат
''                   если = 00 расчет и поток против координате
''                   если = 01 расчет против, поток по координате
'' hydr_corr       - гидравлическая корреляция, H_CORRELATION
''                    BeggsBrill = 0
''                    Ansari = 1
''                    Unified = 2
''                    Gray = 3
''                    HagedornBrown = 4
''                    SakharovMokhov = 5
'' c_calibr        - поправка на гравитационную составляющую
''           перепада давления, если дать ссылку на две ячейки,
''           то вторая будет поправка на трение
'' roughness_m     - шероховатость трубы
'' out_curves      - флаг вывод значений между концами трубы
''                   0 минимум, 1 основные, 2 все значения.
''                   вывод может замедлять расчет (не сильно)
'' out_curves_num_points - количество точек для вывода значений
''                   между концами трубы.
'' num_value       - значение которое будет выводиться первым
'' результат       - число - давление на другом конце трубы atma.
''                  или массив - первая строка значения
''                               вторая строка - подписи
''description_end
'
'    Dim pipe As CPipe
'    Dim PVT As New CPVT
'    Dim PTcalc As PTtype
'    Dim PTin As PTtype
'    Dim PTout As PTtype
'    Dim TM As TEMP_CALC_METHOD
'    Dim out, out_desc
'    Dim out_curves_type As CALC_RESULTS
'    Dim res
'    Dim arr
'
'On Error GoTo err1:
'
'    ' check pipe length
'    length_m = Abs(length_m)                ' length must be positive
'    If length_m = 0 Then
'        MF_p_pipe_atma = Array(p_calc_from_atma, t_calc_from_C)
'        Exit Function
'    End If
'    ' initialize pipe
'    Set pipe = new_pipe_with_stream(q_liq_sm3day, fw_perc, length_m, calc_flow_direction, _
'                                    str_PVT, theta_deg, d_mm, hydr_corr, _
'                                    t_calc_from_C, t_calc_to_C, _
'                                    c_calibr, _
'                                    roughness_m, q_gas_sm3day)
'    ' prep output
'    If out_curves Then
'        out_curves_type = allCurves
'    Else
'        out_curves_type = nocurves
'    End If
'    ' calc pressure distribution
'    PTcalc = pipe.calc_dPipe(p_calc_from_atma, , out_curves_type)  ' ( -allcurves * out_curves ) can be used for simpcity but not
'
'    ' prep results for output
'    If calc_flow_direction \ 10 = 1 Then
'        PTout = PTcalc
'        PTin.p_atma = p_calc_from_atma
'        PTin.t_C = t_calc_from_C
'    Else
'        PTin = PTcalc
'        PTout.p_atma = p_calc_from_atma
'        PTout.t_C = t_calc_from_C
'    End If
'
'    ' out results based on out_curves value
'    If out_curves = 1 Then
'        res = pipe.array_out(out_curves_num_points)
'        res(0, 0) = PTcalc.p_atma
'        res(0, 1) = PTcalc.t_C
'        arr = res
'    ElseIf out_curves = 2 Then
'        res = pipe.array_out(out_curves_num_points, all_curves_out:=True)
'        res(0, 0) = PTcalc.p_atma
'        res(0, 1) = PTcalc.t_C
'        arr = res
'    Else
'        out = Array(PTcalc.p_atma, _
'                    PTcalc.t_C, _
'                    PTin.p_atma, _
'                    PTin.t_C, _
'                    PTout.p_atma, _
'                    PTout.t_C, _
'                    pipe.c_calibr_grav, _
'                    pipe.c_calibr_fric)
'
'        out_desc = Array("p_calc_atma", _
'                         "t_calc_C", _
'                         "p_in_atma", _
'                         "t_in_C", _
'                         "p_out_atma", _
'                         "t_out_C", _
'                         "c_calibr_grav", _
'                         "c_calibr_fric")
'
'        arr = array_join(Array(out, out_desc))
'
'    End If
'    arr(0, 0) = arr(0, num_value)
'    arr(1, 0) = arr(1, num_value)
'    MF_p_pipe_atma = arr
'    Exit Function
'err1:
'    MF_p_pipe_atma = Array(-1, "error")
'    addLogMsg "Error:MF_p_pipe_atma:" & Err.Description
'End Function
'
' ==============  функции для расчета штуцера ==========================
' =====================================================================
Private Sub read_choke_param(choke As Cchoke, _
                            param As String, _
                            ByRef calibr As Double, _
                            ByRef show_log As Boolean, _
                            ByRef num_value As Integer, _
                          Optional ByRef nv As Integer = 10, _
                          Optional ByRef calibr_type As Integer = 0)
    Dim prmd As Dictionary ' param dictionary and settings variables with default values
    
    On Error Resume Next
        ' decode param here
        Set prmd = ParseJson(param)
        If prmd Is Nothing Then
            choke.addLogMsg "info: no param found, default settings applied"
        End If
        ' for references to parameter names we use constants to make it easier to manage later.
        ' by default the variables will be set to zero or empty (if no key is found)
    
        show_log = prmd(prm_show_log)
        
        num_value = prmd(prm_num_value)
        If num_value < 0 Or num_value > nv Then num_value = 0
        
        calibr = prmd(prm_choke_calibr)
        
        calibr_type = 0 ' default value
        ' here expect calibr type in param
        ' MF_choke_calibr for details
        '       Select Case calibr_type
        '                Case 0
        '                    Func = "calc_choke_dp_error_calibr_grav_atm"
        '                    cal_type_string = "calibr"
        '                Case 1
        '                    Func = "calc_choke_dp_error_diam_atm"
        '                    cal_type_string = "diam_choke"
        '                Case 2
        '                    Func = "calc_choke_dp_error_rp_atm"
        '                    cal_type_string = "rp"
        '                Case 3
        '                    Func = "calc_choke_dp_error_fw_atm"
        '                    cal_type_string = "fw"
        '                Case 4
        '                    Func = "calc_choke_dp_error_qliq_atm"
        '                    cal_type_string = "qliq"
        '                Case 5
        '                    Func = "calc_choke_dp_error_qgas_atm"
        '                    cal_type_string = "qgas_free"
        '               Case Else
        '                    ' solve_equation_bisection without initialasing func crashes excel
        '                    MF_choke_calibr = "not implemented"
        '                    Exit Function
        '            End Select
        '
        calibr_type = prmd(prm_choke_calibr_type)
        If calibr_type < 0 Or calibr_type > 5 Then calibr = 0
        Select Case calibr_type
             Case 0
                If calibr < 0.00001 Then calibr = 1
                Call choke.addLogMsg("info: calibr_type = 0, standard calibration, choke_calibr = " & calibr)
             Case 1
                If calibr < 1 Then calibr = 1
                Call choke.addLogMsg("info: calibr_type = 1, diam calibration, choke_calibr = " & calibr)
             Case 2
                If calibr < 1 Then calibr = 1
                Call choke.addLogMsg("info: calibr_type = 2, rp calibration, choke_calibr = " & calibr)
             Case 3
                If calibr < 0 Then
                    calibr = 0
                ElseIf calibr > 100 Then
                    calibr = 100
                End If
                Call choke.addLogMsg("info: calibr_type = 3, fw calibration, choke_calibr = " & calibr)
             Case 4
                If calibr < 1 Then calibr = 1
                Call choke.addLogMsg("info: calibr_type = 4, qliq calibration, choke_calibr = " & calibr)
             Case 5
                If calibr < 1 Then calibr = 1
                Call choke.addLogMsg("info: calibr_type = 5, qgas_free calibration, choke_calibr = " & calibr)
        End Select
        
End Sub
Private Function make_choke_output_array()
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет давления в штуцере
Public Function MF_choke_q_sm3day( _
                     ByVal feed As String, _
                     ByVal d_choke_mm As Double, _
                     ByVal p_in_atma As Double, _
                     ByVal p_out_atma As Double, _
            Optional ByVal t_choke_C = 20, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal param As String = "")
' feed         - закодированная строка с параметрами потока.
' d_choke_mm   - диаметр штуцера (эффективный)
' p_in_atma    - давление на входе в штуцер, атм.
'                высокая сторона
' p_out_atma   - давление на выходе из штуцера, атм.
'                низкая сторона
' t_choke_C    - температура потока, С.
' d_pipe_mm    - диаметр трубы до и после штуцера
' param        - параметры расчета json строка
' результат    - число - массив значений с параметрами штуцера
'                и давление на штуцере на расчетной стороне.
'description_end
On Error GoTo err1:
    Dim choke As New Cchoke
   ' Dim res(0 To 2, 0 To nv) As Variant
        
    
    Dim show_log As Boolean
    show_log = 1
    Dim num_value As Integer
    num_value = 0
    Dim calibr As Double
    calibr = 1
    ' auxiliary variables
    Dim log_str As String
    Dim i As Integer
    Dim PT As PTtype
    Dim pres As Double
    Dim out, out_desc
    Dim q As Double
    Dim feed_out As String
    With choke
        Call read_choke_param(choke, param, calibr, show_log, num_value, 10)
        If num_value = 0 Then num_value = 5
    On Error GoTo err1:
        
        Call .fluid.init_feed(feed)
        .d_down_m = d_pipe_mm / 1000
        .d_up_m = d_pipe_mm / 1000
        .d_choke_m = d_choke_mm / 1000
        .c_calibr_fr = calibr
        
        q = .calc_choke_q_liq_sm3day(p_in_atma, p_out_atma, t_choke_C)
        .fluid.q_liq_sm3day = q
        feed_out = .fluid.feed
err1done:
        On Error Resume Next
        MF_choke_q_sm3day = .array_out(num_value, show_log)
    End With
    Exit Function
err1:
    MF_choke_q_sm3day = -1
    choke.addLogMsg "error:MF_choke_q_sm3day:" & Err.Description
    Resume err1done:
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет давления в штуцере
Public Function MF_choke_p_atma( _
                     ByVal feed As String, _
                     ByVal d_choke_mm As Double, _
                     ByVal p_calc_from_atma As Double, _
            Optional ByVal calc_along_flow As Boolean = True, _
            Optional ByVal t_choke_C As Double = 20, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal param As String = "")
' feed         - закодированная строка с параметрами потока.
' d_choke_mm   - диаметр штуцера (эффективный)
' p_calc_from_atma - давление с которого начинается расчет, атм
'                  граничное значение для проведения расчета
'                  либо давление на входе, либо на выходе
' t_choke_C    - температура потока, С.
' d_pipe_mm    - диаметр трубы до и после штуцера
' param        - параметры расчета json строка
' результат    - число - массив значений с параметрами штуцера
'                и давление на штуцере на расчетной стороне.
'description_end
Const nv = 9  ' output array dimension (number of columns)
On Error GoTo err1:
    Dim choke As New Cchoke
    
'    Dim prmd As Dictionary ' param dictionary and settings variables with default values
    Dim show_log As Boolean
    Dim num_value As Integer
    Dim calibr As Double
    
    show_log = True
    num_value = 0
    calibr = 1
    With choke
        Call read_choke_param(choke, param, calibr, show_log, num_value, nv)
        Call .fluid.init_feed(feed)
        .d_down_m = d_pipe_mm / 1000
        .d_up_m = d_pipe_mm / 1000
        .d_choke_m = d_choke_mm / 1000
        .c_calibr_fr = calibr
        
        If calc_along_flow Then
            Call .calc_choke_p_lin(set_PT(p_calc_from_atma, t_choke_C))
            If num_value = 0 Then num_value = 2
        Else
            Call .calc_choke_p_buf(set_PT(p_calc_from_atma, t_choke_C))
            If num_value = 0 Then num_value = 1
        End If
err1done:
    On Error Resume Next
        MF_choke_p_atma = .array_out(num_value, show_log)
    End With
    Exit Function
err1:
    MF_choke_p_atma = -1
    choke.addLogMsg "error:MF_p_choke_atma:" & Err.Description
    Resume err1done:
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет корректирующего фактора (множителя) модели штуцера под замеры
' быстрый расчет - калибровка вычисляется
Public Function MF_choke_calibr_fast( _
            ByVal feed As String, _
            ByVal d_choke_mm As Double, _
            Optional ByVal p_in_atma As Double = -1, _
            Optional ByVal p_out_atma As Double = -1, _
            Optional ByVal d_pipe_mm As Double = 70, _
            Optional ByVal t_choke_C As Double = 20, _
            Optional ByVal param As String = "")
' feed         - закодированная строка с параметрами потока.
' d_choke_mm    - диаметр штуцера (эффективный), мм
' p_in_atma     - давление на входе (высокой стороне)
' p_out_atma    - давление на выходе (низкой стороне)
' d_pipe_mm     - диаметр трубы до и после штуцера, мм
' t_choke_C     - температура, С.
' param        - параметры расчета json строка
' результат     - число - калибровочный коэффициент для модели.
'                 штуцера  - множитель на дебит через штуцер
'description_end
On Error GoTo err1:
    Dim choke As New Cchoke
    Dim arr_out
    Dim out As String, out_desc As String
    
    Call choke.fluid.init_feed(feed)
    
    If choke.fluid.gas_only Then
        MF_choke_calibr_fast = "not implemented yet"
        Exit Function
    End If
    
    choke.d_down_m = d_pipe_mm / 1000
    choke.d_up_m = d_pipe_mm / 1000
    choke.d_choke_m = d_choke_mm / 1000
    
    If p_in_atma > p_out_atma And p_out_atma >= 1 Then
        Call choke.calc_choke_calibration(p_in_atma, p_out_atma, t_choke_C)
        out = choke.c_calibr_fr
        out_desc = "c_calibr_fr"
    End If
    arr_out = Array(Array(out, p_in_atma, p_out_atma, t_choke_C, choke.c_calibr_fr), _
                    Array(out_desc, "p_intake_atma", "p_out_atma", "t_choke_C", "c_calibr_fr"), _
                    Array(choke.log.get_str, "", "", "", "")) ' на выходе выдаем массив
    MF_choke_calibr_fast = array_join(arr_out)
    Exit Function
err1:
    choke.addLogMsg "Error:MF_choke_calibr_fast:" & Err.Description
    arr_out = Array(Array(-1, "", "", "", ""), _
                    Array(out_desc, "p_intake_atma", "p_out_atma", "t_choke_C", "c_calibr_fr"), _
                    Array(choke.log.get_str, "", "", "", "")) ' на выходе выдаем массив
    MF_choke_calibr_fast = array_join(arr_out)
End Function

