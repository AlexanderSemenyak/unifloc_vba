'=======================================================================================
'Unifloc 7.34 december                                       khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2021
'
'=======================================================================================
'функции для расчета гидродинамических исследований
'
Option Explicit
Function Stehfest(func_name As String, _
                  td As Double, _
                  CoeffA) As Double
   Dim SumR As Double, DlogTW As Double, z As Double
   Dim j As Integer, N As Integer
   Dim V, M As Integer
   Dim plapl As Double
   SumR = 0#
   N = 12
   DlogTW = Log(2#)
   V = coef_stehfest(N)
   
   For j = 1 To N
      z = j * DlogTW / td
      plapl = Application.Run(func_name, z, CoeffA)
      SumR = SumR + V(j) * plapl * z / j
   Next j
   Stehfest = SumR
   
End Function
Private Function coef_stehfest(N As Integer)
    Dim g(20) As Double, h(10) As Double
    Dim NH As Integer, SN As Double
    Dim K As Integer, K1 As Integer, K2 As Integer
    Dim i As Integer, FI As Double
    Dim V(20) As Double
    Dim M As Integer
    If M <> N Then
        M = N
        g(1) = 1#
        NH = N / 2
        For i = 2 To N
            g(i) = g(i - 1) * i
        Next i
        h(1) = 2# / g(NH - 1)
        For i = 2 To NH
            FI = i
            If i <> NH Then
                h(i) = (FI ^ NH) * g(2 * i) / (g(NH - i) * g(i) * g(i - 1))
            Else
                h(i) = (FI ^ NH) * g(2 * i) / (g(i) * g(i - 1))
            End If
        Next i
        SN = 2 * (NH - (NH \ 2) * 2) - 1
        For i = 1 To N
           V(i) = 0#
           K1 = (i + 1) \ 2
           K2 = i
           If K2 > NH Then K2 = NH
           For K = K1 To K2
                If 2 * K - i = 0 Then
                    V(i) = V(i) + h(K) / (g(i - K))
                    GoTo nxtIt
                End If
                If i = K Then
                    V(i) = V(i) + h(K) / g(2 * K - i)
                    GoTo nxtIt
                End If
                V(i) = V(i) + h(K) / (g(i - K) * g(2 * K - i))
nxtIt:     Next K
           V(i) = SN * V(i)
           SN = -SN
        Next i
    End If
    coef_stehfest = V
    
End Function
Function plapl(z As Double, CoeffA) As Double
   Dim pd As Double
   Dim cd As Double
   Dim skin As Double
   cd = CoeffA(0)
   skin = CoeffA(1)
   pd = BesselK0(Sqr(z)) / z
   
   plapl = (z * pd + skin) / (z + cd * z * z * (z * pd + skin))
End Function
' Laplace space solution corresponding Ei function
Function pd_lalp_Ei(z As Double, CoeffA) As Double
' coeffA - ожидаемый набор переменных для построения решения
'        coeffA(0) - rd безразмерное расстояние
   Dim pd As Double
   Dim rd As Double
   rd = CoeffA(0)
   pd_lalp_Ei = BesselK0(rd * Sqr(z)) / z
   
End Function
' Laplace space solution with rw = const
Function pd_lalp_rw(z As Double, CoeffA) As Double
' coeffA - ожидаемый набор переменных для построения решения
'        coeffA(0) - rd безразмерное расстояние
   Dim pd As Double
   Dim sqrz As Double
   Dim rd As Double
   Dim K1 As Double
   rd = CoeffA(0)
   sqrz = Sqr(z)
   K1 = BesselK1(sqrz)
   If K1 > 0 Then
       pd_lalp_rw = BesselK0(rd * sqrz) / z / sqrz / K1
   Else
       pd_lalp_rw = 0
   End If
   
End Function
' Laplace space solution with rw = const
Function pd_lalp_cd_skin(z As Double, CoeffA) As Double
' coeffA - ожидаемый набор переменных для построения решения
'        coeffA(0) - rd безразмерное расстояние
   Dim pd As Double
   Dim sqrz As Double
   Dim rd As Double
   Dim cd As Double
   Dim skin As Double
   Dim Model As Double
   Dim spds As Double
   
   rd = CoeffA(0)
   cd = CoeffA(1)
   skin = CoeffA(2)
   Model = CoeffA(3)
   
   sqrz = Sqr(z)
   Select Case Model
   Case 0
        spds = z * pd_lalp_Ei(z, CoeffA) + skin
   Case 1
        spds = z * pd_lalp_rw(z, CoeffA) + skin
   End Select
   pd_lalp_cd_skin = spds / (z * (1 + z * cd * spds))
   
   
End Function
' Laplace space solution with rw = const
Function pd_lalp_wbs(z As Double, CoeffA) As Double
' coeffA - ожидаемый набор переменных для построения решения
'        coeffA(0) - rd безразмерное расстояние
   Dim pd As Double
   Dim sqrz As Double
   Dim rd As Double
   Dim cd As Double
   Dim skin As Double
   Dim Model As Double
   Dim spds As Double
   Dim pdl As Double
   
   rd = CoeffA(0)
   cd = CoeffA(1)
   skin = CoeffA(2)
   Model = CoeffA(3)
   
   sqrz = Sqr(z)
   Select Case Model
   Case 0
        pdl = pd_lalp_Ei(z, CoeffA)
   Case 5
        pdl = pd_lalp_Ei(z, CoeffA)
   End Select
   spds = z * pdl + skin
   pd_lalp_wbs = spds / (z * (1 + z * cd * spds)) - pdl
   
   
End Function

