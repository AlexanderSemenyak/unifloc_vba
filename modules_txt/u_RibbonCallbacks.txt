'=======================================================================================
'Unifloc 7.48 new strategy                                  khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2023
'
'=======================================================================================
' Functions for the Excel ribbon buttons
Option Base 0
Const clrGrayText = 14474460
Const clrUserInput = vbYellow
Const clrCalculated = 16448160
Const clrIntermediateCalc = 10549980
Public promt As Boolean
Option Explicit
Public Function CheckBox_Pressed(control As IRibbonControl, ByRef pressed)
    pressed = promt
End Function
Public Sub CheckBox_OnAction( _
   ByRef control As IRibbonControl, _
   ByRef pressed As Boolean)
    promt = pressed
End Sub
Sub btn_ribbon_json_encode(control As IRibbonControl)
    Call UserForm_encode_json.Show(False)
End Sub
Sub btn_ribbon_json_decode(control As IRibbonControl)
    Call UserForm_decode_json.Show(False)
End Sub
Sub btn_ribbon_version(control As IRibbonControl)
    Call InfoForm.Show
End Sub
Sub btn_ribbon_links(control As IRibbonControl)
    Dim num As Integer
    add_log_msg "Сработала функция onAction элемента " + control.ID
    num = correct_links
    add_log_msg "Выполнено замен " & CStr(num)
End Sub
Sub btn_ribbon_pvt(control As IRibbonControl)
On Error Resume Next
    Call insert_PVT
End Sub
Sub btn_ribbon_feed(control As IRibbonControl)
On Error Resume Next
    Call insert_feed
End Sub
Sub btn_ribbon_choke(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(5, 2, "encode choke") Then Exit Sub
    Dim arr(0 To 4, 0 To 1)
    
    arr(0, 0) = "d_choke_mm": arr(0, 1) = 10
    arr(1, 0) = "d_pipe_mm": arr(1, 1) = 70
    arr(2, 0) = "calibr": arr(2, 1) = 1
    arr(3, 0) = "CDischarge": arr(3, 1) = 0.82
    arr(4, 0) = "choke json": arr(4, 1) = "=encode_choke(R[-4]C, R[-3]C, R[-2]C, R[-1]C)"
    
    
    ActiveCell.range("A1:B5") = arr
    ActiveCell.range("B5").name = get_name("choke_json")
    
    ActiveCell.range("A1:B5").Interior.Color = vbYellow
    ActiveCell.range("B5").Interior.Color = clrCalculated
    ActiveCell.range("B5").Select
End Sub
Sub btn_ribbon_choke_p(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(13, 12, "calc MF_choke_p_atma") Then Exit Sub
    Dim arr(0 To 11, 0 To 1)
    
    arr(0, 0) = "choke_json": arr(0, 1) = "=encode_choke()"
    arr(1, 0) = "feed_json": arr(1, 1) = "=encode_feed()"
    arr(2, 0) = "p_calc_from_atma": arr(2, 1) = 10
    arr(3, 0) = "t_choke_C": arr(3, 1) = 30
    arr(4, 0) = "calc_along_flow": arr(4, 1) = 0
    arr(5, 0) = "show_array": arr(5, 1) = 1
    arr(6, 0) = "param": arr(6, 1) = "=encode_json(R[-1]C[-1]:R[-1]C)"
    arr(7, 0) = "q_liq_sm3day": arr(7, 1) = ""
    arr(8, 0) = "fw_perc": arr(8, 1) = ""
    arr(9, 0) = "rp_m3m3": arr(9, 1) = ""
    arr(10, 0) = "q_gas_free_sm3day": arr(10, 1) = ""
    arr(11, 0) = "result": arr(11, 1) = "=MF_choke_p_atma(R[-11]C,R[-10]C,R[-9]C,R[-8]C,R[-7]C,R[-5]C,R[-4]C,R[-3]C,R[-2]C,R[-1]C)"
    
    ActiveCell.range("A1:B12") = arr
    
    
    
    ActiveCell.range("A1:A12").Interior.Color = clrGrayText
    ActiveCell.range("B1:B2").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B12").Interior.Color = clrCalculated
    ActiveCell.range("B3:B11").Interior.Color = clrUserInput
    ActiveCell.range("B7").Interior.Color = clrIntermediateCalc
    
    ActiveCell.range("B12:L13").Select
    Selection.FormulaArray = "=MF_choke_p_atma(R[-11]C,R[-10]C,R[-9]C,R[-8]C,R[-7]C,R[-5]C,R[-4]C,R[-3]C,R[-2]C,R[-1]C)"
    ActiveCell.range("A1").Select
    ActiveCell.name = get_name("choke_p")
End Sub
Sub btn_ribbon_choke_qliq(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(13, 12, "calc MF_choke_q_sm3day") Then Exit Sub
    Dim arr(0 To 11, 0 To 1)
    
    arr(0, 0) = "choke_json": arr(0, 1) = "=encode_choke()"
    arr(1, 0) = "feed_json": arr(1, 1) = "=encode_feed()"
    arr(2, 0) = "p_in_atma": arr(2, 1) = 12
    arr(3, 0) = "p_out_atma": arr(3, 1) = 10
    arr(4, 0) = "t_choke_C": arr(4, 1) = 30
    arr(5, 0) = "show_array": arr(5, 1) = 1
    arr(6, 0) = "param": arr(6, 1) = "=encode_json(R[-1]C[-1]:R[-1]C)"
    arr(7, 0) = "q_liq_sm3day": arr(7, 1) = ""
    arr(8, 0) = "fw_perc": arr(8, 1) = ""
    arr(9, 0) = "rp_m3m3": arr(9, 1) = ""
    arr(10, 0) = "q_gas_free_sm3day": arr(10, 1) = ""
    arr(11, 0) = "result": arr(11, 1) = ""
    
    ActiveCell.range("A1:B12") = arr
    
    
    
    ActiveCell.range("A1:A12").Interior.Color = clrGrayText
    ActiveCell.range("B1:B2").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B12").Interior.Color = clrCalculated
    ActiveCell.range("B3:B11").Interior.Color = clrUserInput
    ActiveCell.range("B7").Interior.Color = clrIntermediateCalc
    
    ActiveCell.range("B12:L13").Select
    Selection.FormulaArray = "=MF_choke_q_sm3day(R[-11]C,R[-10]C,R[-9]C,R[-8]C,R[-7]C,R[-5]C,R[-4]C,R[-3]C,R[-2]C,R[-1]C)"
    ActiveCell.range("A1").Select
    ActiveCell.name = get_name("choke_q")
End Sub
Sub btn_ribbon_choke_calibr(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(14, 5, "calc MF_choke_q_sm3day") Then Exit Sub
    Dim arr(0 To 12, 0 To 1)
    
    arr(0, 0) = "choke_json": arr(0, 1) = "=encode_choke()"
    arr(1, 0) = "feed_json": arr(1, 1) = "=encode_feed()"
    arr(2, 0) = "calibr_type": arr(2, 1) = 1
    arr(3, 0) = "p_in_atma": arr(3, 1) = 12
    arr(4, 0) = "p_out_atma": arr(4, 1) = 10
    arr(5, 0) = "t_choke_C": arr(5, 1) = 30
    arr(6, 0) = "show_array": arr(6, 1) = 1
    arr(7, 0) = "param": arr(7, 1) = "=encode_json(R[-1]C[-1]:R[-1]C)"
    arr(8, 0) = "q_liq_sm3day": arr(8, 1) = ""
    arr(9, 0) = "fw_perc": arr(9, 1) = ""
    arr(10, 0) = "rp_m3m3": arr(10, 1) = ""
    arr(11, 0) = "q_gas_free_sm3day": arr(11, 1) = ""
    arr(12, 0) = "result": arr(12, 1) = ""
    
    ActiveCell.range("A1:B13") = arr
    
    
    
    ActiveCell.range("A1:A13").Interior.Color = clrGrayText
    ActiveCell.range("B1:B2").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B13").Interior.Color = clrCalculated
    ActiveCell.range("B3:B12").Interior.Color = clrUserInput
    ActiveCell.range("B8").Interior.Color = clrIntermediateCalc
    
    ActiveCell.range("B13:E14").Select
    Selection.FormulaArray = "=MF_choke_calibr(R[-12]C,R[-11]C,R[-10]C,R[-9]C,R[-8]C,R[-7]C,R[-5]C,R[-4]C,R[-3]C,R[-2]C,R[-1]C)"
    ActiveCell.range("A1").Select
    ActiveCell.name = get_name("choke_calibr")
    ActiveCell.offset(2, -1).range("A1:B5").Select
    Selection.FormulaArray = "=decode_json(R[-2]C[1])"
    
    ActiveCell.range("B1").Interior.Color = clrCalculated
    ActiveCell.range("B1").Select
End Sub
Sub btn_ribbon_ipr(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(6, 2, "encode IPR") Then Exit Sub
    Dim arr(0 To 5, 0 To 1)
    
    arr(0, 0) = "p_res_atma": arr(0, 1) = 250
    arr(1, 0) = "q_liq_test_sm3day": arr(1, 1) = 30
    arr(2, 0) = "p_wf_test_atma": arr(2, 1) = 75
    arr(3, 0) = "feed json": arr(3, 1) = "=encode_feed()"
    arr(4, 0) = "PI": arr(4, 1) = "=IPR_pi_sm3dayatm(R[-3]C, R[-2]C, R[-4]C, R[-1]C)"
    arr(5, 0) = "IPR": arr(5, 1) = "=encode_ipr(R[-5]C, R[-1]C, R[-2]C)"
    
    
    ActiveCell.range("A1:B6") = arr
    ActiveCell.range("B5").name = get_name("prod_index")
    ActiveCell.range("B6").name = get_name("IPR_json")
    
    ActiveCell.range("A1:B6").Interior.Color = vbYellow
    ActiveCell.range("B4").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B5").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B6").Interior.Color = clrCalculated
    ActiveCell.range("B6").Select
End Sub
Sub btn_ribbon_ipr_chart(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(23, 4, "encode feed_mod_separate_gas") Then Exit Sub
    Dim arr(0 To 0, 0 To 1)
 
    Dim s As String
    Dim adress As String
    Dim diag
    
    s = ActiveCell.Formula
    adress = ActiveCell.Cells(1, 2).Address
    
    If Not (Len(s) > 12 And Mid(s, 1, 12) = "=encode_ipr(") Then
        ActiveCell.Cells(1, 1).Formula = "ipr json"
        ActiveCell.Cells(1, 1).Interior.Color = clrGrayText
        ActiveCell.Cells(1, 2).Formula = "=encode_ipr()"
        ActiveCell.Cells(1, 2).Interior.Color = clrIntermediateCalc
    Else
        adress = ActiveCell.Address
        ActiveCell.offset(0, -1).range("A1").Select
    End If
    
    
    ActiveCell.offset(1, 0).range("A1").Select
    ActiveCell.range("A1").Interior.Color = vbYellow
    ActiveCell.range("B1").Interior.Color = clrIntermediateCalc
              
    arr(0, 0) = "ipr_curve": arr(0, 1) = "=IPR_json_crv(" & adress & ")"
    
    ActiveCell.range("A1:B1") = arr
    
    ActiveCell.range("A2:B22").Clear
    ActiveCell.range("A2:B22").Select
    ActiveCell.range("A1:B21").Interior.Color = vbYellow
    ActiveCell.range("A2:B21").Interior.Color = clrGrayText
    Selection.FormulaArray = "=decode_json_crv(decode_json(" & range(adress).Cells(2, 1).Address & ",,""pcrv"",1))" ' decode_json_crv(" & range(adress).Cells(2, 1).Address & ")"
    
    Set diag = ActiveSheet.Shapes.AddChart2(240, xlXYScatterSmooth)
    
    
    With diag.Chart
        .SetSourceData source:=range(ActiveCell.range("A2:B21").Address)
        .HasTitle = True
        .ChartTitle.Text = "IPR"
        .Axes(xlValue, xlPrimary).HasTitle = True
        .Axes(xlValue, xlPrimary).AxisTitle.Text = "Pwf, atma"
        .Axes(xlCategory, xlPrimary).HasTitle = True
        .Axes(xlCategory, xlPrimary).AxisTitle.Text = "Qliq, sm3/day"
        
        .Parent.Top = ActiveCell.Cells(1, 5).Top
        .Parent.Left = ActiveCell.Cells(1, 5).Left
        .Parent.Height = ActiveCell.Cells(1, 5).range("I1:P15").Height
        .Parent.WIDTH = ActiveCell.Cells(1, 5).range("I1:P33").WIDTH
    End With
    ActiveCell.range("C1:D21").Clear
    ActiveCell.range("C1:D21").Select
    ActiveCell.range("A1:B21").Interior.Color = vbYellow
    ActiveCell.range("A1:B21").Interior.Color = clrGrayText
    Selection.FormulaArray = "=decode_json_crv(decode_json(" & range(adress).Cells(2, 1).Address & ",,""tcrv"",1))" ' decode_json_crv(" & range(adress).Cells(2, 1).Address & ")"
    
    Set diag = ActiveSheet.Shapes.AddChart2(240, xlXYScatterSmooth)
    With diag.Chart
        .SetSourceData source:=range(ActiveCell.range("A2:B21").Address)
        .HasTitle = True
        .ChartTitle.Text = "IPR"
        .Axes(xlValue, xlPrimary).HasTitle = True
        .Axes(xlValue, xlPrimary).AxisTitle.Text = "t fluid, C"
        .Axes(xlCategory, xlPrimary).HasTitle = True
        .Axes(xlCategory, xlPrimary).AxisTitle.Text = "Qliq, sm3/day"
        
        .Parent.Top = ActiveCell.Cells(1, 5).Top
        .Parent.Left = ActiveCell.Cells(1, 11).Left
        .Parent.Height = ActiveCell.Cells(1, 5).range("I1:P15").Height
        .Parent.WIDTH = ActiveCell.Cells(1, 5).range("I1:P33").WIDTH
        .Refresh
    End With
    range(adress).Select
    ChangeCharts
End Sub
Sub btn_ribbon_pipe_diams(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(7, 2, "encode diam") Then Exit Sub
    Dim arr(0 To 5, 0 To 1)
    
    
    arr(0, 0) = "hmes, m": arr(0, 1) = "diam ID, mm"
    arr(1, 0) = 0: arr(1, 1) = 62
    arr(2, 0) = 500: arr(2, 1) = 72
    arr(3, 0) = 2000: arr(3, 1) = 125
    
    
    ActiveCell.range("A2:B7") = arr
    ActiveCell.range("A1:B2").Interior.Color = clrGrayText
    ActiveCell.range("A3:B7").Interior.Color = clrUserInput
    ActiveCell.range("B1").Interior.Color = RGB(160, 250, 250)
    
    ActiveCell = "diams"
    ActiveCell.range("B1").FormulaR1C1 = "=encode_crv(R[2]C[-1]:R[6]C,""hmes_m"",""diam_int_mm"",""diam_list_mm"")"
    ActiveCell.range("B1").name = get_name("pipe_trajectory")
    ActiveCell.range("B1").Select
End Sub
Sub btn_ribbon_pipe_trajectory(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(7, 2, "encode trajectory") Then Exit Sub
    Dim arr(0 To 5, 0 To 1)
    
    
    arr(0, 0) = "hmes, m": arr(0, 1) = "hvert, m"
    arr(1, 0) = 0: arr(1, 1) = 0
    arr(2, 0) = 500: arr(2, 1) = 500
    arr(3, 0) = 1000: arr(3, 1) = 1000
    arr(4, 0) = 2000: arr(4, 1) = 1900
    arr(5, 0) = 2500: arr(5, 1) = 2300
    
    
    ActiveCell.range("A2:B7") = arr
    ActiveCell.range("A1:B2").Interior.Color = clrGrayText
    ActiveCell.range("A3:B7").Interior.Color = clrUserInput
    ActiveCell.range("B1").Interior.Color = RGB(160, 250, 250)
    
    ActiveCell = "trajectory"
    ActiveCell.range("B1").FormulaR1C1 = "=encode_crv(R[2]C[-1]:R[6]C,""hmes_m"",""hvert_m"",""h_list_m"")"
    ActiveCell.range("B1").name = get_name("pipe_trajectory")
    ActiveCell.range("B1").Select
End Sub
Sub btn_ribbon_constr(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(7, 4, "encode trajectory") Then Exit Sub
    Dim arr(0 To 5, 0 To 3)
    
    arr(0, 0) = "trajectory"
    arr(1, 0) = "hmes, m": arr(1, 1) = "hvert, m"
    arr(2, 0) = 0: arr(2, 1) = 0
    arr(3, 0) = 1000: arr(3, 1) = 1000
    arr(4, 0) = 2000: arr(4, 1) = 1900
    arr(5, 0) = 2500: arr(5, 1) = 2300
    
    
    arr(0, 2) = "diameter"
    arr(1, 2) = "hmes, m": arr(1, 3) = "diam, mm"
    arr(2, 2) = 0: arr(2, 3) = 62
    arr(3, 2) = 500: arr(3, 3) = 72
    arr(4, 2) = 2100: arr(4, 3) = 125
    
    ActiveCell.range("A2:D7") = arr
    ActiveCell.range("A1:D7").Interior.Color = clrUserInput
    ActiveCell.range("B1").Interior.Color = clrCalculated
    ActiveCell.range("C2:D7").Interior.Color = RGB(230, 250, 100)
    ActiveCell = "construction"
    ActiveCell.range("B1").FormulaR1C1 = "=encode_pipe_construction(R[3]C[-1]:R[6]C,R[3]C[1]:R[6]C[2])"
    ActiveCell.range("B1").name = get_name("pipe_construction")
    ActiveCell.range("B1").Select
End Sub
Sub btn_ribbon_calc_pipe(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(33, 8, "encode trajectory") Then Exit Sub
    
    Dim arr(0 To 17, 0 To 1)
    
    arr(0, 0) = "p_atma":              arr(0, 1) = 25
    arr(1, 0) = "t_C":                 arr(1, 1) = 30
    arr(2, 0) = "pipe_object":         arr(2, 1) = "=encode_pipe()"
    arr(3, 0) = "feed":                arr(3, 1) = "=encode_feed()"
    arr(4, 0) = "calc_along_coord":    arr(4, 1) = 1
    arr(5, 0) = "param":               arr(5, 1) = "{""show_array"":1}"
    arr(6, 0) = "q_liq_sm3day":        arr(6, 1) = ""
    arr(7, 0) = "fw_perc":             arr(7, 1) = ""
    arr(8, 0) = "rp_m3m3":             arr(8, 1) = ""
    arr(9, 0) = "q_gas_free_sm3day":   arr(9, 1) = ""
    
    ActiveCell.range("A1:B10") = arr
    ActiveCell.range("B1:B10").Interior.Color = clrUserInput
    ActiveCell.range("A1:A10").Interior.Color = clrGrayText
    ActiveCell.range("B3:B4").Interior.Color = clrIntermediateCalc
    
    ActiveCell.range("A11:H33").Select
    Selection.FormulaArray = "=MF_pipe_p_atma(R[-10]C[1], R[-9]C[1], R[-8]C[1], R[-7]C[1], R[-6]C[1], R[-5]C[1], R[-4]C[1], R[-3]C[1], R[-2]C[1], R[-1]C[1])"
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = RGB(225, 200, 150)
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    Selection.NumberFormat = "0"
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    ActiveCell.Select
    Dim Chart1 As Chart
    Dim diag
    Set diag = ActiveSheet.Shapes.AddChart2(240, xlXYScatterSmooth)
    Set Chart1 = diag.Chart
    With Chart1
        .ChartArea.ClearContents
        .ChartType = xlXYScatterLines
        .SeriesCollection.NewSeries
        'Change to what your series should be called
        .SeriesCollection(1).name = "=""Pressure"""
        .SeriesCollection(1).XValues = ActiveCell.range("C4:C23")
        .SeriesCollection(1).Values = ActiveCell.range("A4:A23")
        .Axes(xlValue).ReversePlotOrder = True
        
        .Parent.Top = ActiveCell.Cells(1, 9).Top
        .Parent.Left = ActiveCell.Cells(1, 9).Left
        .Parent.Height = ActiveCell.Cells(1, 9).range("L1:P23").Height
        .Parent.WIDTH = ActiveCell.Cells(1, 9).range("L1:P23").WIDTH
        
        .Axes(xlValue, xlPrimary).HasTitle = True
        .Axes(xlValue, xlPrimary).AxisTitle.Text = "Hmes, m"
        .Axes(xlCategory, xlPrimary).HasTitle = True
        .Axes(xlCategory, xlPrimary).AxisTitle.Text = "P, atma"
        
    End With
    
    Set diag = ActiveSheet.Shapes.AddChart2(240, xlXYScatterSmooth)
    Set Chart1 = diag.Chart
    With Chart1
        .ChartArea.ClearContents
        .ChartType = xlXYScatterLines
        .ChartTitle.Text = "Temperature"
        
        .SeriesCollection.NewSeries
        .SeriesCollection(1).name = "=""Temperature"""
        .SeriesCollection(1).XValues = ActiveCell.range("D4:D23")
        .SeriesCollection(1).Values = ActiveCell.range("B4:B23")
        
        .SeriesCollection.NewSeries
        .SeriesCollection(2).name = "=""Ambient Temperature"""
        .SeriesCollection(2).XValues = ActiveCell.range("E4:E23")
        .SeriesCollection(2).Values = ActiveCell.range("B4:B23")
        .Axes(xlValue).ReversePlotOrder = True
        
        .Parent.Top = ActiveCell.Cells(1, 9).Top
        .Parent.Left = ActiveCell.Cells(1, 14).Left
        .Parent.Height = ActiveCell.Cells(1, 9).range("L1:P23").Height
        .Parent.WIDTH = ActiveCell.Cells(1, 9).range("L1:P23").WIDTH
        
        .Axes(xlValue, xlPrimary).HasTitle = True
        .Axes(xlValue, xlPrimary).AxisTitle.Text = "Hvert, m"
        .Axes(xlCategory, xlPrimary).HasTitle = True
        .Axes(xlCategory, xlPrimary).AxisTitle.Text = "T, C"
    End With
End Sub
Sub btn_ribbon_tmodel(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(7, 2, "encode trajectory") Then Exit Sub
    Dim arr(0 To 5, 0 To 1)
    
    arr(0, 0) = "ambient temperature"
    arr(1, 0) = "hvert, m": arr(1, 1) = "t amb, C"
    arr(2, 0) = 0: arr(2, 1) = 10
    arr(3, 0) = 1000: arr(3, 1) = 35
    arr(4, 0) = 2000: arr(4, 1) = 80
    arr(5, 0) = 2500: arr(5, 1) = 90
    
    
    ActiveCell.range("A2:B7") = arr
    ActiveCell.range("A1:B7").Interior.Color = vbYellow
    ActiveCell.range("B1").Interior.Color = RGB(160, 250, 250)
    ActiveCell = "t model"
    
    ActiveCell.range("B1").FormulaR1C1 = "=encode_t_model(1,R[3]C[-1]:R[6]C)"
    ActiveCell.range("B1").name = get_name("t_model")
    ActiveCell.range("B1").Select
End Sub
Sub btn_ribbon_esp_pump(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(14, 2, "encode trajectory") Then Exit Sub
    Dim arr(0 To 17, 0 To 1)
    
    arr(0, 0) = "ESP q nom": arr(0, 1) = 80
    arr(1, 0) = "ESP head nom": arr(1, 1) = 1500
    arr(2, 0) = "freq_nom": arr(2, 1) = 50
    arr(3, 0) = "ESP ID": arr(3, 1) = "=ESP_id_by_rate(R[-3]C, R[-1]C)"
    arr(4, 0) = "ESP name": arr(4, 1) = "=ESP_name(R[-1]C)"
    arr(5, 0) = "ESP q max": arr(5, 1) = "=ESP_rate_max_sm3day(R[-3]C,R[-2]C)"
    arr(6, 0) = "num stages": arr(6, 1) = "=ESP_calc_stages_num(R[-3]C,R[-5]C,R[-4]C,R[-6]C)"
    arr(7, 0) = "calibr_head": arr(7, 1) = 1
    arr(8, 0) = "calibr_rate": arr(8, 1) = 1
    arr(9, 0) = "calibr_power": arr(9, 1) = 1
    arr(10, 0) = "gas_correct_model": arr(10, 1) = 1
    arr(11, 0) = "gas_correct_stage_by_stage": arr(11, 1) = 0
    arr(12, 0) = "dnum_stages_integrate": arr(12, 1) = 1
    arr(13, 0) = "encode_esp_pump": arr(13, 1) = "=encode_ESP_pump(R[-13]C, R[-12]C,R[-11]C, , , R[-6]C, R[-5]C, R[-4]C, R[-3]C, R[-2]C, R[-1]C)"
    ActiveCell.range("A1:B14") = arr
    ActiveCell.range("B1:B14").Interior.Color = clrUserInput
    ActiveCell.range("A1:A14").Interior.Color = clrGrayText
    ActiveCell.range("B14").Interior.Color = clrCalculated
    ActiveCell.range("B4:B7").Interior.Color = clrIntermediateCalc
End Sub
Sub btn_ribbon_esp_pump_calc(control As IRibbonControl)
On Error Resume Next
    Dim arr(0 To 12, 0 To 1)
    
    If Not promt_to_write(36, 8, "encode trajectory") Then Exit Sub
   
    arr(0, 0) = "p_atma":             arr(0, 1) = 100
    arr(1, 0) = "t_intake_C":         arr(1, 1) = 30
    arr(2, 0) = "t_dis_C":            arr(2, 1) = -1
    arr(3, 0) = "feed":               arr(3, 1) = "=encode_feed()"
    arr(4, 0) = "json_ESP_pump":      arr(4, 1) = "=encode_ESP_pump()"
    arr(5, 0) = "freq_Hz":            arr(5, 1) = 50
    arr(6, 0) = "calc_along_flow":    arr(6, 1) = 1
    arr(7, 0) = "param":              arr(7, 1) = "{""show_array"":1}"
    arr(8, 0) = "h_mes_top":          arr(8, 1) = 1000
    arr(9, 0) = "q_liq_sm3day":       arr(9, 1) = ""
    arr(10, 0) = "fw_perc":           arr(10, 1) = ""
    arr(11, 0) = "rp_m3m3":           arr(11, 1) = ""
    arr(12, 0) = "q_gas_free_sm3day": arr(12, 1) = ""
    
    ActiveCell.range("A1:B13") = arr
    ActiveCell.range("A1:A13").Interior.Color = clrGrayText
    ActiveCell.range("B1:B13").Interior.Color = clrUserInput
    ActiveCell.range("B4:B5").Interior.Color = clrIntermediateCalc
    ActiveCell.range("A14:H36").Select
    Selection.FormulaArray = "=ESP_p_json_atma(R[-13]C[1], R[-12]C[1], R[-11]C[1], R[-10]C[1], R[-9]C[1],  R[-8]C[1], R[-7]C[1], R[-6]C[1], R[-5]C[1], R[-4]C[1], R[-3]C[1], R[-2]C[1], R[-1]C[1])"
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = RGB(225, 200, 150)
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    Selection.NumberFormat = "0"
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    ActiveCell.Select
    Dim Chart1 As Chart
    Dim diag
    Set diag = ActiveSheet.Shapes.AddChart2(240, xlXYScatterSmooth)
    Set Chart1 = diag.Chart
    With Chart1
        .ChartArea.ClearContents
        .ChartType = xlXYScatterLines
        .SeriesCollection.NewSeries
        'Change to what your series should be called
        .SeriesCollection(1).name = "=""Pressure"""
        .SeriesCollection(1).XValues = ActiveCell.range("C4:C23")
        .SeriesCollection(1).Values = ActiveCell.range("A4:A23")
        .Axes(xlValue).ReversePlotOrder = True
        
        .Parent.Top = ActiveCell.Cells(1, 9).Top
        .Parent.Left = ActiveCell.Cells(1, 9).Left
        .Parent.Height = ActiveCell.Cells(1, 9).range("L1:P23").Height
        .Parent.WIDTH = ActiveCell.Cells(1, 9).range("L1:P23").WIDTH
        
        .Axes(xlValue, xlPrimary).HasTitle = True
        .Axes(xlValue, xlPrimary).AxisTitle.Text = "stage number"
        .Axes(xlCategory, xlPrimary).HasTitle = True
        .Axes(xlCategory, xlPrimary).AxisTitle.Text = "P, atma"
        
    End With
    
End Sub
' Units converter from Leonid Igrevsky
Sub btn_units_converter(control As IRibbonControl)
On Error Resume Next
    Call RunThis
End Sub
Sub btn_json_linspace(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(4, 2, "encode linspace") Then Exit Sub
    Dim arr(0 To 3, 0 To 1)
    
    arr(0, 0) = "val_from": arr(0, 1) = 1
    arr(1, 0) = "val_to": arr(1, 1) = 250
    arr(2, 0) = "num": arr(2, 1) = 25
    arr(3, 0) = "linspace": arr(3, 1) = "=encode_linspace(R[-3]C,R[-2]C,R[-1]C)"
    
    ActiveCell.range("A1:B4") = arr
    ActiveCell.range("A1:A4").Interior.Color = clrGrayText
    ActiveCell.range("B4").Interior.Color = clrCalculated
    ActiveCell.range("B1:B3").Interior.Color = clrUserInput
    ActiveCell.range("B4").Select
    ActiveCell.name = get_name("linspace")
End Sub
Sub btn_json_logspace(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(4, 2, "encode logspace") Then Exit Sub
    Dim arr(0 To 3, 0 To 1)
    
    arr(0, 0) = "val_from": arr(0, 1) = 1
    arr(1, 0) = "val_to": arr(1, 1) = 250
    arr(2, 0) = "num": arr(2, 1) = 25
    arr(3, 0) = "logspace": arr(3, 1) = "=encode_logspace(R[-3]C,R[-2]C,R[-1]C)"
    
    ActiveCell.range("A1:B4") = arr
    ActiveCell.range("A1:A4").Interior.Color = clrGrayText
    ActiveCell.range("B4").Interior.Color = clrCalculated
    ActiveCell.range("B1:B3").Interior.Color = clrUserInput
    ActiveCell.range("B4").Select
    ActiveCell.name = get_name("logspace")
End Sub
Sub btn_json_arange(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(4, 2, "encode arange") Then Exit Sub
    Dim arr(0 To 3, 0 To 1)
    
    arr(0, 0) = "val_from": arr(0, 1) = 1
    arr(1, 0) = "val_to": arr(1, 1) = 250
    arr(2, 0) = "num": arr(2, 1) = 10
    arr(3, 0) = "arange": arr(3, 1) = "=encode_arange(R[-3]C,R[-2]C,R[-1]C)"
    
    ActiveCell.range("A1:B4") = arr
    ActiveCell.range("A1:A4").Interior.Color = clrGrayText
    ActiveCell.range("B4").Interior.Color = clrCalculated
    ActiveCell.range("B1:B3").Interior.Color = clrUserInput
    ActiveCell.range("B4").Select
    ActiveCell.name = get_name("arange")
End Sub
Sub btn_PVT_rs_m3m3(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(4, 2, "encode rs") Then Exit Sub
    Dim arr(0 To 3, 0 To 1)
    
    arr(0, 0) = "P, atma": arr(0, 1) = 80
    arr(1, 0) = "T, C": arr(1, 1) = 80
    arr(2, 0) = "pvt json": arr(2, 1) = "=encode_PVT()"
    arr(3, 0) = "rs m3m3": arr(3, 1) = "=PVT_rs_m3m3(R[-3]C,R[-2]C,R[-1]C)"
    
    ActiveCell.range("A1:B4") = arr
    ActiveCell.range("A1:A4").Interior.Color = clrGrayText
    ActiveCell.range("B3").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B4").Interior.Color = clrCalculated
    ActiveCell.range("B1:B2").Interior.Color = clrUserInput
    ActiveCell.range("B4").Select
    ActiveCell.name = get_name("rs_m3m3")
End Sub
Sub btn_PVT_muo_cP(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(4, 2, "encode muo") Then Exit Sub
    Dim arr(0 To 3, 0 To 1)
    
    arr(0, 0) = "P, atma": arr(0, 1) = 80
    arr(1, 0) = "T, C": arr(1, 1) = 80
    arr(2, 0) = "pvt json": arr(2, 1) = "=encode_PVT()"
    arr(3, 0) = "mu oil cP": arr(3, 1) = "=PVT_mu_oil_cP(R[-3]C,R[-2]C,R[-1]C)"
    
    ActiveCell.range("A1:B4") = arr
    ActiveCell.range("A1:A4").Interior.Color = clrGrayText
    ActiveCell.range("B3").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B4").Interior.Color = clrCalculated
    ActiveCell.range("B1:B2").Interior.Color = clrUserInput
    ActiveCell.range("B4").Select
    ActiveCell.name = get_name("muo_cP")
End Sub
Sub btn_PVT_bo_m3m3(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(4, 2, "encode bo") Then Exit Sub
    Dim arr(0 To 3, 0 To 1)
    
    arr(0, 0) = "P, atma": arr(0, 1) = 80
    arr(1, 0) = "T, C": arr(1, 1) = 80
    arr(2, 0) = "pvt json": arr(2, 1) = "=encode_PVT()"
    arr(3, 0) = "bo m3m3": arr(3, 1) = "=PVT_bo_m3m3(R[-3]C,R[-2]C,R[-1]C)"
    
    ActiveCell.range("A1:B4") = arr
    ActiveCell.range("A1:A4").Interior.Color = clrGrayText
    ActiveCell.range("B3").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B4").Interior.Color = clrCalculated
    ActiveCell.range("B1:B2").Interior.Color = clrUserInput
    ActiveCell.range("B4").Select
    ActiveCell.name = get_name("bo_m3m3")
End Sub
Sub btn_feed_gas_fraction_d(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(5, 2, "encode gas_fraction") Then Exit Sub
    Dim arr(0 To 4, 0 To 1)
    
    arr(0, 0) = "P, atma": arr(0, 1) = 10
    arr(1, 0) = "T, C": arr(1, 1) = 80
    arr(2, 0) = "feed json": arr(2, 1) = "=encode_feed()"
    arr(3, 0) = "k sep": arr(3, 1) = 0
    arr(4, 0) = "gas fraction": arr(4, 1) = "=feed_gas_fraction_d(R[-4]C,R[-3]C,R[-2]C,R[-1]C)"
    
    ActiveCell.range("A1:B5") = arr
    ActiveCell.range("A1:A5").Interior.Color = clrGrayText
    ActiveCell.range("B5").Interior.Color = clrCalculated
    ActiveCell.range("B1:B4").Interior.Color = clrUserInput
    ActiveCell.range("B3").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B5").Select
    ActiveCell.name = get_name("gas_fraction")
End Sub
Sub btn_feed_qmix(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(4, 2, "encode gas_fraction") Then Exit Sub
    Dim arr(0 To 3, 0 To 1)
    
    arr(0, 0) = "P, atma": arr(0, 1) = 10
    arr(1, 0) = "T, C": arr(1, 1) = 80
    arr(2, 0) = "feed json": arr(2, 1) = "=encode_feed()"
    arr(3, 0) = "q_mix_rc_m3day": arr(3, 1) = "=feed_q_mix_rc_m3day(R[-3]C,R[-2]C,R[-1]C)"
    
    ActiveCell.range("A1:B4") = arr
    ActiveCell.range("A1:A4").Interior.Color = clrGrayText
    ActiveCell.range("B4").Interior.Color = clrCalculated
    ActiveCell.range("B1:B3").Interior.Color = clrUserInput
    ActiveCell.range("B3").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B4").Select
    ActiveCell.name = get_name("qmix")
End Sub
Sub btn_feed_separation(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(6, 2, "encode feed_mod_separate_gas") Then Exit Sub
    Dim arr(0 To 5, 0 To 1)
    
    arr(0, 0) = "k_sep": arr(0, 1) = 0.2
    arr(1, 0) = "p_atma": arr(1, 1) = 40
    arr(2, 0) = "t_C": arr(2, 1) = 20
    arr(3, 0) = "feed": arr(3, 1) = "=encode_feed()"
    arr(4, 0) = "sol_factor": arr(4, 1) = 1
    arr(5, 0) = "new feed": arr(5, 1) = "=feed_mod_separate_gas(R[-5]C,R[-4]C,R[-3]C,R[-2]C,R[-1]C)"
    
    ActiveCell.range("A1:B6") = arr
    ActiveCell.range("A1:A6").Interior.Color = clrGrayText
    ActiveCell.range("B6").Interior.Color = clrCalculated
    ActiveCell.range("B1:B5").Interior.Color = clrUserInput
    ActiveCell.range("B4").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B6").Select
    ActiveCell.name = get_name("feed_sep_gas")
  
End Sub
Sub btn_ribbon_ipr_pi(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(4, 2, "calc IPR_pi_sm3dayatm") Then Exit Sub
    Dim arr(0 To 3, 0 To 1)
    
    arr(0, 0) = "Qtest_sm3day": arr(0, 1) = 30
    arr(1, 0) = "pwf_test_atma": arr(1, 1) = 40
    arr(2, 0) = "ipr json": arr(2, 1) = "=encode_ipr()"
    arr(3, 0) = "pi_sm3dayatm": arr(3, 1) = "=IPR_calc_pi(R[-1]C,R[-3]C,R[-2]C)"
    
    ActiveCell.range("A1:B4") = arr
    ActiveCell.range("A1:A4").Interior.Color = clrGrayText
    ActiveCell.range("B3").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B4").Interior.Color = clrCalculated
    ActiveCell.range("B1:B2").Interior.Color = clrUserInput
    ActiveCell.range("B4").Select
    ActiveCell.name = get_name("pi_sm3dayatm")
  
End Sub
Sub btn_ribbon_ipr__qliq(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(3, 2, "calc IPR_q_liq_sm3day") Then Exit Sub
    Dim arr(0 To 2, 0 To 1)
    
    arr(0, 0) = "pwf_test_atma": arr(0, 1) = 40
    arr(1, 0) = "ipr json": arr(1, 1) = "=encode_ipr()"
    arr(2, 0) = "q_liq_sm3day": arr(2, 1) = "=IPR_calc_qliq_sm3day(R[-1]C,R[-2]C)"
    
    ActiveCell.range("A1:B3") = arr
    ActiveCell.range("A1:A3").Interior.Color = clrGrayText
    ActiveCell.range("B2").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B3").Interior.Color = clrCalculated
    ActiveCell.range("B1").Interior.Color = clrUserInput
    ActiveCell.range("B3").Select
    ActiveCell.name = get_name("q_liq_sm3day")
  
End Sub
Sub btn_ribbon_ipr_pwf(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(3, 2, "calc IPR_p_wf_atma") Then Exit Sub
    Dim arr(0 To 2, 0 To 1)
    
    arr(0, 0) = "q_liq_sm3day": arr(0, 1) = 40
    arr(1, 0) = "ipr json": arr(1, 1) = "=encode_ipr()"
    arr(2, 0) = "pwf_atma": arr(2, 1) = "=IPR_calc_pwf(R[-1]C,R[-2]C)"
    
    ActiveCell.range("A1:B3") = arr
    ActiveCell.range("A1:A3").Interior.Color = clrGrayText
    ActiveCell.range("B2").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B3").Interior.Color = clrCalculated
    ActiveCell.range("B1").Interior.Color = clrUserInput
    ActiveCell.range("B3").Select
    ActiveCell.name = get_name("p_wf_atma")
  
End Sub
Sub btn_feed_split(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(7, 2, "encode feed_mod_split") Then Exit Sub
    Dim arr(0 To 6, 0 To 1)
    
    arr(0, 0) = "k_sep_gas": arr(0, 1) = 0.2
    arr(1, 0) = "k_sep_oil": arr(1, 1) = 0.2
    arr(2, 0) = "k_sep_wat": arr(2, 1) = 0.2
    arr(3, 0) = "p_atma": arr(3, 1) = 40
    arr(4, 0) = "t_C": arr(4, 1) = 20
    arr(5, 0) = "feed": arr(5, 1) = "=encode_feed()"
    arr(6, 0) = "new feeds": arr(6, 1) = "=feed_mod_split(R[-6]C,R[-5]C,R[-4]C,R[-3]C,R[-2]C,R[-1]C)"
    
    ActiveCell.range("A1:B7") = arr
    ActiveCell.range("A1:A7").Interior.Color = clrGrayText
    ActiveCell.range("B7").Interior.Color = clrCalculated
    ActiveCell.range("B1:B6").Interior.Color = clrUserInput
    ActiveCell.range("B6").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B7").Select
    ActiveCell.name = get_name("feeds_split")
  
End Sub
Sub btn_feed_mix(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(3, 2, "encode feed_mod_mix") Then Exit Sub
    Dim arr(0 To 2, 0 To 1)
    
    arr(0, 0) = "feed 1": arr(0, 1) = "=encode_feed()"
    arr(1, 0) = "feed 2": arr(1, 1) = "=encode_feed()"
    arr(2, 0) = "new feeds": arr(2, 1) = "=feed_mod_mix(R[-2]C,R[-1]C)"
    
    ActiveCell.range("A1:B3") = arr
    ActiveCell.range("A1:A3").Interior.Color = clrGrayText
    ActiveCell.range("B1:B3").Interior.Color = clrUserInput
    ActiveCell.range("B3").Interior.Color = clrCalculated
    ActiveCell.range("B3").Select
    ActiveCell.name = get_name("feed_mix")
  
End Sub
Sub insert_esp_pump()
End Sub
' A solution to fix the problem with add-on paths
' https://www.planetaexcel.ru/forum/index.php?PAGE_NAME=message&FID=8&TID=10450&TITLE_SEO=10450&MID=91949#message91949
' Called by pressing a button on the ribbon
 Function correct_links()
 Dim wb As Workbook
 Dim MyAddIn, Lnk, sh
 Dim MyAddInNameFull
 Dim aLinks
 Dim wname As String
 Dim i As Integer
 i = 0
 wname = "unknown"
 
 On Error GoTo exit_
 
  ' Define the name of the add-in
 MyAddIn = UCase(ThisWorkbook.name)
 MyAddInNameFull = ThisWorkbook.Path & "\" & ThisWorkbook.name
 Set wb = ActiveWorkbook ' work with the active workbook
 If Not wb Is Nothing Then
    With wb
       wname = wb.name
       aLinks = wb.LinkSources()
       If Not IsEmpty(aLinks) Then
            For Each Lnk In .LinkSources(Type:=xlExcelLinks)
                Debug.Print Lnk
                 Debug.Print UCase(Lnk), "*" & MyAddIn
              If UCase(Lnk) Like "*" & MyAddIn Then
                add_log_msg "an add-in reference " & wb.name & " was found in the book " & Lnk
                If UCase(Lnk) <> UCase(MyAddInNameFull) Then
                    add_log_msg "in the book " & wb.name & " trying to correct the link " & Lnk & " to the correct " & MyAddInNameFull
                    .ChangeLink name:=Lnk, NewName:=MyAddIn
                    i = i + 1
                    For Each sh In .Worksheets
                      sh.Calculate
                    Next
                Else
                    add_log_msg "in book " & wb.name & " reference " & Lnk & " correct, no correction needed"
                End If
              End If
            Next
        End If
    End With
    correct_links = i
 Else
    GoTo exit_
 End If
 Exit Function
 
exit_:
    MsgBox "Error. Something went wrong when fixing the add-in links."
    add_log_msg "Error. In the book " & wname & " something went wrong when fixing the add-in links."
End Function
Sub insert_esp_pump_calc()
    
End Sub
Sub insert_pipe_calc()
End Sub
Sub insert_pipe_data()
    Dim arr(0 To 5, 0 To 3)
    
    arr(0, 0) = "trajectory"
    arr(1, 0) = "hmes, m": arr(1, 1) = "hvert, m"
    arr(2, 0) = 0: arr(2, 1) = 0
    arr(3, 0) = 1000: arr(3, 1) = 1000
    arr(4, 0) = 2000: arr(4, 1) = 1900
    arr(5, 0) = 2500: arr(5, 1) = 2300
    
    
    arr(0, 2) = "diameter"
    arr(1, 2) = "hmes, m": arr(1, 3) = "diam, mm"
    arr(2, 2) = 0: arr(2, 3) = 62
    arr(3, 2) = 500: arr(3, 3) = 72
    arr(4, 2) = 2100: arr(4, 3) = 125
    
    
    
    ActiveCell.range("A2:D7") = arr
    ActiveCell.range("A1:D7").Interior.Color = vbYellow
    ActiveCell.range("B1").Interior.Color = RGB(160, 250, 250)
    ActiveCell.range("C2:D7").Interior.Color = RGB(230, 250, 100)
    ActiveCell = "construction"
    ActiveCell.range("B1").FormulaR1C1 = "=encode_pipe_construction(R[3]C[-1]:R[6]C,R[3]C[1]:R[6]C[2])"
    ActiveCell.range("B1").name = get_name("pipe_construction")
    ActiveCell.range("B1").Select
End Sub
Sub btn_ribbon_pipe_object(control As IRibbonControl)
On Error Resume Next
    If Not promt_to_write(10, 2, "pipe object") Then Exit Sub
    Dim arr(0 To 9, 0 To 3)
    
    
    arr(0, 0) = "construction":     arr(0, 1) = "=encode_pipe_construction()"
    arr(1, 0) = "t_model":          arr(1, 1) = "=encode_t_model()"
    arr(2, 0) = "flow_correlation": arr(2, 1) = 0
    arr(3, 0) = "flow_along_coord": arr(3, 1) = 0
    arr(4, 0) = "calibr_grav":      arr(4, 1) = 1
    arr(5, 0) = "calibr_fric":      arr(5, 1) = 1
    arr(6, 0) = "h_start_m":        arr(6, 1) = ""
    arr(7, 0) = "h_end_m":          arr(7, 1) = ""
    arr(8, 0) = "znlf":             arr(8, 1) = ""
    arr(9, 0) = "pipe":             arr(9, 1) = "=encode_pipe()"
       
    
    ActiveCell.range("A1:B10") = arr
    ActiveCell.range("B1:B10").Interior.Color = clrUserInput
    ActiveCell.range("A1:A10").Interior.Color = clrGrayText
    ActiveCell.range("B1").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B2").Interior.Color = clrIntermediateCalc
    ActiveCell.range("B10").Interior.Color = clrCalculated
    
    ActiveCell.range("B10").FormulaR1C1 = "=encode_pipe(R[-9]C,R[-8]C,R[-7]C,R[-6]C,R[-5]C,R[-4]C,R[-3]C,R[-2]C,R[-1]C)"
    ActiveCell.range("B10").name = get_name("pipe_object")
    ActiveCell.range("B10").Select
End Sub
Function get_name(base_name As String) As String
    Dim nms
    Dim name_done As Boolean
    Dim i As Integer
    Dim iname As Integer
    Dim isafe As Integer
    Dim set_name As String
    
    set_name = base_name
    name_done = False
    iname = 1
    isafe = 1
    Set nms = ActiveWorkbook.Names
    
    Do
        If nms.Count > 0 Then
            For i = 1 To nms.Count
                If nms(i).name = set_name Then
                    set_name = base_name & "_" & CStr(iname)
                    iname = iname + 1
                    Exit For
                End If
                If i = nms.Count Then name_done = True
            Next i
            isafe = isafe + 1
            If isafe = 10000 Then
                set_name = base_name & "_error_" & CStr(iname)
                Exit Do
            End If
        End If
    Loop Until name_done
    
    get_name = set_name
End Function
Sub ChangeCharts()
Application.ScreenUpdating = False 'This line disable the on screen update for better performance, the blink you see, you could delete both lanes but it will run slower
Dim myChart As ChartObject
For Each myChart In ActiveSheet.ChartObjects
    myChart.Chart.Refresh
Next myChart
Application.ScreenUpdating = True 'This line reenable the on screen update for better performance, the blink you see, you could delete both lanes but it will run slower
End Sub
Sub insert_PVT()
'
' insert_PVT Макрос
'
' macros recorded with relative links on
' 28/09/2021  rnt
    If promt_to_write(10, 2, "encode PVT") Then
       Dim arr(0 To 8, 0 To 1)
       arr(0, 0) = "gamma_gas": arr(0, 1) = 0.6
       arr(1, 0) = "gamma_oil": arr(1, 1) = 0.86
       arr(2, 0) = "gamma_wat": arr(2, 1) = 1.1
       arr(3, 0) = "rsb_m3m3": arr(3, 1) = 120
       arr(4, 0) = "pb_atma": arr(4, 1) = 130
       arr(5, 0) = "t_res_C": arr(5, 1) = 80
       arr(6, 0) = "bob_m3m3": arr(6, 1) = 1.2
       arr(7, 0) = "muob_cP": arr(7, 1) = 0.6
       arr(8, 0) = "pvt_corr_set": arr(8, 1) = 0
       
       ActiveCell.range("A1:B9") = arr
       ActiveCell.range("A1:A10").Interior.Color = clrGrayText
       ActiveCell.range("B1:B10").Interior.Color = clrUserInput
       
       ActiveCell.range("A10").Select
       ActiveCell.FormulaR1C1 = "PVT"
       ActiveCell.range("B1").Select
       ActiveCell.FormulaR1C1 = "=encode_PVT(R[-9]C,R[-8]C,R[-7]C,R[-6]C,R[-5]C,R[-4]C,R[-3]C,R[-2]C,R[-1]C)"
       ActiveCell.name = get_name("PVT_json")
       
       ActiveCell.Interior.Color = clrCalculated
    End If
End Sub
Sub insert_feed()
'
' insert_PVT Макрос
'
' macros recorded with relative links on
' 28/09/2021  rnt
    Dim arr(0 To 3, 0 To 1)
    arr(0, 0) = "q_liq_sm3day": arr(0, 1) = 30
    arr(1, 0) = "fw_perc": arr(1, 1) = 10
    arr(2, 0) = "rp_m3m3": arr(2, 1) = 120
    arr(3, 0) = "q_gas_free_sm3day": arr(3, 1) = 0
                      
            
            
    Dim s As String
    s = ActiveCell.Formula
    If Len(s) > 12 And Mid(s, 1, 12) = "=encode_PVT(" Then
        ActiveCell.offset(1, -1).range("A1").Select
        If promt_to_write(5, 2, "encode feed") Then
            ActiveCell.range("A1:B4") = arr
            ActiveCell.range("A1:B5").Interior.Color = clrUserInput
            ActiveCell.range("A1:A5").Interior.Color = clrGrayText
            
            ActiveCell.range("A5").Select
            ActiveCell.FormulaR1C1 = "feed"
            ActiveCell.range("B1").Select
            ActiveCell.FormulaR1C1 = "=encode_feed(R[-4]C,R[-3]C,R[-2]C,R[-1]C,R[-5]C)"
        Else
            Exit Sub
        End If
    Else
        If promt_to_write(6, 2, "encode feed") Then
        
            ActiveCell.range("A1:B4") = arr
            ActiveCell.range("A1:B6").Interior.Color = clrUserInput
            ActiveCell.range("A1:A6").Interior.Color = clrGrayText
            
            ActiveCell.range("A5").Select
            ActiveCell.FormulaR1C1 = "fluid"
            ActiveCell.range("B1").Formula2R1C1 = "=encode_pvt()"
            ActiveCell.range("B1").Interior.Color = clrIntermediateCalc
            ActiveCell.range("A2").Select
            ActiveCell.FormulaR1C1 = "feed"
            ActiveCell.range("B1").Select
            ActiveCell.FormulaR1C1 = "=encode_feed(R[-5]C,R[-4]C,R[-3]C,R[-2]C,R[-1]C)"
        Else
            Exit Sub
        End If
    End If
    ActiveCell.name = get_name("feed_json")
    ActiveCell.Interior.Color = RGB(160, 250, 250)
    
End Sub
Private Sub MakeParameter( _
        Dst As range, _
        ParameterName, _
        Dimensions() As Variant, _
        DefaultValue)
        
' Cоздает поле ввода параметра с возможностью выбора единиц измерения и пересчетом в другие единицы измерения
' Dst - ячейка, куда будет помещен вывод, займет 6 ячеек вправо
' ParameterName - название параметра, например "Проницаемость"
' Dimensions() - динамический массив строк с разделителем вертикальной чертой, например "мД|x*1.02e-15|x/1.02e-15|L"
'   массив должен начинаться с нулевого элемента (option base 0), х - латинская буква для формулы перевода
'   размерность | формула для перевода в СИ | формула для перевода из СИ | L или R
'   если в конце указана буква L - это размерность по умолчанию слева, R - справа
'   если две буквы LR - размерности слева и справа по умолчанию будут одинаковые
'   если хотите что-то сломать, задав другой формат, то будьте уверены - сломаете! удачи!
' DefaultValue - значение параметра по умолчанию
    
    Dst.Value = ParameterName
    Dim s() As String ' Для подстрок
    Dim sOutD As String, sOutL As String, sBrackets As String
    Dim M, DefaultDimensionL, DefaultDimensionR
    Dim sOutR As String
        
    sOutD = "" ' Строка размерностей
    sOutL = "" ' Строка формулы перевода
    sBrackets = ""
    For Each M In Dimensions
        s = Split(M, "|") ' Будут созданы строки s(0) s(1) s(2) и возможно s(3)
        s(1) = Replace(s(1), "x", "RC[-2]") ' Букву х нужно заменить на относительную ссылку
        sOutL = sOutL & "IF(" & "RC[-1]=""" & s(0) & """," & s(1) & "," ' Формулы пересчета для внесения в формулу IFS
        sBrackets = sBrackets & ")" ' Запоминаем одну закрывающую скобку
    Next
    sOutL = sOutL & sBrackets ' Закрываем все скобки
    sOutR = "="
    sBrackets = ""
    For Each M In Dimensions
        s = Split(M, "|") ' Будут созданы строки s(0) s(1) s(2) и возможно s(3)
        s(2) = Replace(s(2), "x", sOutL)
        sOutD = sOutD & "," & s(0) ' Названия размерностей
        sOutR = sOutR & "IF(" & "RC[+1]=""" & s(0) & """," & s(2) & "," ' Формулы пересчета для внесения в формулу IFS
        sBrackets = sBrackets & ")" ' Запоминаем одну закрывающую скобку
        If UBound(s) > 2 Then
            If s(3) = "L" Then DefaultDimensionL = s(0) ' Размерность по умолчанию слева
            If s(3) = "R" Then DefaultDimensionR = s(0) ' Размерность по умолчанию справа
            If s(3) = "LR" Then
                DefaultDimensionL = s(0) ' Размерность по умолчанию и там и там
                DefaultDimensionR = s(0)
            End If
        End If
    Next
    sOutR = sOutR & sBrackets ' Закрываем все скобки
    Dst.Cells(1, 3).Value = DefaultValue ' Значение по умолчанию
    Dst.Cells(1, 4).Validation.Delete ' Выпадающий список размерностей
    Dst.Cells(1, 4).Validation.Add Type:=xlValidateList, Formula1:=sOutD
    Dst.Cells(1, 4).Value = DefaultDimensionL ' Размерность по умолчанию
    Dst.Cells(1, 5).Formula = sOutR ' Формула для пересчета в СИ
    Dst.Cells(1, 5).Font.ThemeColor = xlThemeColorDark1
    Dst.Cells(1, 5).Font.TintAndShade = -0.5
    Dst.Cells(1, 6).Validation.Delete ' Выпадающий список размерностей
    Dst.Cells(1, 6).Validation.Add Type:=xlValidateList, Formula1:=sOutD
    Dst.Cells(1, 6).Value = DefaultDimensionR ' Размерность по умолчанию
    
End Sub
Public Function promt_to_write(nrows As Integer, ncols As Integer, ttl As String) As Boolean
    
    Dim Place
    
    If Not promt Then
        promt_to_write = True
        Exit Function
    End If
    
    Set Place = ActiveCell
    
    Place.Resize(nrows, ncols).Select
    If MsgBox("Выделенная область будет изменена." & vbNewLine & "Продолжить?", vbYesNo + vbQuestion, ttl) = vbNo Then
        promt_to_write = False
    Else
        promt_to_write = True
    End If
    ActiveCell.Select
End Function
Public Sub RunThis()
    
' Действие описано в функции MakeParameter
    
    Dim d() As Variant
    Dim Place
    
    Set Place = ActiveCell
    ' Set Place = [A1] ' В отладочных целях
    
    Place.Resize(8, 6).Select
    If MsgBox("Выделенная область будет изменена." & vbNewLine & "Продолжить?", vbYesNo + vbQuestion, "Units Converter") = vbNo Then
        Place.Select
        Exit Sub
    End If
    Selection.Clear
    
    d = Array( _
        "Па" & ChrW(183) & "с" & "|x|x", _
        "мПа" & ChrW(183) & "с" & "|x/1000|x*1000|R", _
        "сП|x/1000|x*1000|L")
    MakeParameter Place.offset(0, 0), "Вязкость нефти", d, 5
    
    d = Array( _
        "Па|x|x", _
        "МПа|x*1000000|x/1000000", _
        "ат|x*98066.5|x/98066.5", _
        "кгс/см" & ChrW(178) & "|x*98066.5|x/98066.5", _
        "атм|x*101325|x/101325", _
        "psi|x*6894.76|x/6894.76|R", _
        "бар|x*100000|x/100000|L")
    MakeParameter Place.offset(1, 0), "Пластовое давление", d, 200
    d = Array( _
        "м" & ChrW(178) & "|x|x", _
        "Д|x*1.02e-12|x/1.02e-12", _
        "мД|x*1.02e-15|x/1.02e-15|LR")
    MakeParameter Place.offset(2, 0), "Проницаемость", d, 100
    d = Array( _
        ChrW(176) & "К|x|x", _
        ChrW(176) & "С|x+273.15|x-273.15|L", _
        ChrW(176) & "F|(x-32)*5/9+273.15|(x-273.15)*9/5+32|R")
    MakeParameter Place.offset(3, 0), "Температура", d, 100
    d = Array( _
        "м" & ChrW(179) & "/м" & ChrW(179) & "|x|x|L", _
        "scft/bbl|x*0.02832/0.158987|x/0.02832*0.158987", _
        "ft" & ChrW(179) & "/bbl|x*0.02832/0.158987|x/0.02832*0.158987|R")
    MakeParameter Place.offset(4, 0), "Газосодержание", d, 50
    d = Array( _
        "м|x|x", _
        "мм|x/1000|x*1000|L", _
        "см|x/100|x*100", _
        "in|x*0.0254|x/0.0254|R", _
        "ft|x*0.3048|x/0.3048")
    MakeParameter Place.offset(5, 0), "Радиус скважины", d, 73
    d = Array( _
        "м" & ChrW(179) & "/с|x|x", _
        "м" & ChrW(179) & "/сут|x/86400|x*86400|L", _
        "л/мин|x/60000|x*60000", _
        "л/сек|x/1000|x*1000", _
        "bpd|x*0.158987/86400|x/0.158987*86400|R", _
        "ft" & ChrW(179) & "/сут|x*0.02832/86400|x/0.02832*86400")
    MakeParameter Place.offset(6, 0), "Дебит скважины", d, 100
    d = Array( _
        "кг/м" & ChrW(179) & "|x|x|L", _
        "г/cм" & ChrW(179) & "|x*1000|x/1000", _
        "lb/gal|x*119.8|x/119.8", _
        "lb/in" & ChrW(179) & "|x*27679.9|x/27679.9", _
        "lb/ft" & ChrW(179) & "|x*16.01846|x/16.01846", _
        ChrW(176) & "API|141.5*1000/(131.5+x)|141.5*1000/x-131.5|R")
    MakeParameter Place.offset(7, 0), "Плотность нефти", d, 850
End Sub

