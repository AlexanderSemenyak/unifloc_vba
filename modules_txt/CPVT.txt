'=======================================================================================
'Unifloc 7.25  coronav                                          khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2020
'
'=======================================================================================
'class_description_to_manual_eng  - class description - for auto generated manual
' CPVT class describes the properties of reservoir fluids - oil, gas and water
' on the basis of the black oil model, as well as fluid flow parameters - flow rate q_liq and watercut f_w.
' Allows to define all the necessary parameters for the calculations for the given thermobaric conditions,
' such as: gas content in oil, free gas fraction in flow, fluid density and viscosity,
' formation volume factors of fluids and mixtures and others.
' Key function calc_PVT. Its call guarantees recalculation of all flow parameters that can be accessed
' through the appropriate properties.
'description_end_eng
'class_description_to_manual_rus      - для автогенерации описания - помещает комментарии в мануал (со след строки)
' Класс CPVT описывает свойства пластовых флюидов - нефти, газа и воды
' на основе модели нелетучей нефти (black oil), а также параметры потока флюидов - дебита q_liq и обводненности f_w.
' Позволяет для заданных термобарических условий определить все необходимые для проведения расчетов параметры,
' такие как: газосодержание в нефти, долю свободного газа в потоке, плотности и вязкости флюидов,
' объемный расход флюидов и смеси и другие.
' Ключевая функция calc_PVT. Ее вызов гарантирует пересчет всех параметров потока, к которым можно получить доступ
' через соответствующие свойства.
'description_end_rus
Option Explicit
 Public gas_only As Boolean
 Public ksep_fr As Double
 Public p_ksep_atma As Double
 Public t_ksep_C As Double
 
 
 Public zCorr As Z_CORRELATION
 Public PVT_correlation As PVT_correlation       ' PVT correlation
 Public gamma_o As Double                        ' плотность нефти удельная
 Public gamma_g As Double                        ' плотность газа удельная
 Public gamma_w As Double                        ' плотность воды удельная
 ' обводненность приватная чтобы гарантировать корректность диапазона
 Private fw_fr_ As Double                        ' объемная доля воды в флюиде
 Public qliq_sm3day As Double                  ' задаем для флюида также и дебиты, это упрощает дальнейшие расчеты расходов в разных условиях
 Public q_gas_free_sm3day As Double              ' дебит газа, вернее добавка для значения Qgas, в исследовательских целях
 ' rsb и rs обладают сложным поведением при задании поэтому приватные
 Private rp_m3m3_ As Double                        ' газовый фактор добычной (приведенный к стандартным условиям)
 Private rsb_m3m3_ As Double                       ' газосодержание при давлении насыщения
 ' калибровочные параметры нефти
 Public pb_atma As Double                        ' давление насыщения  (калибровочное значение)
 Public muob_cP As Double                        ' вязкость нефти при давлении насыщения (калибровочное значение)
 Public bob_m3m3 As Double                       ' объемный коэффициент при давлении насыщения
 Public t_res_C As Double                         ' пластовая температура при которой заданые значения давления насыщения и объемного коэффициента
 Private class_name_ As String                     ' имя класса для унифицированной генерации сообщений об ошибках
 Private PT_calc_ As PTtype                        ' термобарические условия при которых был проведен расчет
 ' базовые параметры флюида
 ' расчетные параметры нефти
 Private rsb_calc_m3m3_ As Double                  ' расчетное значение газосодержания при давлении насыщения - может отличаться от исходного если то недопустимо
 Private pb_calc_atma_ As Double                   ' расчетное значение давления насыщения по корреляции
 Private rs_m3m3_ As Double                        ' расчетное значение газосодержания в нефти при текущих условиях
 Private bo_m3m3_ As Double                        ' объемный коэффициент нефти при рабочих условиях
 Private mu_oil_cP_ As Double                      ' вязкость нефти при рабочих условиях
 Private mu_deadoil_cP_ As Double                  ' вязкость дегазированной нефти
 Private copmressibility_o_1atm_ As Double         ' сжимаемость нефти
 Private ST_oilgas_dyncm_ As Double                ' поверхностное натяжение нефть газ
 Private ST_watgas_dyncm_ As Double                ' поверхностное натяжение вода газ
 Private ST_liqgas_dyncm_ As Double
 ' расчетные параметры газа
 Private z_ As Double                              ' расчетное значение коэффициента сверхсжимаемости
 Private bg_m3m3_ As Double                        ' объемный коэффициент газа
 Private mu_gas_cP_ As Double                      ' вязкость газа при рабочих условиях
 ' расчетные параметры воды
 Private bw_m3m3_ As Double                        ' расчетное значение объемного коэффициента воды
 Private bw_sc_m3m3_ As Double
 Private mu_wat_cP_ As Double                      ' вязкость воды
 Private salinity_ppm_ As Double                   ' соленость воды
 ' параметры потока
 Private q_oil_rc_m3day_ As Double
 Private q_wat_rc_m3day_ As Double
 Private q_gas_rc_m3day_ As Double
 Private qliq_rc_m3day_ As Double
 Private gas_fraction_d_ As Double
 Private mu_mix_cP_ As Double
 Private rho_oil_rc_kgm3_ As Double
 Private rho_wat_rc_kgm3_ As Double
 Private rho_liq_rc_kgm3_ As Double
 Private rho_mix_rc_kgm3_ As Double
 ' набор параметров для температурных расчетов
 Private cw_JkgC_ As Double                        ' water heat capacity  теплоемкость воды
 
 Private heat_capacity_ratio_gas_ As Double
 Private heat_capacity_ratio_oil_ As Double
 Private heat_capacity_ratio_water_ As Double
 
 Private cv_gas_JkgC_ As Double
 Private cp_oil_JkgC_ As Double
 Public Property Get heat_capacity_ratio_gas() As Double
    heat_capacity_ratio_gas = heat_capacity_ratio_gas_
 End Property
   
 Public Property Get fw_fr() As Double
   fw_fr = fw_fr_
 End Property
  
 Public Property Let fw_fr(val As Double)
    If val >= 0 And val <= 1 Then
        fw_fr_ = val
    ElseIf val < 0 Then
        fw_fr_ = 0
    Else
        fw_fr_ = 1
    End If
 End Property
 Public Property Get fw_perc() As Double
   fw_perc = fw_fr_ * 100
 End Property
  
 Public Property Let fw_perc(val As Double)
   fw_fr = val / 100    ' вызываем свойство, чтобы поменять все зависимые флюиды
 End Property
  
 Public Property Get fm_gas_fr() As Double
    fm_gas_fr = mg_kgsec / (mg_kgsec + mo_kgsec + mw_kgsec)
 End Property
 
 Public Function fm_oil_fr() As Double
    fm_oil_fr = mo_kgsec / (mg_kgsec + mo_kgsec + mw_kgsec)
 End Function
 Public Function fm_wat_fr() As Double
    fm_wat_fr = mw_kgsec / (mg_kgsec + mo_kgsec + mw_kgsec)
 End Function
 Public Function polytropic_exponent() As Double
    polytropic_exponent = (fm_gas_fr * heat_capacity_ratio_gas_ * cv_gas_JkgC_ + fm_oil_fr * cv_oil_JkgC + fm_wat_fr * cv_wat_JkgC) / _
                          (fm_gas_fr * cv_gas_JkgC + fm_oil_fr * cv_oil_JkgC + fm_wat_fr * cv_wat_JkgC)
 End Function
  
 Private Sub calc_wc()
    If qliq_sm3day > 0 Then
        fw_fr = q_wat_sm3day / qliq_sm3day
    Else
        fw_fr = 0
    End If
 End Sub
 
 Public Function q_wat_sm3day() As Double
   q_wat_sm3day = qliq_sm3day * fw_fr_
 End Function
  
 Public Function q_gas_sm3day() As Double
   q_gas_sm3day = q_oil_sm3day * rp_m3m3 + q_gas_free_sm3day    ' учитываем наличие свободного газа в потоке
 End Function
 Public Function q_gas_insitu_sm3day() As Double
 ' расход газа в заданных термобарических условиях приведенный к стандартным условиям
   q_gas_insitu_sm3day = (q_gas_sm3day - rs_m3m3 * q_oil_sm3day)
   If q_gas_insitu_sm3day < 0 Then
'
'       If q_gas_insitu_sm3day < -1 Then
'           ' сообщение генерируем только если большая разница
'            addLogMsg "CPVT.q_gas_insitu_sm3day: warning: q_gas_insitu_sm3day  = " & S(q_gas_insitu_sm3day) & " < 0,  q_gas_sm3day = " & S(q_gas_sm3day) & _
'                  ", rs_m3m3 = " & S(rs_m3m3) & _
'                  ", rp_m3m3 = " & S(rp_m3m3) & _
'                  ", q_oil_sm3day = " & S(q_oil_sm3day) & _
'                  "  q_gas_insitu_sm3day set to 0"
'        End If
        q_gas_insitu_sm3day = 0
   End If
 End Function
 Public Function q_gas_rc_m3day() As Double
   q_gas_rc_m3day = q_gas_insitu_sm3day * bg_m3m3_
   If q_gas_rc_m3day < 0 Then q_gas_rc_m3day = 0
 End Function
 Public Function q_oil_sm3day() As Double
   q_oil_sm3day = qliq_sm3day * (1 - fw_fr_)
 End Function
 Public Function q_oil_rc_m3day() As Double
   q_oil_rc_m3day = q_oil_sm3day * bo_m3m3_
 End Function
 Public Function q_wat_rc_m3day() As Double
   q_wat_rc_m3day = q_wat_sm3day * bw_m3m3_
 End Function
 
 Public Function qliq_rc_m3day() As Double
   qliq_rc_m3day = q_wat_rc_m3day + q_oil_rc_m3day
 End Function
   
 Public Function q_mix_rc_m3day() As Double
   q_mix_rc_m3day = q_wat_rc_m3day_ + q_oil_rc_m3day_ + q_gas_rc_m3day_
 End Function
  
 Public Function wm_kgsec() As Double
   wm_kgsec = mg_kgsec + mo_kgsec + mw_kgsec
 End Function
  
 Public Function compressibility_oil_1atm() As Double
    Dim t_K As Double
    Dim p_MPa As Double
           
    t_K = PT_calc_.t_C + const_t_K_min
    p_MPa = PT_calc_.p_atma * const_convert_atma_MPa
    compressibility_oil_1atm = unf_pvt_compressibility_oil_VB_1atm(rs_m3m3_, gamma_g, t_K, gamma_o, p_MPa) * const_convert_atma_MPa
    
 End Function
 
 Public Function compressibility_wat_1atm() As Double
    Dim t_K As Double
    Dim p_MPa As Double
           
    t_K = PT_calc_.t_C + const_t_K_min
    p_MPa = PT_calc_.p_atma * const_convert_atma_MPa
    compressibility_wat_1atm = unf_pvt_compressibility_wat_1atma(p_MPa, t_K, salinity_ppm_)
    ' need to check - water compressibility strongly correlate with Bw - water formation volume factor
    ' but here two different correlations are used
    ' in hope that for water everything should be ok
 End Function
 Public Function compressibility_gas_1atm() As Double
    Dim t_K As Double
    Dim p_MPa As Double
           
    t_K = PT_calc_.t_C + const_t_K_min
    p_MPa = PT_calc_.p_atma * const_convert_atma_MPa
    compressibility_gas_1atm = 1 / p_MPa - 1 / z_ * unf_pvt_dZdp(t_K, p_MPa, gamma_g, z_Kareem)
    compressibility_gas_1atm = compressibility_gas_1atm * const_convert_atma_MPa
 End Function
  
 Public Function co_JkgC() As Double  ' oil heat capacity   теплоемкость нефти  Дж/кг/С
    co_JkgC = cp_oil_JkgC_
 End Function
 Public Function cw_JkgC() As Double   ' water heat capacity  теплоемкость воды
    cw_JkgC = cw_JkgC_
 End Function
 Public Function cg_JkgC() As Double  ' теплоемкость газа gas heat capacity
    cg_JkgC = cp_gas_JkgC
 End Function
 
 Public Function cp_gas_JkgC() As Double
        cp_gas_JkgC = cv_gas_JkgC_ * heat_capacity_ratio_gas_
 End Function
 
 Public Function cv_gas_JkgC() As Double
        cv_gas_JkgC = cv_gas_JkgC_
 End Function
 
 Public Function cv_oil_JkgC() As Double
    cv_oil_JkgC = cp_oil_JkgC_ / heat_capacity_ratio_oil_
 End Function
 
 Public Function cp_oil_JkgC() As Double
    cp_oil_JkgC = cp_oil_JkgC_
 End Function
 Public Function cv_wat_JkgC() As Double
    cv_wat_JkgC = cw_JkgC_ / heat_capacity_ratio_water_
 End Function
 Public Function cp_wat_JkgC() As Double
    cp_wat_JkgC = cw_JkgC_
 End Function
 
 Public Function cliq_JkgC() As Double  ' mixture heat capacity   теплоемкость жидкости  Дж/кг/С
    If q_mix_rc_m3day > 0 Then
         cliq_JkgC = (co_JkgC * mo_kgsec + cw_JkgC * mw_kgsec) / (mw_kgsec + mo_kgsec)
    Else
        cliq_JkgC = co_JkgC
    End If
 End Function
 Public Function cmix_JkgC() As Double  ' mixture heat capacity   теплоемкость жидкости  Дж/кг/С
    If q_mix_rc_m3day > 0 Then
         cmix_JkgC = (cliq_JkgC * (mw_kgsec + mo_kgsec) + cg_JkgC * mg_kgsec) / (mo_kgsec + mw_kgsec + mg_kgsec)
    Else
        cmix_JkgC = co_JkgC
    End If
 End Function
 
 Public Function cJT_Katm() As Double
 ' коэффциент Джоуля Томсона для многофазной смеси
    Dim X As Double
    Dim wm As Double
    Dim dZdT As Double
    Dim TZdZdT As Double
    wm = (mo_kgsec + mw_kgsec + mg_kgsec)
    dZdT = unf_pvt_dZdt(t_calc_K, p_calc_MPaa, gamma_g, z_Kareem, z_)
    TZdZdT = t_calc_K / z_ * dZdT
    If wm > 0 Then
        X = mg_kgsec / (mo_kgsec + mw_kgsec + mg_kgsec)    ' массовая доля газа в потоке
    Else
        X = 0
    End If
    cJT_Katm = 1 / cmix_JkgC * (X / rho_gas_rc_kgm3 * (-TZdZdT) + (1 - X) / rho_liq_rc_kgm3) * const_convert_atma_Pa
 End Function
 
 Public Function oil_API() As Double
    oil_API = 141.5 / gamma_o - 131.5
 End Function
 
 Public Function rho_oil_rc_kgm3() As Double
    Dim msg As String
    If bo_m3m3_ > 0 Then
        rho_oil_rc_kgm3 = 1000 * (gamma_o + rs_m3m3_ * gamma_g * const_rho_air / 1000) / bo_m3m3_
    Else
        ' странная обработка ошибок не при ввода а при расчета - потом надо будет убрать наверное
        msg = "CPVT.rho_oil_rc_kgm3: расчет плотности с неположительным значением Bo_m3m3" & bo_m3m3 & "Значение Bo проигнорировано"
        addLogMsg msg
        rho_oil_rc_kgm3 = 1000 * (gamma_o + rs_m3m3_ * gamma_g * const_rho_air / 1000)
    End If
 End Function
 
 Public Function rho_wat_rc_kgm3() As Double
    Dim msg As String
    If bw_m3m3_ > 0 Then
        rho_wat_rc_kgm3 = 1000 * (gamma_w) / bw_m3m3_
    Else
        ' странная обработка ошибок не при ввода а при расчета - потом надо будет убрать наверное
        msg = "CPVT.rho_wat_rc_kgm3: расчет плотности с неположительным значением Bw_m3m3" & bw_m3m3_ & "Значение Bw проигнорировано"
        addLogMsg msg
        rho_wat_rc_kgm3 = 1000 * (gamma_w)
    End If
 End Function
 Public Function rho_liq_rc_kgm3() As Double
    rho_liq_rc_kgm3 = rho_liq_rc_kgm3_ '(1 - fw_fr) * rho_oil_rc_kgm3 + fw_fr * rho_wat_rc_kgm3
 End Function
 
 
 
 
 
 
 
 
 
 
 
 Public Function rho_gas_rc_kgm3() As Double
    Dim msg As String
    If bg_m3m3_ > 0 Then
        rho_gas_rc_kgm3 = gamma_g * const_rho_air / bg_m3m3_
    Else
        ' странная обработка ошибок не при ввода а при расчета - потом надо будет убрать наверное
        msg = "CPVT.rho_gas_rc_kgm3: расчет плотности с неположительным значением Bg_m3m3" & bg_m3m3 & "Значение Bg проигнорировано"
        addLogMsg msg
        rho_gas_rc_kgm3 = gamma_g * const_rho_air
    End If
 End Function
 Public Function f_g() As Double
    If q_mix_rc_m3day > 0 Then
       f_g = q_gas_rc_m3day / q_mix_rc_m3day
    Else
       f_g = 0
    End If
 End Function
 Public Function rho_mix_rc_kgm3() As Double
    rho_mix_rc_kgm3 = rho_mix_rc_kgm3_  ' rho_liq_rc_kgm3 * (1 - f_g) + rho_gas_rc_kgm3 * f_g
 End Function
 
 Public Function sigma_liq_Nm() As Double
    sigma_liq_Nm = ST_liqgas_dyncm_ * 0.001
 End Function
 Public Function sigma_oil_gas_Nm() As Double
    sigma_oil_gas_Nm = ST_oilgas_dyncm_ * 0.001
 End Function
  
 Public Function sigma_wat_gas_Nm() As Double
    'sigma_wat_gas_Nm = p_sigma_wat_gas_Nm
    sigma_wat_gas_Nm = ST_watgas_dyncm_ * 0.001
 End Function
  
 Public Function t_res_K() As Double
    t_res_K = t_res_C + const_t_K_min
 End Function
   
 ' молярная масса газа   (используется например в штуцере)
 Public Function mg_kgmol() As Double
    mg_kgmol = const_m_a_kgmol * gamma_g
 End Function
 Public Function sal_ppm() As Double
    sal_ppm = salinity_ppm_
 End Function
  
 Public Function rho_oil_sckgm3() As Double
    rho_oil_sckgm3 = gamma_o * const_rho_ref
 End Function
 
 Public Function rho_gas_sckgm3() As Double
    rho_gas_sckgm3 = gamma_g * const_rho_air
 End Function
 Public Function rho_wat_sckgm3() As Double
    rho_wat_sckgm3 = gamma_w * const_rho_ref
 End Function
  
 Public Function rp_full_m3m3() As Double
    If q_oil_sm3day > 0 Then
        rp_full_m3m3 = rp_m3m3_ + q_gas_free_sm3day / q_oil_sm3day
    Else
        rp_full_m3m3 = rp_m3m3_
    End If
 End Function
 
' ----- Rp - GOR  ----------------------------------------------------------------------------------------
Public Property Get rp_m3m3() As Double
    rp_m3m3 = rp_m3m3_
End Property
Property Let rp_m3m3(val As Double)
    If (val >= 0) Then
        rp_m3m3_ = val
        If rp_m3m3_ < rsb_m3m3_ Then   ' проверим, что газовый фактор должен быть больше чем газосодержание
            'addLogMsg "Газовый фактор при вводе больше газосодержания Rp = " & Format(rp_m3m3_, "####0.00") & " < rsb = " & Format(rsb_m3m3_, "#0.00") & ". Газосодержание исправлено"
            rsb_calc_m3m3_ = rp_m3m3_
        End If
    Else
        ' унифицированная реакция на ошибочный ввод ключевых параметров класса
        Dim msg As String, fname As String
        fname = "rp_m3m3"
        msg = class_name_ & "." & fname & ": input - wrong " & fname & " = " & S(val)
        addLogMsg msg
        Err.Raise kErrPVTinput, class_name_ & "." & fname, msg
    End If
End Property
  
' ----- rsb -----------------------------------------------------------------------------------------
Public Property Get rsb_m3m3() As Double
    rsb_m3m3 = rsb_m3m3_
End Property
Property Let rsb_m3m3(val As Double)
    If (val >= 0) Then
        rsb_m3m3_ = val
        rsb_calc_m3m3_ = val
        If rp_m3m3_ < rsb_m3m3_ Then   ' проверим, что газовый фактор должен быть больше чем газосодержание
            'addLogMsg "газосодержания при вводе меньше газового фактора  Rp = " & Format(rp_m3m3_, "#0.00") & " < rsb = " & Format(rsb_m3m3_, "#0.00") & ". Газосодержание исправлено"
            rsb_calc_m3m3_ = rp_m3m3_
        End If
    Else
        ' унифицированная реакция на ошибочный ввод ключевых параметров класса
        Dim msg As String, fname As String
        fname = "rsb_m3m3"
        msg = class_name_ & "." & fname & ": input - wrong " & fname & " = " & S(val)
        addLogMsg msg
        Err.Raise kErrPVTinput, class_name_ & "." & fname, msg
    End If
End Property
Public Function rsb_calc_m3m3() As Double
    rsb_calc_m3m3 = rsb_calc_m3m3_
End Function
 
Public Function set_rp_rsb(ByVal Rpval_m3m3 As Double, ByVal Rsbval_m3m3 As Double) As Boolean
' безопасный с точки зрения начисления штрафов способ установки произвольных значений газового фактора в системе
    If Rpval_m3m3 > 0 Then
        If Rpval_m3m3 >= Rsbval_m3m3 Then
            rp_m3m3_ = Rpval_m3m3
            If Rsbval_m3m3 > 0 Then
                rsb_m3m3_ = Rsbval_m3m3
            Else
                rsb_m3m3_ = Rpval_m3m3
            End If
            rsb_calc_m3m3_ = rsb_m3m3_
            set_rp_rsb = True
        Else
            'addLogMsg "CPVT.set_rp_rsb: Газосодержание при вводе больше газового фактора  Rp = " & Format(Rpval_m3m3, "#0.00") & " < rsb = " & Format(Rsbval_m3m3, "#0.00") & ". Газосодержание исправлено"
            rp_m3m3_ = Rpval_m3m3
            rsb_calc_m3m3_ = Rpval_m3m3
            rsb_m3m3_ = Rsbval_m3m3
            set_rp_rsb = True
        End If
    Else
        If Rpval_m3m3 <= 0 And Rsbval_m3m3 > 0 Then
            rp_m3m3_ = Rsbval_m3m3
            rsb_m3m3_ = Rsbval_m3m3
            rsb_calc_m3m3_ = rsb_m3m3_
            set_rp_rsb = True
        Else
            set_rp_rsb = False
        End If
    End If
    ' устновим все значения для зависимых флюидов
    rp_m3m3 = rp_m3m3
    rsb_m3m3 = rsb_m3m3
End Function
'----- Pb -----------------------------------------------------------------------------------------
Public Function pb_calc_atma() As Double
' функция выдает давление насыщения, которое было получено в ходе расчетов
' может отличатся от того, что было задано при инициализации, если оно было не допустимо
' если не было задано - то оно рассчитывается и выдается расчитанное
    If pb_calc_atma_ > 0 Then       ' ноль не допустим, это значит что значение отсутствует
    ' если известно калибровочное значение при пластовой температуре, то возвращаем его
        pb_calc_atma = pb_calc_atma_
    Else
    ' иначе считаем что получится из расчета по корреляции по газосодержанию
        pb_calc_atma = calc_pb_atma(rsb_m3m3, t_res_C)
    End If
End Function
Public Function rs_m3m3() As Double
    rs_m3m3 = rs_m3m3_
End Function
Public Function bo_m3m3() As Double
    bo_m3m3 = bo_m3m3_
End Function
Public Function bg_m3m3() As Double
    bg_m3m3 = bg_m3m3_
End Function
Public Function bw_m3m3() As Double
    bw_m3m3 = bw_m3m3_
End Function
Public Function mu_oil_cP() As Double
 mu_oil_cP = mu_oil_cP_
End Function
Public Function mu_wat_cP() As Double
 mu_wat_cP = mu_wat_cP_
End Function
Public Function mu_gas_cP() As Double
 mu_gas_cP = mu_gas_cP_
End Function
Public Function mu_liq_cP() As Double
'
' todo надо уточнить как считать вязкость для смеси - быть может надо холдап использовать
'
    Dim fw_rc_fr As Double
    If qliq_rc_m3day > 0 Then
        fw_rc_fr = q_wat_rc_m3day / qliq_rc_m3day
    Else
        fw_rc_fr = fw_fr_
    End If
    
    mu_liq_cP = (mu_oil_cP * (1 - fw_rc_fr) + _
                mu_wat_cP * fw_rc_fr)
End Function
Public Function mu_mix_cP() As Double
    mu_mix_cP = mu_mix_cP_
End Function
' кинематическая вязкость смеси в сантистоксах
Public Function mu_mix_cSt() As Double
    mu_mix_cSt = mu_mix_cP_ / (rho_mix_rc_kgm3_ / 1000)
End Function
' массовый расход нефти
Public Function mo_kgsec() As Double
    mo_kgsec = q_oil_rc_m3day * rho_oil_rc_kgm3 / const_conver_day_sec
End Function
' массовый расход воды
Public Function mw_kgsec() As Double
    mw_kgsec = q_wat_rc_m3day * rho_wat_rc_kgm3 / const_conver_day_sec
End Function
' массовый расход газа
Public Function mg_kgsec() As Double
    mg_kgsec = q_gas_rc_m3day * rho_gas_rc_kgm3 / const_conver_day_sec
End Function
Public Function z() As Double
    z = z_
End Function
Public Function p_calc_atma() As Double
    p_calc_atma = PT_calc_.p_atma
End Function
Public Function p_calc_MPaa() As Double
    p_calc_MPaa = p_calc_atma * const_convert_atma_MPa
End Function
Public Function t_calc_C() As Double
    t_calc_C = PT_calc_.t_C
End Function
Public Function t_calc_K() As Double
    t_calc_K = t_calc_C + const_t_K_min
End Function
Public Function t_calc_F() As Double
    t_calc_F = t_calc_C * 1.8 + 32
End Function
Public Function mu_deadoil_cP() As Double
    mu_deadoil_cP = mu_deadoil_cP_
End Function
'===================================================================================
' функции и процедуры
'===================================================================================
 
 Private Sub Class_Initialize()
        class_name_ = "CPVT"
        PVT_correlation = Standing_based
        gamma_o = 0.86
        gamma_g = 0.6
        gamma_w = 1
        rp_m3m3 = 100
        rsb_m3m3 = 100
        pb_atma = -1  ' по умолчанию нет калибровок, только корреляция
        bob_m3m3 = -1  ' по умолчанию нет калибровок, только корреляция
        muob_cP = -1
        
        t_res_C = 90
        
        fw_perc = 0
        qliq_sm3day = 100
        q_gas_free_sm3day = 0
        ' для начала для простоты инициализируем теплоемкость флюидов как константы
        ' потом можно будет добавить расчет в зависимости от условий
        cw_JkgC_ = 4176
        
        zCorr = z_Kareem
        gas_only = False
        pb_calc_atma_ = 0
        ' heat capacity ratios estimated from perticular multiflash calcs
        ' good idea to improove adding correlations
        heat_capacity_ratio_gas_ = 1.3
        heat_capacity_ratio_oil_ = 1.05
        heat_capacity_ratio_water_ = 1
        
        ksep_fr = 0
        p_ksep_atma = 0
        t_ksep_C = 0
    
 End Sub
 
 Public Sub init_json(json As String)
    Dim d As Dictionary
    Set d = ParseJson(json)
    Call init_dictionary(d)
 End Sub
 
 Public Sub init_dictionary(dict As Dictionary)
 ' expect that dictionary has all main properties with proper names
    Dim gamma_gas As Double
    Dim gamma_oil As Double
    Dim gamma_wat As Double
    Dim rsb_m3m3 As Double
    Dim rp_m3m3 As Double
    Dim pb_atma As Double
    Dim t_res_C As Double
    Dim bob_m3m3 As Double
    Dim muob_cP As Double
    Dim PVTcorr As Integer
    Dim ksep_fr As Double
    Dim p_ksep_atma As Double
    Dim t_ksep_C As Double
    Dim gas_only As Boolean
    Dim errmsg As String
    Dim key As String
On Error Resume Next:
    ' при чтении параметров используем промежуточную переменную key
    ' чтобы иметь возможность более информативно отреагировать на ошибку
    With dict
        key = "gamma_oil"
        If .Exists(key) Then
            gamma_oil = .Item(key)
        Else
            errmsg = "CPVT.init_dictionary. error: " & key & " must be given"
            GoTo er2:
        End If
        
        key = "gamma_gas"
        If .Exists(key) Then
            gamma_gas = .Item(key)
        Else
            errmsg = "CPVT.init_dictionary. error: " & key & " must be given"
            GoTo er2:
        End If
        
        key = "rsb_m3m3"
        If .Exists(key) Then
            rsb_m3m3 = .Item(key)
        Else
            errmsg = "CPVT.init_dictionary. error: " & key & " must be given"
            GoTo er2:
        End If
        
        If .Exists("gamma_wat") Then gamma_wat = .Item("gamma_wat")
        If .Exists("rp_m3m3") Then rp_m3m3 = .Item("rp_m3m3")
        If .Exists("pb_atma") Then pb_atma = .Item("pb_atma")
        If .Exists("t_res_C") Then t_res_C = .Item("t_res_C")
        If .Exists("bob_m3m3") Then bob_m3m3 = .Item("bob_m3m3")
        If .Exists("muob_cP") Then muob_cP = .Item("muob_cP")
        If .Exists("PVTcorr") Then PVTcorr = .Item("PVTcorr")
        If .Exists("ksep_fr") Then ksep_fr = .Item("ksep_fr")
        If .Exists("p_ksep_atma") Then p_ksep_atma = .Item("p_ksep_atma")
        If .Exists("t_ksep_C") Then t_ksep_C = .Item("t_ksep_C")
        If .Exists("gas_only") Then gas_only = .Item("gas_only")
        
    End With
' ловим все ошибки, все должно пройти идеально при дешифровке
On Error GoTo er1:
    ' калибровочный параметр проверяем специально и не даем сохраниться значению по умолчанию
    ' если он неправильно указан (дублируется инициализацией в конструкторе, но все же)
    Call init(gamma_gas, gamma_oil, gamma_wat, rsb_m3m3, pb_atma, bob_m3m3, PVTcorr, t_res_C, rp_m3m3, muob_cP)
    Me.gas_only = gas_only
    Me.ksep_fr = ksep_fr
    Me.p_ksep_atma = p_ksep_atma
    Me.t_ksep_C = t_ksep_C
    If ksep_fr > 0 And ksep_fr <= 1 And p_ksep_atma > 0 And t_ksep_C > 0 Then
        Call mod_after_separation(p_ksep_atma, t_ksep_C, ksep_fr, True)
    End If
    Exit Sub
er1:
    errmsg = "CPVT.init_dictionary. error:" & Err.Description
er2:
    addLogMsg errmsg
    Err.Raise kErrPVTinput, Err.source, errmsg
 
 End Sub
 
 Public Sub init(Optional ByVal gamma_gas As Double = 0.6, _
                 Optional ByVal gamma_oil As Double = 0.86, _
                 Optional ByVal gamma_wat As Double = 1, _
                 Optional ByVal rsb_m3m3 As Double = 100, _
                 Optional ByVal pb_atma As Double = -1, _
                 Optional ByVal bob_m3m3 As Double = -1, _
                 Optional ByVal PVTcorr As PVT_correlation = 0, _
                 Optional ByVal t_res_C As Double = 90, _
                 Optional ByVal rp_m3m3 As Double = -1, _
                 Optional ByVal muob_cP As Double = -1)
        gamma_g = gamma_gas
        gamma_o = gamma_oil
        gamma_w = gamma_wat
        Me.set_rp_rsb rp_m3m3, rsb_m3m3
        Me.pb_atma = pb_atma
        If t_res_C > 0 Then Me.t_res_C = t_res_C
        Me.bob_m3m3 = bob_m3m3
        Me.muob_cP = muob_cP
        PVT_correlation = PVTcorr
 End Sub
 
 Public Function clone() As CPVT
        Dim fl As New CPVT
        Call fl.Copy(Me)
        Set clone = fl
 End Function
 
 Public Sub Copy(fl As CPVT)
 ' all params that define fluid must be copied here
        PVT_correlation = fl.PVT_correlation
        gamma_o = fl.gamma_o
        gamma_g = fl.gamma_g
        gamma_w = fl.gamma_w
        set_rp_rsb fl.rp_m3m3, fl.rsb_m3m3
        pb_atma = fl.pb_atma
        bob_m3m3 = fl.bob_m3m3
        muob_cP = fl.muob_cP
        t_res_C = fl.t_res_C
        fw_fr = fl.fw_fr
        qliq_sm3day = fl.qliq_sm3day
        q_gas_free_sm3day = fl.q_gas_free_sm3day
        gas_only = fl.gas_only
        
 End Sub
Public Sub calc_PVT_PT(pt As PTtype)
        Call calc_PVT(pt.p_atma, pt.t_C)
End Sub
Public Sub calc_PVT(ByVal p_atma As Double, ByVal t_C As Double)
 ' расчет свойств воды нефти и газа при заданных давлении и температуре
    Dim t_K As Double  ' internal K temp
    'PVT properties
    Dim rho_o As Double
    Dim bob_m3m3_sat As Double
    'internal buffers used to store output values
    Dim p_bi As Double
    Dim r_si As Double
    Dim rho_o_sat As Double
    Dim p_fact As Double
    Dim p_offs As Double
    Dim b_fact As Double
    Dim mu_fact As Double
    'Oil pressure in MPa
    Dim p_MPa As Double
    Dim Pb_calbr_MPa As Double
    Dim rsb_calbr_m3m3 As Double
    Dim Bo_calbr_m3m3 As Double
    Dim muo_calibr_cP As Double
    Dim ranges_good As Boolean
    Dim mu_deadoil_cP As Double
    Dim Muo_saturated_cP As Double
On Error GoTo err1:
    t_K = t_C + const_t_K_min
    PT_calc_.p_atma = p_atma
    PT_calc_.t_C = t_C
    Call set_rp_rsb(rp_m3m3_, rsb_m3m3_)  ' init calc variable and eliminate previous calc influence
    rsb_calbr_m3m3 = rsb_calc_m3m3_
    Bo_calbr_m3m3 = bob_m3m3
    muo_calibr_cP = muob_cP
    
    p_MPa = p_atma * const_convert_atma_MPa
    
    Pb_calbr_MPa = pb_atma * const_convert_atma_MPa 'convert user specified bubblepoint pressure
    'for saturated oil calibration is applied by application of factor p_fact to input pressure
    'for undersaturated - by shifting according to p_offs
    'calculate PVT properties
    'calculate water properties at current pressure and temperature
    bw_sc_m3m3_ = gamma_w
    heat_capacity_ratio_gas_ = unf_pvt_gas_heat_capacity_ratio(gamma_g, t_K)
    
    salinity_ppm_ = unf_pvt_Sal_BwSC_ppm(bw_sc_m3m3_)
    bw_m3m3_ = unf_pvt_Bw_m3m3(p_MPa, t_K) '* bw_sc_m3m3_
    mu_wat_cP_ = unf_pvt_viscosity_wat_cP(p_MPa, t_K, salinity_ppm_)
    'if no calibration gas-oil ratio specified, then set it to some very large value and
    'switch of calibration for bubblepoint and oil formation volume factor
    z_ = unf_pvt_Zgas_d(t_K, p_MPa, gamma_g, zCorr)
    bg_m3m3_ = unf_pvt_Bg_z_m3m3(t_K, p_MPa, z_)
    mu_gas_cP_ = unf_pvt_viscosity_gas_cP(t_K, p_MPa, z_, gamma_g)
    If PVT_correlation = Standing_based Then
            mu_deadoil_cP = unf_pvt_viscosity_dead_oil_Beggs_Robinson_cP(t_K, gamma_o) 'dead oil viscosity
            Muo_saturated_cP = unf_pvt_viscosity_saturated_oil_Beggs_Robinson_cP(rsb_calbr_m3m3, mu_deadoil_cP) 'saturated oil viscosity Beggs & Robinson
            p_bi = unf_pvt_pb_Standing_MPa(rsb_calbr_m3m3, gamma_g, t_res_K, gamma_o)    ' считаем давление насыщения по корреляции Standing для пластовой температуры при которой заданны калибровочные значения
            ' дальше ищем калибровочные коэффициенты
            'Calculate bubble point correction factor
            If (Pb_calbr_MPa > 0) Then 'user specified
                p_fact = p_bi / Pb_calbr_MPa
            Else ' not specified, use from correlations
                p_fact = 1
            End If
            If (Bo_calbr_m3m3 > 0) Then 'Calculate oil formation volume factor correction factor
                bob_m3m3_sat = unf_pvt_FVF_Saturated_Oil_Standing_m3m3(rsb_calbr_m3m3, gamma_g, t_res_K, gamma_o)  ' значение по корреляции считаем также для пластовой температуры
                b_fact = (Bo_calbr_m3m3 - 1) / (bob_m3m3_sat - 1)
            Else ' not specified, use from correlations
                b_fact = 1
            End If
            If muo_calibr_cP > 0 Then           ' рассчитаем калибровочный коэффициент для вязкости при давлении насыщения
                mu_fact = muo_calibr_cP / Muo_saturated_cP
            Else
                mu_fact = 1
            End If
            p_bi = unf_pvt_pb_Standing_MPa(rsb_calbr_m3m3, gamma_g, t_K, gamma_o)   ' давление насыщения по корреляции при текущей температуре
            p_MPa = p_MPa * p_fact   ' растянем давление чтобы натянуть его на калиброванное значение
            If p_MPa > p_bi Then 'apply correction to undersaturated oil 'undersaturated oil
                 r_si = rsb_calbr_m3m3   ' результат такое будет
                 bob_m3m3_sat = b_fact * (unf_pvt_FVF_Saturated_Oil_Standing_m3m3(rsb_calbr_m3m3, gamma_g, t_K, gamma_o) - 1) + 1 ' it is assumed that at pressure 1 atma bo=1
                 copmressibility_o_1atm_ = unf_pvt_compressibility_oil_VB_1atm(rsb_calbr_m3m3, gamma_g, t_K, gamma_o, p_MPa) 'calculate compressibility at bubble point pressure
                 bo_m3m3_ = bob_m3m3_sat * Exp(copmressibility_o_1atm_ * (p_bi - p_MPa))
                 mu_oil_cP_ = mu_fact * unf_pvt_viscosity_oil_Vasquez_Beggs_cP(Muo_saturated_cP, p_MPa, p_bi)  'Vesquez&Beggs
            Else 'apply correction to saturated oil
                r_si = unf_pvt_GOR_Standing_m3m3(p_MPa, gamma_g, t_K, gamma_o)
                bo_m3m3_ = b_fact * (unf_pvt_FVF_Saturated_Oil_Standing_m3m3(r_si, gamma_g, t_K, gamma_o) - 1) + 1 ''Standing. it is assumed that at pressure 1 atma bo=1
                mu_oil_cP_ = mu_fact * unf_pvt_viscosity_saturated_oil_Beggs_Robinson_cP(r_si, mu_deadoil_cP)  'Beggs & Robinson
            End If
    End If
    If PVT_correlation = McCain_based Then
            ranges_good = True
            ranges_good = ranges_good And CheckRanges(t_K, "t_K", const_tMcCain_K_min, const_t_K_max, "температура потока вне диапазона для корреляции маккейна", "calc_PVT (McCain)", True)
            mu_deadoil_cP = unf_pvt_viscosity_dead_oil_Standing_cP(t_K, gamma_o)  'dead oil viscosity
            Muo_saturated_cP = unf_pvt_viscosity_saturated_oil_Beggs_Robinson_cP(rsb_calbr_m3m3, mu_deadoil_cP) 'saturated oil viscosity Beggs & Robinson
            p_bi = unf_pvt_pb_Valko_McCain_MPa(rsb_calbr_m3m3, gamma_g, t_res_K, gamma_o)
            'Calculate bubble point correction factor
            If (Pb_calbr_MPa > 0) Then 'user specifie
                p_fact = p_bi / Pb_calbr_MPa
            Else ' not specified, use from correlations
                p_fact = 1
            End If
            p_MPa = p_MPa * p_fact
            copmressibility_o_1atm_ = unf_pvt_compressibility_oil_VB_1atm(rsb_calbr_m3m3, gamma_g, t_res_K, gamma_o, p_bi) 'calculate compressibility at bubble point pressure
            If (Bo_calbr_m3m3 > 0) Then 'Calculate oil formation volume factor correction factor
                  rho_o_sat = unf_pvt_density_McCain_kgm3(p_bi, gamma_g, t_res_K, gamma_o, rsb_calbr_m3m3, p_bi, copmressibility_o_1atm_)    ' тут формально есть зависимость от сжимаемости но реально она не влияет (так как расчет идет при давлении насыщения)
                  bob_m3m3_sat = unf_pvt_FVF_McCain_m3m3(rsb_calbr_m3m3, gamma_g, gamma_o * const_rho_ref, rho_o_sat)
                  b_fact = (Bo_calbr_m3m3 - 1) / (bob_m3m3_sat - 1)
            Else ' not specified, use from correlations
                  b_fact = 1
            End If
            p_bi = unf_pvt_pb_Valko_McCain_MPa(rsb_calbr_m3m3, gamma_g, t_K, gamma_o)
            r_si = unf_pvt_GOR_Velarde_m3m3(p_MPa, p_bi, gamma_g, t_K, gamma_o, rsb_calbr_m3m3)
            If p_MPa > p_bi Then 'apply correction to undersaturated oil
                  copmressibility_o_1atm_ = unf_pvt_compressibility_oil_VB_1atm(rsb_calbr_m3m3, gamma_g, t_K, gamma_o, p_MPa)  'calculate compressibility at bubble point pressure
                  rho_o_sat = unf_pvt_density_McCain_kgm3(p_bi, gamma_g, t_K, gamma_o, rsb_calbr_m3m3, p_bi, copmressibility_o_1atm_)
                  bob_m3m3_sat = unf_pvt_FVF_McCain_m3m3(rsb_calbr_m3m3, gamma_g, gamma_o * const_rho_ref, rho_o_sat)
                  bob_m3m3_sat = b_fact * (bob_m3m3_sat - 1) + 1 ' it is assumed that at pressure 1 atma bo=1
                  bo_m3m3_ = bob_m3m3_sat * Exp(copmressibility_o_1atm_ * (p_bi - p_MPa))
            Else 'apply correction to saturated oil
                  rho_o = unf_pvt_density_McCain_kgm3(p_MPa, gamma_g, t_K, gamma_o, r_si, p_bi, copmressibility_o_1atm_)
                  bo_m3m3_ = b_fact * (unf_pvt_FVF_McCain_m3m3(r_si, gamma_g, gamma_o * const_rho_ref, rho_o) - 1) + 1 ' it is assumed that at pressure 1 atma bo=1
            End If
            If muo_calibr_cP > 0 Then           ' рассчитаем калибровочный коэффициент для вязкости при давлении насыщения
                  If (rsb_calbr_m3m3 < 350) Then
                       mu_fact = muo_calibr_cP / unf_pvt_viscosity_oil_Standing_cP(rsb_calbr_m3m3, mu_deadoil_cP, p_bi, p_bi)
                  Else
                        mu_fact = muo_calibr_cP / Muo_saturated_cP
                  End If
            Else
                  mu_fact = 1
            End If
            If (rsb_calbr_m3m3 < 350) Then 'Calculate oil viscosity acoording to Standing
                  mu_oil_cP_ = mu_fact * unf_pvt_viscosity_oil_Standing_cP(r_si, mu_deadoil_cP, p_MPa, p_bi)
            Else 'Calculate according to Begs&Robinson (saturated) and Vasquez&Begs (undersaturated)
               If p_MPa > p_bi Then 'undersaturated oil
                  mu_oil_cP_ = mu_fact * unf_pvt_viscosity_oil_Vasquez_Beggs_cP(Muo_saturated_cP, p_MPa, p_bi)
               Else 'saturated oil
                 'Beggs & Robinson
                 mu_oil_cP_ = mu_fact * unf_pvt_viscosity_saturated_oil_Beggs_Robinson_cP(r_si, mu_deadoil_cP)
               End If
            End If
    End If
    If PVT_correlation = 2 Then  'Debug mode. Linear Rs and bo vs P, Pb_calbr_atma should be specified.
         'gas properties
         z_ = 0.95 'ideal gas
         bg_m3m3_ = unf_pvt_Bg_z_m3m3(t_K, p_MPa, z_)
         mu_gas_cP_ = 0.0000000001
         p_fact = 1         'Set to default. b_rb should be specified by user!
         p_offs = 0
         If Pb_calbr_MPa <= 0 Then
            ' can not be estimated without calibration properties
            Err.Raise kErrPVTinput, "CPVT.calc_PVT", "PVT correlation = 2 without Pb input not allowed"
         End If
         p_bi = Pb_calbr_MPa
         If p_MPa > (p_bi) Then 'undersaturated oil
            r_si = rsb_calbr_m3m3
         Else 'saturate
            r_si = p_MPa / Pb_calbr_MPa * rsb_calbr_m3m3
         End If
         'if bob_m3m3 is not specified by the user then
         'set bob_m3m3 so, that oil density, recalculated with Rs_m3m3 would be equal to dead oil density
         If (Bo_calbr_m3m3 <= 0) Then
            addLogMsg ("warning:CPVT.calc_PVT, PVT correlation = 2 without Bob input")
            bo_m3m3_ = (1 + r_si * (gamma_g * const_rho_air) / (gamma_o * const_rho_ref))
         Else
            If p_MPa > (p_bi) Then 'undersaturated oil
                bo_m3m3_ = Bo_calbr_m3m3
            Else 'saturate
                bo_m3m3_ = 1 + (Bo_calbr_m3m3 - 1) * ((p_MPa - const_convert_atma_MPa) / (p_bi - const_convert_atma_MPa))
            End If
         End If
         If muo_calibr_cP >= 0 Then
             mu_oil_cP_ = muo_calibr_cP
         Else
            addLogMsg ("warning:CPVT.calc_PVT, PVT correlation = 2 without Muob input")
            mu_oil_cP_ = 1
         End If
    End If
    'Assign output variables
    pb_calc_atma_ = p_bi / p_fact / const_convert_atma_MPa
   ' pb_atma_ = pb_calc_atma_   ' corrected by issue #34
    rs_m3m3_ = r_si
    mu_deadoil_cP_ = mu_deadoil_cP
    q_oil_rc_m3day_ = qliq_sm3day * (1 - fw_fr_) * bo_m3m3_   ' для ускорения расчетов потом все что можно подсчитаем тут
    q_wat_rc_m3day_ = qliq_sm3day * fw_fr_ * bw_m3m3_
    q_gas_rc_m3day_ = (qliq_sm3day * (1 - fw_fr_) * rp_m3m3_ + q_gas_free_sm3day - rs_m3m3_ * qliq_sm3day * (1 - fw_fr_)) * bg_m3m3_
    qliq_rc_m3day_ = q_wat_rc_m3day_ + q_oil_rc_m3day_
    If (q_wat_rc_m3day_ + q_oil_rc_m3day_ + q_gas_rc_m3day_) > 0 Then
        gas_fraction_d_ = q_gas_rc_m3day_ / (q_wat_rc_m3day_ + q_oil_rc_m3day_ + q_gas_rc_m3day_)
        If qliq_rc_m3day_ > 0 Then
            mu_mix_cP_ = (mu_oil_cP_ * q_oil_rc_m3day_ / qliq_rc_m3day_ + _
                      mu_wat_cP_ * q_wat_rc_m3day_ / qliq_rc_m3day_) * (1 - gas_fraction_d_) + _
                      mu_gas_cP_ * (gas_fraction_d_)
        Else
            mu_mix_cP_ = mu_gas_cP_
        End If
    Else
        gas_fraction_d_ = 0
        mu_mix_cP_ = 0
    End If
    rho_oil_rc_kgm3_ = 1000 * (gamma_o + rs_m3m3_ * gamma_g * const_rho_air / 1000) / bo_m3m3_
    rho_wat_rc_kgm3_ = 1000 * (gamma_w) / bw_m3m3_
    rho_liq_rc_kgm3_ = (1 - fw_fr_) * rho_oil_rc_kgm3 + fw_fr_ * rho_wat_rc_kgm3
    rho_mix_rc_kgm3_ = rho_liq_rc_kgm3 * (1 - f_g) + rho_gas_rc_kgm3 * f_g
    Call calc_ST(p_atma, t_C)
    
    cv_gas_JkgC_ = z_ * const_r / (mg_kgmol * (heat_capacity_ratio_gas_ - 1))
    cp_oil_JkgC_ = ((0.002 * t_C - 1.429) * gamma_o + 0.00267 * t_C + 3.49) * 1000   ' http://www.jmcampbell.com/tip-of-the-month/2014/04/simple-equations-to-approximate-changes-to-the-properties-of-crude-oil-with-changing-temperature/
    
    Exit Sub
err1:
    Dim errmsg As String
    errmsg = "Error:CPVT.calc_PVT:" & Err.Description
    addLogMsg (errmsg)
    Err.Raise kErrPVTcalc, "CPVT.calc_PVT", errmsg
End Sub
Private Sub calc_ST(ByVal p_atma As Double, ByVal t_C As Double)
' calculate surface tension according Baker Sverdloff correlation
On Error GoTo err1:
'Расчет коэффициента поверхностного натяжения газ-нефть
    Dim ST68 As Double, ST100 As Double
    Dim STw74 As Double, STw280 As Double
    Dim Tst As Double, Tstw As Double
    Dim STo As Double, STw As Double, st As Double
    Dim t_F As Double
    Dim P_psia As Double, p_MPa As Double
        t_F = t_C * 1.8 + 32
        P_psia = p_atma / 0.068046
        p_MPa = p_atma / 10
        ST68 = 39 - 0.2571 * oil_API
        ST100 = 37.5 - 0.2571 * oil_API
        If t_F < 68 Then
            STo = ST68
        Else
            Tst = t_F
            If t_F > 100 Then Tst = 100
            STo = (68 - (((Tst - 68) * (ST68 - ST100)) / 32)) * Exp(-0.00086306 * P_psia)
            ' https://petrowiki.org/Interfacial_tension
            'If STo < 0 Then STo = ST68
        End If
        'Расчет коэффициента поверхностного натяжения газ-вода  (два способа)
        STw74 = (75 - (1.108 * (P_psia) ^ 0.349))
        STw280 = (53 - (0.1048 * (P_psia) ^ 0.637))
        If t_F < 74 Then
            STw = STw74
        Else
            Tstw = t_F
            If t_F > 280 Then Tstw = 280
            STw = STw74 - (((Tstw - 74) * (STw74 - STw280)) / 206)
        End If
        ' далее второй способ
        STw = 10 ^ (-(1.19 + 0.01 * p_MPa)) * 1000
        ' Расчет коэффициента поверхностного натяжения газ-жидкость
        st = (STw * fw_fr_) + STo * (1 - fw_fr_)
        ST_oilgas_dyncm_ = STo
        ST_watgas_dyncm_ = STw
        ST_liqgas_dyncm_ = st
    Exit Sub
err1:
    Dim errmsg As String
    errmsg = "Error:CPVT.calc_ST:" & Err.Description
    addLogMsg (errmsg)
    Err.Raise kErrPVTcalc, "CPVT.calc_ST", errmsg
End Sub
Public Function calc_rs_m3m3(ByVal p_atma As Double, ByVal t_C As Double) As Double
'function calculates solution gas oil ratio
    Call calc_PVT(p_atma, t_C)
    calc_rs_m3m3 = rs_m3m3_
End Function
Public Function calc_pb_atma(ByVal rsb_m3m3 As Double, ByVal t_C As Double) As Double
'function calculates oil bubble point pressure
    Call set_rp_rsb(rsb_m3m3, rsb_m3m3)
'    rsb_m3m3_ = rsb_m3m3
    Call calc_PVT(1, t_C)
    calc_pb_atma = pb_calc_atma_
End Function
Public Function calc_bo_m3m3(ByVal p_atma As Double, ByVal t_C As Double) As Double
'Function calculates oil formation volume factor
    Call calc_PVT(p_atma, t_C)
    calc_bo_m3m3 = bo_m3m3_
End Function
Public Function calc_mu_oil_cP(ByVal p_atma As Double, ByVal t_C As Double) As Double
'function calculates oil viscosity
    Call calc_PVT(p_atma, t_C)
    calc_mu_oil_cP = mu_oil_cP_
End Function
Public Function gas_fraction_d(Optional ByVal Ksep As Double = 0) As Double
' метод расчета доли газа в потоке для заданной жидкости при заданных условиях
' предполагается что свойства нефти газа и воды уже расчитаны и заданы при необходимых условиях
On Error GoTo err1:
    Dim q_mix_ As Double
    gas_fraction_d = 0
    q_mix_ = q_mix_rc_m3day   ' сохраним чтобы немного сэкономить на проверку нулевого значения
    If q_mix_ > 0 And Ksep >= 0 And Ksep < 1 Then
        gas_fraction_d = q_gas_rc_m3day * (1 - Ksep) / (q_wat_rc_m3day + q_oil_rc_m3day + q_gas_rc_m3day * (1 - Ksep))
    End If
    Exit Function
err1:
    Dim errmsg As String
    errmsg = "Error:CPVT.gas_fraction_d:" & Err.Description
    addLogMsg errmsg
    gas_fraction_d = 0
End Function
Public Function p_gas_fraction_atma(FreeGas As Double, t_C As Double, Optional Es As Double = 0, Optional P_init_atma As Double = 300) As Double
    'P_init     - давление инициализации, атм
    'FreeGas    - доля газ на приеме целевая
    'Es         - коэффициент сепарации насоса
    Dim p1 As Double
    Dim p2 As Double
    Dim max_iter As Integer, i As Integer
    Dim e As Double
    Dim p_gas As Double, p As Double
    max_iter = 100
    e = 0.0001
    p1 = P_init_atma
    p2 = 0
On Error GoTo err1:
    For i = 1 To max_iter
        p = (p1 + p2) / 2
        Call calc_PVT(p, t_C)
        p_gas = gas_fraction_d(Es)
        If Abs(p_gas - FreeGas) <= e Then Exit For
        If p_gas > FreeGas Then
           p2 = p
        Else
           p1 = p
        End If
    Next
    p_gas_fraction_atma = p
    Exit Function
err1:
    p_gas_fraction_atma = 0
End Function
Public Function rp_gas_fraction_m3m3(FreeGas As Double, p_atma As Double, t_C As Double, Optional Es As Double = 0, Optional Rp_init_m3m3 As Double = 500) As Double
    'P_init     - давление инициализации, атм
    'FreeGas    - доля газ на приеме целевая
    'Es         - коэффициент сепарации насоса
    Dim G1 As Double
    Dim g2 As Double
    Dim max_iter As Integer, i As Integer
    Dim e As Double
    Dim p_gas As Double, g As Double
    Dim rsb_back As Double
    max_iter = 100
    e = 0.0001
    G1 = Rp_init_m3m3
    g2 = 0
    rsb_back = rsb_m3m3_
On Error GoTo err1:
    For i = 1 To max_iter
        g = (G1 + g2) / 2
        Call set_rp_rsb(g, rsb_back)
'        rsb_m3m3 = rsb_back
'        rp_m3m3 = g
        Call calc_PVT(p_atma, t_C)
        p_gas = gas_fraction_d(Es)
        If Abs(p_gas - FreeGas) <= e Then Exit For
        If p_gas > FreeGas Then
           G1 = g
        Else
           g2 = g
        End If
    Next
    rp_gas_fraction_m3m3 = g
    Exit Function
err1:
    rp_gas_fraction_m3m3 = 0
End Function
Public Function get_clone_mod_after_separation(p_atma As Double, _
                                               t_C As Double, Ksep As Double, _
                                Optional ByVal GasGoesIntoSolution As Boolean = False) As CPVT
    Dim newfluid As CPVT
    Set newfluid = Me.clone
    Call newfluid.mod_after_separation(p_atma, t_C, Ksep, GasGoesIntoSolution)
    Set get_clone_mod_after_separation = newfluid
End Function
Public Sub mod_after_separation(ByVal p_atma As Double, _
                                ByVal t_C As Double, _
                                ByVal Ksep As Double, _
                       Optional ByVal GasGoesIntoSolution As Boolean = False, _
                       Optional ByVal ksep_liq As Double = 0, _
                       Optional ByVal ksep_water As Double = 0)
                       
' функция модификации свойств нефти после сепарации
' удаление части газа меняет свойства нефти - причем добавление газа свойства не трогает
' на входе условия при которых проходила сепарация
' ksep_liq доля жидкости выкинутая из потока
' ksep_water доля воды выкинутая из потока
    Dim Rs As Double
    Dim Bo As Double
    Dim Pb_Rs_curve As New CInterpolation ' хранилище кривой зависимости газосодержания от давления насыщения
    Dim Bo_Rs_curve As New CInterpolation
    Dim pb_atma_tab As Double, rsb_m3m3_tab As Double, Bo_m3m3_tab As Double
    Dim Delta As Double
    Dim i As Integer
    Const N = 10
    Dim Rpnew_with_Ksep As Double   ' новый ГФ с учетом сепарации газа
    Dim Rpnew_Ksep_1 As Double      ' новый ГФ без учета сепарации
    Dim Rpnew As Double
        ' найдем сколько газа осталось в растворе при условиях сепарации
On Error GoTo err1:
        
    With Me
        Rs = .calc_rs_m3m3(p_atma, t_C)
        Bo = .calc_bo_m3m3(p_atma, t_C)
        
        ' оценим как изменится газовый фактор за счет ухода части газа из потока
        ' оцениваем двумя способами - буду влиять на работу опции растворения газа (фазовой неравновесности)
        '   - с учетом сепарации (показывает новый ГФ если газ может потом растворяться)
        '   - без учета сепарации (Ksep = 1 показывает ГФ если газ может только сжиматься)
        
        Rpnew_with_Ksep = .rp_m3m3 - (.rp_m3m3 - Rs) * Ksep
        Rpnew_Ksep_1 = .rp_m3m3 - (.rp_m3m3 - Rs)
        q_gas_free_sm3day = q_gas_free_sm3day * (1 - Ksep)
        
        
        Delta = (.pb_calc_atma - 1) / N    ' считать будет только в диапазоне где определены Pb за ним будет линейно экстраполировать
        ' запишем зависимость газосодержания от давления насыщения на память
        For i = 0 To N
            pb_atma_tab = 1 + Delta * i
            rsb_m3m3_tab = .calc_rs_m3m3(pb_atma_tab, .t_res_C)
            Pb_Rs_curve.AddPoint rsb_m3m3_tab, pb_atma_tab
            Bo_m3m3_tab = .calc_bo_m3m3(pb_atma_tab, .t_res_C)
            Bo_Rs_curve.AddPoint rsb_m3m3_tab, Bo_m3m3_tab
        Next i
        ' найдем сколько всего газа осталось в потоке
        
        If GasGoesIntoSolution Then   ' тогда газ успеет растворится
            Rpnew = Rpnew_with_Ksep
        Else                                   ' газ не растворяется, то же самое, что Ксеп = 1
            Rpnew = Rpnew_Ksep_1
        End If
        
        If Rpnew < .rsb_m3m3 Then
            ' Если газовый фактор становится меньше газосодержания, тогда надо скорректировать газосодержание и давление насыщения,
            ' которое будет от него зависеть
            .pb_atma = Pb_Rs_curve.getPoint(Rpnew)
            .bob_m3m3 = Bo_Rs_curve.getPoint(Rpnew)
            .rsb_m3m3 = Rpnew
            ' иначе газа из раствора не сепарировался - свойства не менялись ничего делать не надо
        End If
        ' итоговый газовый фактор всегда с учетом сепараци
        .rp_m3m3 = Rpnew_with_Ksep
    End With
    
    qliq_sm3day = qliq_sm3day * (1 - ksep_liq)
    
    Exit Sub
err1:
    Dim errmsg As String
    errmsg = "Error:CPVT.mod_after_separation:" & Err.Description
    addLogMsg errmsg
    Err.Raise kErrPVTcalc, "CPVT.mod_after_separation", errmsg
End Sub
' деление потока на две части по заданным коэффициентам сепарации
Public Function divide_flux(psep_atma As Double, _
                            tsep_C As Double, _
                            ksep_gas As Double, _
                            ksep_oil As Double, _
                            ksep_wat As Double, _
                            Optional tubing As Boolean = True) As CPVT
    Dim fl As CPVT
    Dim Rs As Double
    Dim Bo As Double
    Dim pb As Double
    Dim muo As Double
    Dim qgf As Double
     
    Call calc_PVT(psep_atma, tsep_C)
    Rs = rs_m3m3
    Bo = bo_m3m3
    muo = mu_oil_cP
    qgf = q_gas_free_sm3day
    pb = calc_pb_atma(Rs, tsep_C)
    
    Set fl = clone
    fl.rsb_m3m3 = Rs
    fl.bob_m3m3 = Bo
    fl.pb_atma = pb
    fl.muob_cP = muo
    
    If Not tubing Then
        ksep_gas = 1 - ksep_gas
        ksep_oil = 1 - ksep_oil
        ksep_wat = 1 - ksep_wat
    End If
    
    fl.qliq_sm3day = qliq_sm3day * fw_fr * ksep_wat + qliq_sm3day * (1 - fw_fr) * ksep_oil
    fl.fw_fr = qliq_sm3day * fw_fr * ksep_oil / (qliq_sm3day * fw_fr * ksep_wat + qliq_sm3day * (1 - fw_fr) * ksep_oil)
    fl.rp_m3m3 = fl.rsb_m3m3 + (qgf * ksep_gas) / fl.q_oil_sm3day
    
    Set divide_flux = fl
    
End Function

