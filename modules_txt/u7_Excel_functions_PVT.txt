'=======================================================================================
'Unifloc 7.34 december                                  khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2021
'
'=======================================================================================
'PVT UDF  (user defined functions for PVT calculation)
Option Explicit
'description_to_manual      - для автогенерации
' function for calculating all PVT properties of oil at a given
' pressure and temperature
Public Function PVT_calc( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String, _
   Optional ByVal param As String = "")
' p_atma - pressure, atm
' t_C - temperature, C.
' PVT_prop - static fluid properties - densities rsb, etc.
' use encode_PVT to generate
' param - set of calculation options as json string
'
' Returns values of all PVT properties
' for the given thermobaric conditions.
'description_end
    Const nv = 1
On Error GoTo err1:
    Dim res(0 To 1, 0 To nv) As String ' must be string array for correct output in 2016 office for long str (>256)
    Dim resd As New Dictionary
    ' param dictionary and settings variables with default values
    Dim prmd As Dictionary
    Dim show_log As Boolean
    Dim show_array As Boolean
    ' auxiliary variables
    Dim i As Integer
    Dim fluid As New CPVT
    
    show_log = True
    Call fluid.init_feed(PVT_prop)
On Error GoTo err2:
    Set prmd = param_to_dict(param)
    show_log = prmd(prm_show_log)
    show_array = prmd(prm_show_array)
' param read done start calc
On Error GoTo err1:
    Call fluid.calc_PVT(p_atma, t_C)
On Error Resume Next
    With fluid
        resd.Add "rs_m3m3", .rs_m3m3
        resd.Add "pb_atma", .pb_calc_atma
        resd.Add "bo_m3m3", .bo_m3m3
        resd.Add "bg_m3m3", .bg_m3m3
        resd.Add "bw_m3m3", .bw_m3m3
        resd.Add "mu_oil_cP", .mu_oil_cP
        resd.Add "mu_gas_cP", .mu_gas_cP
        resd.Add "mu_wat_cP", .mu_wat_cP
        resd.Add "rho_oil_rc_kgm3", .rho_oil_rc_kgm3
        resd.Add "rho_gas_rc_kgm3", .rho_gas_rc_kgm3
        resd.Add "rho_wat_rc_kgm3", .rho_wat_rc_kgm3
        resd.Add "compressibility_oil_1atm", .compressibility_oil_1atm
        resd.Add "compressibility_gas_1atm", .compressibility_gas_1atm
        resd.Add "compressibility_wat_1atm", .compressibility_wat_1atm
        resd.Add "sigma_liq_Nm", .sigma_liq_Nm
        resd.Add "sigma_oil_gas_Nm", .sigma_oil_gas_Nm
        resd.Add "sigma_wat_gas_Nm", .sigma_wat_gas_Nm
        resd.Add "cp_oil_JkgC", .cp_oil_JkgC
        resd.Add "cp_gas_JkgC", .cp_gas_JkgC
        resd.Add "cv_gas_JkgC", .cv_gas_JkgC
        resd.Add "cp_wat_JkgC", .cp_wat_JkgC
        resd.Add "z", .z
        resd.Add "sal_ppm", .sal_ppm
    End With
    res(0, 0) = ConvertToJson(resd): res(1, 0) = "json"
err1done:
    res(0, 1) = fluid.log_.get_str_safe(show_log)
    res(1, 1) = "log"
    If show_array Then
        PVT_calc = res
    Else
        PVT_calc = res(0, 0)
    End If
    Exit Function
err1:
    For i = 0 To nv
        res(0, i) = -1
    Next i
    Call fluid.add_log_msg("error: " & Err.Description)
    Resume err1done:
err2:
    Call fluid.add_log_msg("warning: some error while param read detected " & Err.Description)
    Resume Next:
End Function
'description_to_manual      - для автогенерации
' функция расчета объемного коэффициента газа
Public Function PVT_bg_m3m3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение объемного коэффициента газа, м3/м3
' для заданных термобарических условий.
' В основе расчета корреляция для z факотора
'description_end
    Dim fluid As New CPVT
On Error GoTo er1:
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_bg_m3m3 = fluid.bg_m3m3
    Exit Function
er1:
    PVT_bg_m3m3 = "error"
End Function
'description_to_manual      - для автогенерации
' расчет объемного коэффициента нефти
Public Function PVT_bo_m3m3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение объемного коэффициента нефти, м3/м3
' для заданных термобарических условий.
'description_end
    Dim fluid As New CPVT
On Error GoTo er1:
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_bo_m3m3 = fluid.bo_m3m3
    Exit Function
er1:
    PVT_bo_m3m3 = "error"
End Function
'description_to_manual      - для автогенерации
' расчет объемного коэффициента воды
Public Function PVT_bw_m3m3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение объемного коэффициента воды, м3/м3
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_bw_m3m3 = fluid.bw_m3m3
    
    Exit Function
er1:
    PVT_bw_m3m3 = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет солености воды
Public Function PVT_salinity_ppm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение солености воды, ppm
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_salinity_ppm = fluid.sal_ppm
    
    Exit Function
er1:
    PVT_salinity_ppm = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет вязкости нефти
Public Function PVT_mu_oil_cP( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение вязкости нефти, сП
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_mu_oil_cP = fluid.mu_oil_cP
    
    Exit Function
er1:
    PVT_mu_oil_cP = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет вязкости газа
Public Function PVT_mu_gas_cP( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение вязкости газа, сП
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_mu_gas_cP = fluid.mu_gas_cP
    
    Exit Function
er1:
    PVT_mu_gas_cP = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет вязкости воды
Public Function PVT_mu_wat_cP( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение вязкости воды, сП
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_mu_wat_cP = fluid.mu_wat_cP
    
    Exit Function
er1:
    PVT_mu_wat_cP = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет газосодержания
Public Function PVT_rs_m3m3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение газосодержания, м3/м3
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_rs_m3m3 = fluid.rs_m3m3
    
    Exit Function
er1:
    PVT_rs_m3m3 = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет коэффициента сверхсжимаемости газа
Public Function PVT_z( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Результат - z фактор газа.
'           коэффициент сверхсжимаемости газа,
'           безразмерная величина
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_z = fluid.z
    
    Exit Function
er1:
    PVT_z = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет плотности нефти в рабочих условиях
Public Function PVT_rho_oil_kgm3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - плотность нефти
'           при заданных термобарических условиях, кг/м3.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_rho_oil_kgm3 = fluid.rho_oil_rc_kgm3
    
    Exit Function
er1:
    PVT_rho_oil_kgm3 = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет плотности газа в рабочих условиях
Public Function PVT_rho_gas_kgm3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число - плотность газа
'           при заданных термобарических условиях, кг/м3.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_rho_gas_kgm3 = fluid.rho_gas_rc_kgm3
    Exit Function
er1:
    PVT_rho_gas_kgm3 = "error"
End Function
'description_to_manual      - для автогенерации
' расчет плотности воды в рабочих условиях
Public Function PVT_rho_wat_kgm3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число - плотность воды
'           при заданных термобарических условиях, кг/м3.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_rho_wat_kgm3 = fluid.rho_wat_rc_kgm3
    
    Exit Function
er1:
    PVT_rho_wat_kgm3 = "error"
    
End Function
'description_to_manual      - для автогенерации
' Расчет давления насыщения
Public Function PVT_pb_atma( _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число - давление насыщения.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(1, t_C)
    PVT_pb_atma = fluid.pb_calc_atma
    
    Exit Function
er1:
    PVT_pb_atma = "error"
    
End Function
'description_to_manual      - для автогенерации
' Расчет газосодержания по давлению насыщения
Public Function PVT_rsb_m3m3( _
            ByVal pb_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' pb_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число - давление насыщения.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    fluid.set_rp_rsb 500, 500
    fluid.pb_atma = -1
    Call fluid.calc_PVT(pb_atma, t_C)
    PVT_rsb_m3m3 = fluid.rs_m3m3
    
    Exit Function
er1:
    PVT_rsb_m3m3 = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет коэффициента поверхностного натяжения нефть - газ
Public Function PVT_ST_oilgas_Nm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения нефть - газ, Нм
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_ST_oilgas_Nm = fluid.sigma_oil_gas_Nm
    
    Exit Function
er1:
    PVT_ST_oilgas_Nm = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет коэффициента поверхностного натяжения вода - газ
Public Function PVT_ST_watgas_Nm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения вода - газ, Нм
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_ST_watgas_Nm = fluid.sigma_wat_gas_Nm
    
    Exit Function
er1:
    PVT_ST_watgas_Nm = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет коэффициента поверхностного натяжения жидкость - газ
Public Function PVT_ST_liqgas_Nm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_ST_liqgas_Nm = fluid.sigma_liq_Nm
    
    Exit Function
er1:
    PVT_ST_liqgas_Nm = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет теплоемкости нефти при постоянном давлении cp
Public Function PVT_cp_oil_JkgC( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_cp_oil_JkgC = fluid.cp_oil_JkgC
    
    Exit Function
er1:
    PVT_cp_oil_JkgC = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет теплоемкости газа при постоянном давлении cp
Public Function PVT_cp_gas_JkgC( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_cp_gas_JkgC = fluid.cp_gas_JkgC
    
    Exit Function
er1:
    PVT_cp_gas_JkgC = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет теплоемкости газа при постоянном давлении cp
Public Function PVT_cv_gas_JkgC( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_cv_gas_JkgC = fluid.cv_gas_JkgC
    
    Exit Function
er1:
    PVT_cv_gas_JkgC = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет теплоемкости воды при постоянном давлении cp
Public Function PVT_cp_wat_JkgC( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma   - давление, атм
' t_C      - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_cp_wat_JkgC = fluid.cp_wat_JkgC
    
    Exit Function
er1:
    PVT_cp_wat_JkgC = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет сжимаемости воды
Public Function PVT_compressibility_wat_1atm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_compressibility_wat_1atm = fluid.compressibility_wat_1atm
    
    Exit Function
er1:
    PVT_compressibility_wat_1atm = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет сжимаемости нефти
Public Function PVT_compressibility_oil_1atm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_compressibility_oil_1atm = fluid.compressibility_oil_1atm
    
    Exit Function
er1:
    PVT_compressibility_oil_1atm = "error"
    
End Function
'description_to_manual      - для автогенерации
' расчет сжимаемости нефти
Public Function PVT_compressibility_gas_1atm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
On Error GoTo er1:
    Dim fluid As New CPVT
    Call fluid.init_feed(PVT_prop)
    Call fluid.calc_PVT(p_atma, t_C)
    PVT_compressibility_gas_1atm = fluid.compressibility_gas_1atm
    
    Exit Function
er1:
    PVT_compressibility_gas_1atm = "error"
    
End Function
'description_to_manual      - для автогенерации
' функция расчета параметров потока
Public Function feed_calc( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal param As String = "")
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' param      - параметры расчета и вывода результатов
' результат  - массив всех расчетных значений,
'              с подписями во второй строке
'description_end
    Const nv = 1
On Error GoTo err1:
    Dim fluid_stream As New CPVT
    Dim res(0 To 1, 0 To nv) As Variant
    Dim resd As New Dictionary
    Dim prmd As Dictionary
    Dim show_log As Boolean
    Dim show_array As Boolean
    Dim i As Integer
    
    show_log = True
    With fluid_stream
        Call .init_feed(feed)
        On Error GoTo err2:
            Set prmd = param_to_dict(param)
            show_log = prmd(prm_show_log)
            show_array = prmd(prm_show_array)
        
        ' param read done start calc
        On Error GoTo err1:
            Call .calc_PVT(p_atma, t_C)
        On Error Resume Next
        
            ' prepare output
            resd.Add "q_mix_rc_m3day", .q_mix_rc_m3day
            resd.Add "q_oil_rc_m3day", .q_oil_rc_m3day
            resd.Add "q_wat_rc_m3day", .q_wat_rc_m3day
            resd.Add "q_gas_rc_m3day", .q_gas_rc_m3day
            resd.Add "gas_fraction_d", .gas_fraction_d
            resd.Add "rho_mix_rc_kgm3", .rho_mix_rc_kgm3
            resd.Add "mu_mix_cP", .mu_mix_cP
            resd.Add "mo_kgsec", .mo_kgsec
            resd.Add "mw_kgsec", .mw_kgsec
            resd.Add "mg_kgsec", .mg_kgsec
            resd.Add "mg_kgmol", .mg_kgmol
            resd.Add "cmix_JkgC", .cmix_JkgC
            resd.Add "cJT_Katm", .cJT_Katm
            
                        
            res(0, 0) = ConvertToJson(resd): res(1, 0) = "json"
err1done:
            res(0, 1) = .log_.get_str_safe(show_log)
            res(1, 1) = "log"
            If show_array Then
                feed_calc = res
            Else
                feed_calc = res(0, 0)
            End If
            Exit Function
err1:
            For i = 0 To nv
                res(0, i) = -1
            Next i
            Call fluid_stream.add_log_msg("error: " & Err.Description)
            Resume err1done:
err2:
            Call fluid_stream.add_log_msg("warning: some error while param read detected " & Err.Description)
            Resume Next:
        End With
End Function
'description_to_manual      - для автогенерации
' функция расчета коэффициента Джоуля Томсона
Public Function feed_gas_fraction_d( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal ksep_add_fr As Double = 0)
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' ksep_add_fr - коэффициент сепарации газа из потока
' результат  - значение доли газа в потоке (расходна доля)
'description_end
 On Error GoTo er1:
    Dim PVT As New CPVT
    Call PVT.init_feed(feed)
    Call PVT.calc_PVT(p_atma, t_C)
    feed_gas_fraction_d = PVT.gas_fraction_d(ksep_add_fr)
    Exit Function
er1:
    feed_gas_fraction_d = "error"
End Function
'description_to_manual      - для автогенерации
' расчет давления при котором
' достигается заданная доля газа в потоке
Public Function feed_p_gas_fraction_atma( _
               ByVal free_gas_d As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal ksep_add_fr As Double = 0)
' free_gas_d - допустимая доля газа в потоке;
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' ksep_add_fr - коэффициент сепарации газа из потока
' результат  - число - давление
'description_end
On Error GoTo er1:
    Dim PVT As New CPVT
    Call PVT.init_feed(feed)
    feed_p_gas_fraction_atma = PVT.p_gas_fraction_atma(free_gas_d, t_C, ksep_add_fr)
    Exit Function
er1:
    feed_p_gas_fraction_atma = "error"
End Function
'description_to_manual      - для автогенерации
' расчет газового фактора
' при котором достигается заданная доля газа в потоке
Public Function feed_rp_gas_fraction_m3m3( _
               ByVal free_gas_d As Double, _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal ksep_add_fr As Double = 0)
' free_gas_d - допустимая доля газа в потоке;
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' ksep_add_fr - коэффициент сепарации газа из потока
' результат  - число - давление,
'              подпись, и лог расчета если подключен
'description_end
      
On Error GoTo er1:
    Dim PVT As New CPVT
    
    Call PVT.init_feed(feed)
    feed_rp_gas_fraction_m3m3 = PVT.rp_gas_fraction_m3m3(free_gas_d, p_atma, t_C, ksep_add_fr)
    
    Exit Function
er1:
    feed_rp_gas_fraction_m3m3 = "error"
End Function
'description_to_manual      - для автогенерации
' функция расчета коэффициента Джоуля Томсона
Public Function feed_cJT_Katm( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String)
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' результат  - массив, значение коэффициента Джоуля Томсона потока,
'              подпись, и лог расчета если подключен
'description_end
 On Error GoTo er1:
    Dim PVT As New CPVT
    Call PVT.init_feed(feed)
    Call PVT.calc_PVT(p_atma, t_C)
    feed_cJT_Katm = PVT.cJT_Katm
    Exit Function
er1:
    feed_cJT_Katm = "error"
    
End Function
'description_to_manual      - для автогенерации
' функция расчета расхода газо жидкостной смеси (ГЖС)
Public Function feed_q_mix_rc_m3day( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String)
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' результат  - массив, расход ГЖС в рабочих условиях,
'              подпись, и лог расчета если подключен
'description_end
 On Error GoTo er1:
    Dim PVT As New CPVT
    Call PVT.init_feed(feed)
    Call PVT.calc_PVT(p_atma, t_C)
    feed_q_mix_rc_m3day = PVT.q_mix_rc_m3day
    Exit Function
er1:
    feed_q_mix_rc_m3day = "error"
End Function
'description_to_manual      - для автогенерации
' функция расчета плотности газо жидкостной смеси (ГЖС)
Public Function feed_rho_mix_kgm3( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String)
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' результат  - массив, расход ГЖС в рабочих условиях,
'              подпись, и лог расчета если подключен
'description_end
 On Error GoTo er1:
    Dim PVT As New CPVT
    Call PVT.init_feed(feed)
    Call PVT.calc_PVT(p_atma, t_C)
    feed_rho_mix_kgm3 = PVT.rho_mix_rc_kgm3
    Exit Function
er1:
    feed_rho_mix_kgm3 = "error"
End Function
'description_to_manual      - для автогенерации
' функция расчета плотности газо жидкостной смеси (ГЖС)
Public Function feed_mu_mix_cP( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String)
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' результат  - массив, расход ГЖС в рабочих условиях,
'              подпись, и лог расчета если подключен
'description_end
 On Error GoTo er1:
    Dim PVT As New CPVT
    Call PVT.init_feed(feed)
    Call PVT.calc_PVT(p_atma, t_C)
    feed_mu_mix_cP = PVT.mu_mix_cP
    Exit Function
er1:
    feed_mu_mix_cP = "error"
End Function
'description_to_manual      - для автогенерации
' function for calculating flow properties after gas separation
Public Function feed_mod_separate_gas( _
               ByVal k_sep, _
               ByVal p_atma, _
               ByVal t_C, _
               ByVal feed As String, _
      Optional ByVal param As String = "")
' k_sep - gas separation factor, fraction, number or list
' p_atma - pressure, atm, number or list
' t_C - temperature, C, number or list
' feed - json encoded fluid flow parameters,
' use encode_feed to generate
' param - json encoded calculation and output parameters
' result - json encoded feed string
'description_end
    Const nv = 1
    Dim fluid_stream As New CPVT
    
    Dim res(0 To 1, 0 To nv) As Variant
    ' param dictionary and settings variables with default values
    Dim prmd As Dictionary
    Dim gas_goes_into_solution As Double
    Dim show_log As Boolean
    Dim show_array As Boolean
    Dim ptq As PTQ_LIST
    Dim ptq_out As PTQ_LIST
    Dim log_res As New Collection
 
    ' auxiliary variables
    Dim log_str As String
    Dim i As Integer
    On Error GoTo er1:
    Set prmd = param_to_dict(param)
    show_log = prmd(prm_show_log)
    show_array = prmd(prm_show_array)
    gas_goes_into_solution = prmd(prm_gas_goes_into_solution)
    Call read_PTQ(ptq, feed, p_atma, t_C, fluid_stream.log_, k_sep)
    Call init_ptq(ptq_out, ptq)
    For i = 1 To ptq.len
        
        With fluid_stream
            Call .init_feed(ptq.feed(i))
            
            Call fluid_stream.mod_after_separation(ptq.p(i), ptq.t(i), ptq.val(i), gas_goes_into_solution)
            
            ptq_out.feed(i) = (fluid_stream.feed)
            ptq_out.p(i) = Round(ptq.p(i), const_num_decimal_out)
            ptq_out.t(i) = Round(ptq.t(i), const_num_decimal_out)
            ptq_out.val(i) = Round(ptq.val(i), const_num_decimal_out)
            
            log_res.Add ParseJson(fluid_stream.log_.get_str_safe(show_log))
        End With
    Next i
            
    Dim f As CPVT
    Dim d As Dictionary
    Set d = convert_to_dict_ptq(ptq_out)
    d("k_sep") = ptq_out.val
    
    If show_array Then
        If ptq.len = 1 Then
            res(0, 0) = ptq_out.feed(1)
            res(1, 0) = "fluid after separation"
            res(0, 1) = ConvertToJson(log_res(1))
            res(1, 1) = "log"
        Else
            res(0, 0) = ConvertToJson(d)
            res(1, 0) = "fluids after separation"
            res(0, 1) = ConvertToJson(log_res)
            res(1, 1) = "log"
        End If
        feed_mod_separate_gas = res
    Else
        If ptq.len = 1 Then
            feed_mod_separate_gas = ptq_out.feed(1)
        Else
            feed_mod_separate_gas = ConvertToJson(d)
        End If
    End If
    Exit Function
er1:
    feed_mod_separate_gas = "error:feed_mod_separate_gas: " & Err.Description
End Function
'description_to_manual - for autogeneration
' function for calculating the properties of the separated fluid flow
Public Function feed_mod_split( _
               ByVal k_sep_gas As Double, _
               ByVal k_sep_oil As Double, _
               ByVal k_sep_wat As Double, _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal param As String = "")
' k_sep_gas - gas separation factor
' k_sep_oil - oil separation factor
' k_sep_wat - water separation factor
' p_atma - pressure, atm
' t_C - temperature, C.
' feed - fluid flow parameters, flow rate, watercut, etc.
' use encode_feed for generation
' param - json encoded parameters for calculation and output
' result - array, GJS flow rate in working conditions,
' signature, and log of calculation if it is connected
' description_end
    Dim feed_sep_gas As String
    Dim feed1 As New CPVT, feed2 As New CPVT, feed_in As New CPVT
    
    
    feed_sep_gas = feed_mod_separate_gas(k_sep_gas, p_atma, t_C, feed)
    
    Call feed_in.init_feed(feed)
    Call feed_in.calc_PVT(p_atma, t_C)
    Call feed1.init_feed(feed_sep_gas)
    Call feed2.init_feed(feed_sep_gas)
    
    Dim qo1 As Double, qw1 As Double
    qo1 = feed1.q_oil_sm3day
    qw1 = feed1.q_wat_sm3day
    
    feed2.q_liq_sm3day = qo1 * k_sep_oil + qw1 * k_sep_wat
    feed2.fw_fr = qw1 * k_sep_wat / (qo1 * k_sep_oil + qw1 * k_sep_wat)
    
    feed1.q_liq_sm3day = qo1 * (1 - k_sep_oil) + qw1 * (1 - k_sep_wat)
    feed1.fw_fr = qw1 * (1 - k_sep_wat) / (qo1 * (1 - k_sep_oil) + qw1 * (1 - k_sep_wat))
    
    ' весь газ после сепарации добавим во второй поток как свободный газ
    feed2.q_gas_free_sm3day = feed_in.q_gas_free_sm3day - feed1.q_gas_free_sm3day + _
                              (feed_in.rp_m3m3 - feed1.rp_m3m3) * feed_in.q_oil_sm3day
    
    Dim d As New Dictionary
    
    d("feed1") = ParseJson(feed1.feed)
    d("feed2") = ParseJson(feed2.feed)
    
    feed_mod_split = ConvertToJson(d)
    
End Function
'description_to_manual - for autogenerating the description - puts the function header and surrounding comments in the manual (from the next line)
' calculates two feeds mixture properties
Public Function feed_mod_mix( _
               ByVal feed_1 As String, _
               ByVal feed_2 As String) As String
' feed_1 - feed 1 encoded string
' feed_2 - feed 2 encoded string
' result - json encoded feed string
'description_end
    feed_mod_mix = feed_1
    
    Dim gg_mix As Double
    Dim go_mix As Double
    Dim gw_mix As Double
    Dim qo_mix_surf_sm3day As Double
    Dim qg_mix_surf_sm3day As Double
    Dim qw_mix_surf_sm3day As Double
    Dim ql_mix_surf_sm3day As Double
    Dim GOR_mix As Double
    Dim fw_mix As Double
    Dim pb_mix As Double
    Dim rsb_mix As Double
    Dim tres_mix As Double
    Dim muob_mix As Double
    Dim bob_mix As Double
    Dim qgas_free_mix As Double
    Dim corr_mix As Integer
    
    Dim fg1 As Double
    Dim fo1 As Double
    Dim fw1 As Double
    
    Dim feed1 As New CPVT
    Dim feed2 As New CPVT
    Dim fluid_json As String
    
    Call feed1.init_feed(feed_1)
    Call feed2.init_feed(feed_2)
    
    'дебиты на поверхности можно просто сложить и получить итоговые
    qo_mix_surf_sm3day = feed1.q_oil_sm3day + feed2.q_oil_sm3day
    qw_mix_surf_sm3day = feed1.q_wat_sm3day + feed2.q_wat_sm3day
    qg_mix_surf_sm3day = feed1.q_gas_sm3day - feed1.q_gas_free_sm3day + _
                         feed2.q_gas_sm3day - feed2.q_gas_free_sm3day
    qgas_free_mix = feed1.q_gas_free_sm3day + feed2.q_gas_free_sm3day
    ql_mix_surf_sm3day = qo_mix_surf_sm3day + qw_mix_surf_sm3day
    
    ' оценим объемные доли первого флюида в общем потоке
    If qo_mix_surf_sm3day > 0 Then
        fo1 = feed1.q_oil_sm3day / qo_mix_surf_sm3day
    Else
        fo1 = 1
    End If
    If qw_mix_surf_sm3day > 0 Then
        fw1 = feed1.q_wat_sm3day / qw_mix_surf_sm3day
    Else
        fw1 = 1
    End If
    If qg_mix_surf_sm3day > 0 Then
        fg1 = feed1.q_gas_sm3day / qg_mix_surf_sm3day
    Else
        fg1 = 1
    End If
    
    ' удельные плотности определим как средневзвешенные по объем плотности долей (как в мануале Пайпсима)
    gg_mix = feed1.gamma_g * fg1 + feed2.gamma_g * (1 - fg1)
    go_mix = feed1.gamma_o * fo1 + feed2.gamma_o * (1 - fo1)
    gw_mix = feed1.gamma_w * fw1 + feed2.gamma_w * (1 - fw1)
    ' определим соотношения фаз
    GOR_mix = qg_mix_surf_sm3day / qo_mix_surf_sm3day
    fw_mix = qw_mix_surf_sm3day / ql_mix_surf_sm3day * 100
    ' выбираем корреляцию по потоку где дебит больше (для определенности)
    If feed1.q_liq_sm3day > feed2.q_liq_sm3day Then
        corr_mix = feed1.PVT_correlation
    Else
        corr_mix = feed2.PVT_correlation
    End If
    
    ' далее надо определить давление насыщения, газосодержание при давлении насыщения и другие параметры
    ' для упрощения - берем все калибровочные параметры как средне взвешенные по объемной доли нефти в потоке
    ' потенциально надо сделать методику лучше
    pb_mix = feed1.pb_calc_atma * fo1 + feed2.pb_calc_atma * (1 - fo1)
    tres_mix = feed1.t_res_C * fo1 + feed2.t_res_C * (1 - fo1)
    rsb_mix = feed1.rsb_calc_m3m3 * fo1 + feed2.rsb_calc_m3m3 * (1 - fo1)
    bob_mix = feed1.bob_m3m3 * fo1 + feed2.bob_m3m3 * (1 - fo1)
    muob_mix = feed1.muob_cP * fo1 + feed2.muob_cP * (1 - fo1)
    
    fluid_json = encode_PVT(gg_mix, go_mix, gw_mix, rsb_mix, pb_mix, tres_mix, bob_mix, muob_mix, corr_mix)
    feed_mod_mix = encode_feed(ql_mix_surf_sm3day, fw_mix, GOR_mix, qgas_free_mix, fluid_json)
    
    
End Function
'description_to_manual      - для автогенерации
' функция расчета массового расхода нефти
Public Function feed_m_oil_kgsec( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String)
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' результат  - число - массовый расход нефти
'description_end
 On Error GoTo er1:
    Dim PVT As New CPVT
    Call PVT.init_feed(feed)
    Call PVT.calc_PVT(p_atma, t_C)
    feed_m_oil_kgsec = PVT.mo_kgsec
    Exit Function
er1:
    feed_m_oil_kgsec = "error"
End Function
'description_to_manual      - для автогенерации
' функция расчета массового расхода газа
Public Function feed_m_gas_kgsec( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String)
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' результат  - число - массовый расход свободного газа
'description_end
 On Error GoTo er1:
    Dim PVT As New CPVT
    Call PVT.init_feed(feed)
    Call PVT.calc_PVT(p_atma, t_C)
    feed_m_gas_kgsec = PVT.mg_kgsec
    Exit Function
er1:
    feed_m_gas_kgsec = "error"
End Function
'description_to_manual      - для автогенерации
' функция расчета массового расхода воды
Public Function feed_m_wat_kgsec( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String)
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' результат  - число - массовый расход свободного воды
'description_end
 On Error GoTo er1:
    Dim PVT As New CPVT
    Call PVT.init_feed(feed)
    Call PVT.calc_PVT(p_atma, t_C)
    feed_m_wat_kgsec = PVT.mw_kgsec
    Exit Function
er1:
    feed_m_wat_kgsec = "error"
End Function
''description_to_manual      - для автогенерации
'' функция расчета плотности газа в потоке
'Public Function feed_rho_gas_kgm3( _
'               ByVal p_atma As Double, _
'               ByVal t_C As Double, _
'               ByVal feed As String)
'' p_atma     - давление, атм
'' t_C        - температура, С.
'' feed - параметры потока флюидов, дебит, обводненность и пр
''              используйте encode_feed для генерации
'' результат  - массив, расход ГЖС в рабочих условиях,
''              подпись, и лог расчета если подключен
''description_end
'
' On Error GoTo er1:
'    Dim PVT As New CPVT
'    Call PVT.init_feed(feed)
'    Call PVT.calc_PVT(p_atma, t_C)
'    feed_rho_mix_kgm3 = PVT.rho_mix_rc_kgm3
'    Exit Function
'er1:
'    feed_rho_mix_kgm3 = "error"
'
'End Function

