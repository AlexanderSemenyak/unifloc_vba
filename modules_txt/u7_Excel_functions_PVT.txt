'=======================================================================================
'Unifloc 7.27 primavera                                     khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2021
'
'=======================================================================================
'PVT UDF  (user defined functions for PVT calculation)
Option Explicit
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета всех PVT свойств нефти при заданных
' давлении и температуре
Public Function PVT_calc( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String, _
            Optional ByVal param As String = "")
' p_atma   - давление, атм
' t_C      - температура, С.
' PVT_prop - статичные свойства флюида - плотности rsb и пр
'            используйте encode_PVT для генерации
' param    - набор параметров расчета в виде json строки
'
' Возвращает значения всех PVT свойств
' для заданных термобарических условий.
'description_end
    Const nv = 0
On Error GoTo err1:
    Dim fluid As New CPVT
    Dim res(0 To 2, 0 To nv) As Variant
    Dim resd As New Dictionary
    
    ' param dictionary and settings variables with default values
    Dim prmd As Dictionary
    Dim show_log As Boolean
    Dim name_value As String
    
    show_log = True
    name_value = "rs_m3m3"
    
    ' auxiliary variables
    Dim log_str As String
    Dim i As Integer
    
    Call fluid.init_feed(PVT_prop)
    
On Error GoTo err2:
    
    If Len(param) > 1 Then
        Set prmd = ParseJson(param)
        ' for references to parameter names we use constants to make it easier to manage later.
        ' by default the variables will be set to zero or empty (if no key is found)
        
        show_log = prmd(prm_show_log)
        
        name_value = prmd(prm_name_value)
        If name_value = "" Then name_value = 1
    Else
        Call fluid.addLogMsg("info: no param found. default Standing model set")
    End If
' param read done start calc
On Error GoTo err1:
    
    Call fluid.calc_PVT(p_atma, t_C)
    
On Error Resume Next
    With fluid
        resd.Add "rs_m3m3", .rs_m3m3
        resd.Add "pb_atma", .pb_calc_atma
        resd.Add "bo_m3m3", .bo_m3m3
        resd.Add "bg_m3m3", .bg_m3m3
        resd.Add "bw_m3m3", .bw_m3m3
        resd.Add "mu_oil_cP", .mu_oil_cP
        resd.Add "mu_gas_cP", .mu_gas_cP
        resd.Add "mu_wat_cP", .mu_wat_cP
        resd.Add "rho_oil_rc_kgm3", .rho_oil_rc_kgm3
        resd.Add "rho_gas_rc_kgm3", .rho_gas_rc_kgm3
        resd.Add "rho_wat_rc_kgm3", .rho_wat_rc_kgm3
        resd.Add "compressibility_oil_1atm", .compressibility_oil_1atm
        resd.Add "compressibility_gas_1atm", .compressibility_gas_1atm
        resd.Add "compressibility_wat_1atm", .compressibility_wat_1atm
        resd.Add "sigma_liq_Nm", .sigma_liq_Nm
        resd.Add "sigma_oil_gas_Nm", .sigma_oil_gas_Nm
        resd.Add "sigma_wat_gas_Nm", .sigma_wat_gas_Nm
        resd.Add "cp_oil_JkgC", .cp_oil_JkgC
        resd.Add "cp_gas_JkgC", .cp_gas_JkgC
        resd.Add "cv_gas_JkgC", .cv_gas_JkgC
        resd.Add "cp_wat_JkgC", .cp_wat_JkgC
        resd.Add "z", .z
        resd.Add "sal_ppm", .sal_ppm
    End With
    res(0, 0) = ConvertToJson(resd): res(1, 0) = "json" 'resD(name_value) ': res(1, 0) = res(1, num_value)
err1done:
    If show_log Then
        log_str = fluid.log.get_str
        If Len(log_str) > 32000 Then
            log_str = "log too long"
        End If
    Else
        log_str = "[""set show_log=1 in param to show calc log""]"
    End If
    res(2, 0) = log_str
    PVT_calc = res
    Exit Function
    
err1:
    For i = 0 To nv
        res(0, i) = -1
    Next i
    Call fluid.addLogMsg("error: " & Err.Description)
    Resume err1done:
err2:
    Call fluid.addLogMsg("warning: some error while param read detected " & Err.Description)
    Resume Next:
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета объемного коэффициента газа
Public Function PVT_bg_m3m3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение объемного коэффициента газа, м3/м3
' для заданных термобарических условий.
' В основе расчета корреляция для z факотора
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "bg_m3m3"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    PVT_bg_m3m3 = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет объемного коэффициента нефти
Public Function PVT_bo_m3m3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение объемного коэффициента нефти, м3/м3
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "bo_m3m3"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_bo_m3m3 = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет объемного коэффициента воды
Public Function PVT_bw_m3m3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение объемного коэффициента воды, м3/м3
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "bw_m3m3"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_bw_m3m3 = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет солености воды
Public Function PVT_salinity_ppm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение солености воды, ppm
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "salinity_ppm"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_salinity_ppm = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет вязкости нефти
Public Function PVT_mu_oil_cP( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение вязкости нефти, сП
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "mu_oil_cP"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_mu_oil_cP = res
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет вязкости газа
Public Function PVT_mu_gas_cP( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение вязкости газа, сП
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "mu_gas_cP"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_mu_gas_cP = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет вязкости воды
Public Function PVT_mu_wat_cP( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение вязкости воды, сП
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "mu_wat_cP"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_mu_wat_cP = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет газосодержания
Public Function PVT_rs_m3m3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Возвращает значение газосодержания, м3/м3
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "rs_m3m3"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_rs_m3m3 = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет коэффициента сверхсжимаемости газа
Public Function PVT_z( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' Результат - z фактор газа.
'           коэффициент сверхсжимаемости газа,
'           безразмерная величина
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "z"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_z = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет плотности нефти в рабочих условиях
Public Function PVT_rho_oil_kgm3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - плотность нефти
'           при заданных термобарических условиях, кг/м3.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "rho_oil_rc_kgm3"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_rho_oil_kgm3 = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет плотности газа в рабочих условиях
Public Function PVT_rho_gas_kgm3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число - плотность газа
'           при заданных термобарических условиях, кг/м3.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "rho_gas_rc_kgm3"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_rho_gas_kgm3 = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет плотности воды в рабочих условиях
Public Function PVT_rho_wat_kgm3( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число - плотность воды
'           при заданных термобарических условиях, кг/м3.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "rho_wat_rc_kgm3"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_rho_wat_kgm3 = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' Расчет давления насыщения
Public Function PVT_pb_atma( _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число - давление насыщения.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "pb_atma"
    
    res_all = PVT_calc(1, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_pb_atma = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет коэффициента поверхностного натяжения нефть - газ
Public Function PVT_ST_oilgas_Nm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения нефть - газ, Нм
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "sigma_oil_gas_Nm"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_ST_oilgas_Nm = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет коэффициента поверхностного натяжения вода - газ
Public Function PVT_ST_watgas_Nm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения вода - газ, Нм
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "sigma_wat_gas_Nm"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_ST_watgas_Nm = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет коэффициента поверхностного натяжения жидкость - газ
Public Function PVT_ST_liqgas_Nm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "sigma_liq_Nm"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_ST_liqgas_Nm = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет теплоемкости нефти при постоянном давлении cp
Public Function PVT_cp_oil_JkgC( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "cp_oil_JkgC"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_cp_oil_JkgC = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет теплоемкости газа при постоянном давлении cp
Public Function PVT_cp_gas_JkgC( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "cp_gas_JkgC"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_cp_gas_JkgC = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет теплоемкости газа при постоянном давлении cp
Public Function PVT_cv_gas_JkgC( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "cv_gas_JkgC"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_cv_gas_JkgC = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет теплоемкости воды при постоянном давлении cp
Public Function PVT_cp_wat_JkgC( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "cp_wat_JkgC"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_cp_wat_JkgC = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет сжимаемости воды
Public Function PVT_compressibility_wat_1atm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "compressibility_wat_1atm"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_compressibility_wat_1atm = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет сжимаемости нефти
Public Function PVT_compressibility_oil_1atm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "compressibility_oil_1atm"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_compressibility_oil_1atm = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет сжимаемости нефти
Public Function PVT_compressibility_gas_1atm( _
            ByVal p_atma As Double, _
            ByVal t_C As Double, _
            ByVal PVT_prop As String)
' p_atma  - давление, атм
' t_C     - температура, С.
' PVT_prop - строка с параметрами флюида,
'           используйте encode_pvt для ее генерации
'
' результат - число
' Возвращает коэффициента поверхностного натяжения жидкость - газ, Нм
' для заданных термобарических условий.
'description_end
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    Const key As String = "compressibility_gas_1atm"
    
    res_all = PVT_calc(p_atma, t_C, PVT_prop:=PVT_prop)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = ParseJson(res_all(0, 0))(key)
    res(1, 0) = key
    res(2, 0) = res_all(2, 0)
    
    PVT_compressibility_gas_1atm = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета параметров потока
Public Function feed_calc( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal param As String = "")
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' param      - параметры расчета и вывода результатов
' результат  - массив всех расчетных значений,
'              с подписями во второй строке
'description_end
    Const nv = 13
On Error GoTo err1:
    Dim fluid_stream As New CPVT
    
    Dim res(0 To 2, 0 To nv) As Variant
    ' param dictionary and settings variables with default values
    Dim prmd As Dictionary
    Dim show_log As Boolean
    Dim num_value As Integer
    
    show_log = True
    num_value = 1
    
    ' auxiliary variables
    Dim log_str As String
    Dim i As Integer
    With fluid_stream
     
        Call .init_feed(feed)
        
On Error GoTo err2:
    
        If Len(param) > 1 Then
            Set prmd = ParseJson(param)
            ' for references to parameter names we use constants to make it easier to manage later.
            ' by default the variables will be set to zero or empty (if no key is found)
            
            show_log = prmd(prm_show_log)
            
            num_value = prmd(prm_num_value)
            If num_value < 1 Or num_value > nv Then num_value = 1
        Else
            Call .addLogMsg("info: no param found. default Standing model set")
        End If
' param read done start calc
On Error GoTo err1:
        Call .calc_PVT(p_atma, t_C)
        
On Error Resume Next
    
        ' prepare output
        res(0, 1) = .q_mix_rc_m3day:                res(1, 1) = "q_mix_rc_m3day"
        res(0, 2) = .q_oil_rc_m3day:                res(1, 2) = "q_oil_rc_m3day"
        res(0, 3) = .q_wat_rc_m3day:                res(1, 3) = "q_wat_rc_m3day"
        res(0, 4) = .q_gas_rc_m3day:                res(1, 4) = "q_gas_rc_m3day"
        res(0, 5) = .gas_fraction_d:                res(1, 5) = "gas_fraction_d"
        res(0, 6) = .rho_mix_rc_kgm3:               res(1, 6) = "rho_mix_rc_kgm3"
        res(0, 7) = .mu_mix_cP:                     res(1, 7) = "mu_mix_cP"
        res(0, 8) = .mo_kgsec:                      res(1, 8) = "mo_kgsec"
        res(0, 9) = .mw_kgsec:                      res(1, 9) = "mw_kgsec"
        res(0, 10) = .mg_kgsec:                     res(1, 10) = "mg_kgsec"
        res(0, 11) = .mg_kgmol:                     res(1, 11) = "mg_kgmol"
        res(0, 12) = .cmix_JkgC:                    res(1, 12) = "cmix_JkgC"
        res(0, 13) = .cJT_Katm:                     res(1, 13) = "cJT_Katm"
          
        res(0, 0) = res(0, num_value): res(1, 0) = res(1, num_value)
    
        For i = 0 To nv
            res(2, i) = ""
        Next i
    
    End With
err1done:
    If show_log Then
        log_str = fluid_stream.log.get_str
        If Len(log_str) > 32000 Then
            log_str = "log too long"
        End If
    Else
        log_str = "[""set show_log=1 in param to show calc log""]"
    End If
    res(2, 0) = log_str
    feed_calc = res
    Exit Function
    
err1:
    For i = 0 To nv
        res(0, i) = -1
    Next i
    Call fluid_stream.addLogMsg("error: " & Err.Description)
    Resume err1done:
err2:
    Call fluid_stream.addLogMsg("warning: some error while param read detected " & Err.Description)
    
    Resume Next:
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета коэффициента Джоуля Томсона
Public Function feed_gas_fraction_d( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal param As String = "", _
      Optional ByVal ksep_add_fr As Double = 0)
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' param      - параметры расчета и вывода результатов
' ksep_add_fr - коэффициент сепарации газа из потока
' результат  - массив, значение коэффициента Джоуля Томсона потока,
'              подпись, и лог расчета если подключен
'description_end
      
    Dim PVT As New CPVT
    Dim res(0 To 2, 0 To 0)
    
    Call PVT.init_feed(feed)
    Call PVT.calc_PVT(p_atma, t_C)
    
    res(0, 0) = PVT.gas_fraction_d(ksep_add_fr)
    res(1, 0) = "gas_fraction_d"
    res(2, 0) = PVT.log.get_str
    feed_gas_fraction_d = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет давления при котором
' достигается заданная доля газа в потоке
Public Function feed_p_gas_fraction_atma( _
               ByVal free_gas_d As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal param As String = "", _
      Optional ByVal ksep_add_fr As Double = 0)
' free_gas_d - допустимая доля газа в потоке;
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' param      - параметры расчета и вывода результатов
' ksep_add_fr - коэффициент сепарации газа из потока
' результат  - массив, число - давление,
'              подпись, и лог расчета если подключен
'description_end
      
    Dim PVT As New CPVT
    Dim res(0 To 2, 0 To 0)
    
    Call PVT.init_feed(feed)
   ' Call PVT.calc_PVT(p_atma, t_C)
    
    res(0, 0) = PVT.p_gas_fraction_atma(free_gas_d, t_C, ksep_add_fr)
    res(1, 0) = "p_gas_fraction_atma"
    res(2, 0) = PVT.log.get_str
    feed_p_gas_fraction_atma = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет газового фактора
' при котором достигается заданная доля газа в потоке
Public Function feed_rp_gas_fraction_m3m3( _
               ByVal free_gas_d As Double, _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal param As String = "", _
      Optional ByVal ksep_add_fr As Double = 0)
' free_gas_d - допустимая доля газа в потоке;
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' param      - параметры расчета и вывода результатов
' ksep_add_fr - коэффициент сепарации газа из потока
' результат  - массив, число - давление,
'              подпись, и лог расчета если подключен
'description_end
      
    Dim PVT As New CPVT
    Dim res(0 To 2, 0 To 0)
    
    Call PVT.init_feed(feed)
  '  Call PVT.calc_PVT(p_atma, t_C)
    
    res(0, 0) = PVT.rp_gas_fraction_m3m3(free_gas_d, p_atma, t_C, ksep_add_fr)
    res(1, 0) = "rp_gas_fraction_m3m3"
    res(2, 0) = PVT.log.get_str
    feed_rp_gas_fraction_m3m3 = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета коэффициента Джоуля Томсона
Public Function feed_CJT_Katm( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal param As String = "")
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' param      - параметры расчета и вывода результатов
' результат  - массив, значение коэффициента Джоуля Томсона потока,
'              подпись, и лог расчета если подключен
'description_end
    Const num As Integer = 13    ' номер результата, который нужен
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    
On Error GoTo err1:
    
    res_all = feed_calc(p_atma, t_C, feed, param)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = res_all(0, num)
    res(1, 0) = res_all(1, num)
    res(2, 0) = res_all(2, 0)
    feed_CJT_Katm = res
    Exit Function
err1:
    res(0, 0) = -1
    res(1, 0) = "CJT_Katm"
    res(2, 0) = "Error:MF_CJT_Katm:" & Err.Description
    feed_CJT_Katm = res
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета расхода газо жидкостной смеси (ГЖС)
Public Function feed_q_mix_rc_m3day( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal param As String = "")
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' param      - параметры расчета и вывода результатов
' результат  - массив, расход ГЖС в рабочих условиях,
'              подпись, и лог расчета если подключен
'description_end
    Const num As Integer = 1    ' номер результата, который нужен
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    
On Error GoTo err1:
    
    res_all = feed_calc(p_atma, t_C, feed, param)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = res_all(0, num)
    res(1, 0) = res_all(1, num)
    res(2, 0) = res_all(2, 0)
    feed_q_mix_rc_m3day = res
    Exit Function
err1:
    res(0, 0) = -1
    res(1, 0) = "CJT_Katm"
    res(2, 0) = "Error:MF_CJT_Katm:" & Err.Description
    feed_q_mix_rc_m3day = res
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета плотности газо жидкостной смеси (ГЖС)
Public Function feed_rho_mix_kgm3( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal param As String = "")
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' param      - параметры расчета и вывода результатов
' результат  - массив, расход ГЖС в рабочих условиях,
'              подпись, и лог расчета если подключен
'description_end
    Const num As Integer = 6    ' номер результата, который нужен
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    
On Error GoTo err1:
    
    res_all = feed_calc(p_atma, t_C, feed, param)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = res_all(0, num)
    res(1, 0) = res_all(1, num)
    res(2, 0) = res_all(2, 0)
    feed_rho_mix_kgm3 = res
    Exit Function
err1:
    res(0, 0) = -1
    res(1, 0) = "CJT_Katm"
    res(2, 0) = "Error:MF_CJT_Katm:" & Err.Description
    feed_rho_mix_kgm3 = res
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета плотности газо жидкостной смеси (ГЖС)
Public Function feed_mu_mix_cP( _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal param As String = "")
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' param      - параметры расчета и вывода результатов
' результат  - массив, расход ГЖС в рабочих условиях,
'              подпись, и лог расчета если подключен
'description_end
    Const num As Integer = 7    ' номер результата, который нужен
    Dim res(0 To 2, 0 To 0)
    Dim res_all As Variant
    
On Error GoTo err1:
    
    res_all = feed_calc(p_atma, t_C, feed, param)
    
    ' выделим в вывод только то, что необходимо
    res(0, 0) = res_all(0, num)
    res(1, 0) = res_all(1, num)
    res(2, 0) = res_all(2, 0)
    feed_mu_mix_cP = res
    Exit Function
err1:
    res(0, 0) = -1
    res(1, 0) = "CJT_Katm"
    res(2, 0) = "Error:MF_CJT_Katm:" & Err.Description
    feed_mu_mix_cP = res
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета свойст потока после сепарации газа
Public Function feed_mod_separate_gas( _
               ByVal k_sep As Double, _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal param As String = "")
' k_sep      - коэффициент сепарации газа
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' param      - параметры расчета и вывода результатов
' результат  - массив, расход ГЖС в рабочих условиях,
'              подпись, и лог расчета если подключен
'description_end
    Const nv = 0
    Dim fluid_stream As New CPVT
    
    Dim res(0 To 2, 0 To nv) As Variant
    ' param dictionary and settings variables with default values
    Dim prmd As Dictionary
    Dim show_log As Boolean
    Dim gas_goes_into_solution As Double
    
    show_log = True
    
    ' auxiliary variables
    Dim log_str As String
    Dim i As Integer
    With fluid_stream
        Call .init_feed(feed)
        
'On Error GoTo err2:
    
        If Len(param) > 1 Then
            Set prmd = ParseJson(param)
            ' for references to parameter names we use constants to make it easier to manage later.
            ' by default the variables will be set to zero or empty (if no key is found)
            
            show_log = prmd(prm_show_log)
            gas_goes_into_solution = prmd(prm_gas_goes_into_solution)
            
        Else
            Call .addLogMsg("info: no param found. default Standing model set")
        End If
' param read done start calc
'On Error GoTo err1:
        
       ' Dim fl As CPVT
        
        Call fluid_stream.mod_after_separation(p_atma, t_C, k_sep, gas_goes_into_solution)
        
        res(0, 0) = fluid_stream.get_json
        res(1, 0) = "fluid after separation"
        res(2, 0) = fluid_stream.log.get_str
    End With
    
    feed_mod_separate_gas = res
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета свойств разделенного потока флюидов
Public Function feed_mod_split( _
               ByVal k_sep_gas As Double, _
               ByVal k_sep_oil As Double, _
               ByVal k_sep_wat As Double, _
               ByVal p_atma As Double, _
               ByVal t_C As Double, _
               ByVal feed As String, _
      Optional ByVal param As String = "")
' k_sep_gas  - коэффициент сепарации газа
' k_sep_oil  - коэффициент сепарации газа
' k_sep_wat  - коэффициент сепарации газа
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' param      - параметры расчета и вывода результатов
' результат  - массив, расход ГЖС в рабочих условиях,
'              подпись, и лог расчета если подключен
'description_end
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета свойств разделенного потока флюидов
Public Function feed_mod_mix( _
               ByVal feed_1 As String, _
               ByVal feed_2 As String, _
      Optional ByVal param As String = "")
' k_sep      - коэффициент сепарации газа
' p_atma     - давление, атм
' t_C        - температура, С.
' feed - параметры потока флюидов, дебит, обводненность и пр
'              используйте encode_feed для генерации
' param      - параметры расчета и вывода результатов
' результат  - массив, расход ГЖС в рабочих условиях,
'              подпись, и лог расчета если подключен
'description_end
End Function

