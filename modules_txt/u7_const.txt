'=======================================================================================
'Unifloc 7.33 tashkent                                        khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2021
'
'=======================================================================================
' constant definition module
Option Explicit
Public Const const_unifloc_version = "7.33"
Public Const esp_db_name = "\ESP_json.db"
' only database as global variable here
' in order to reduce db file read
Public ESP_base_dictionary As Dictionary
Public Const prm_gas_goes_into_solution     As String = "gas_goes_into_solution"
Public Const prm_PVT_correlation            As String = "PVT_correlation"
Public Const prm_show_log                   As String = "show_log"
Public Const prm_show_info                  As String = "show_info"
Public Const prm_num_value                  As String = "num_value"
Public Const prm_show_array                 As String = "show_array"
Public Const prm_show_all                   As String = "show_all"
Public Const prm_pipe_calibr_grav           As String = "pipe_calibr_grav"
Public Const prm_pipe_calibr_fric           As String = "pipe_calibr_fric"
Public Const prm_pipe_temp_method           As String = "pipe_temp_method"
Public Const prm_pipe_znlf                  As String = "pipe_znlf"
Public Const prm_esp_calibr_head            As String = "esp_calibr_head"
Public Const prm_esp_calibr_rate            As String = "esp_calibr_rate"
Public Const prm_esp_calibr_power           As String = "esp_calibr_power"
Public Const prm_esp_gas_correct            As String = "esp_gas_correct"
Public Const prm_esp_gas_correct_model      As String = "esp_gas_correct_model"
Public Const prm_esp_gas_correct_stage_by_stage      As String = "esp_gas_correct_model"
Public Const prm_dnum_stages_integrate      As String = "dnum_stages_integrate"
Public Const prm_out_points                 As String = "out_points"
Public Const prm_thermal_conductivity_formation_WmC     As String = "thermal_conductivity_formation_WmC"
Public Const prm_specific_heat_capacity_formation_JkgC  As String = "specific_heat_capacity_formation_JkgC"
Public Const prm_thermal_conductivity_cement_WmC        As String = "thermal_conductivity_cement_WmC"
Public Const prm_thermal_conductivity_tubing_WmC        As String = "thermal_conductivity_tubing_WmC"
Public Const prm_thermal_conductivity_casing_WmC        As String = "thermal_conductivity_casing_WmC"
Public Const prm_heat_transfer_casing_liquid_Wm2C       As String = "heat_transfer_casing_liquid_Wm2C"
Public Const prm_heat_transfer_casing_gas_Wm2C          As String = "heat_transfer_casing_gas_Wm2C"
Public Const prm_heat_transfer_fluid_convection_Wm2C    As String = "heat_transfer_fluid_convection_Wm2C "
Public Const prm_time_calc_hr                           As String = "time_calc_hr"
Public Const prm_t_start_C                  As String = "t_start_C"
Public Const prm_t_end_C                    As String = "t_end_C"
Public Const prm_t_model                    As String = "t_model"
Public Const const_name_h_list_m            As String = "h_list_m"
Public Const const_name_diam_list_mm        As String = "diam_list_mm"
Public Const const_name_t_list_C            As String = "t_list_C"
Public Const const_name_roughness_m         As String = "roughness_m"
Public Const const_name_hmes_m              As String = "hmes_m"
Public Const const_name_hvert_m             As String = "hvert_m"
Public Const const_name_t_C                 As String = "t_C"
Public Const const_name_diam_int_mm         As String = "diam_int_mm"
Public Const str_VLPcurve = "VLPcurve"                      ' кривая оттока -  зависимость забойного давления от дебита жидкости
Public Const str_TambHmes_curve = "TambHmes_curve"           ' профиль температуры окружающего простраства от измеренный координаты
Public Const str_PtubHmes_curve = "PtubHmes_curve"           ' профиль давления по стволу скважины по ниже НКТ и по НКТ до устья
Public Const str_TtubHmes_curve = "TtubHmes_curve"           ' профиль температуры по стволу скважины по НКТ
Public Const str_PcasHmes_curve = "PcasHmes_curve"           ' профиль давления по стволу скважины по ниже НКТ и по затрубу до устья
Public Const str_TcasHmes_curve = "TcasHmes_curve"           ' профиль температуры по стволу скважины ниже насоса и выше насоса по затрубу
Public Const str_RstubHmes_curve = "RstubHmes_curve"         ' профиль остаточного содержания газа в нефти по потоку в НКТ
Public Const str_RscasHmes_curve = "RscasHmes_curve"         ' профиль остаточного содержания газа в нефти по потоку по затрубу
Public Const str_GasFracTubHmes_curve = "GasFracTubHmes_curve" ' расходное содержание газа в потоке в НКТ
Public Const str_GasFracCasHmes_curve = "GasFracCasHmes_curve" ' расходное содержание газа в потоке по затрубу
Public Const str_HlHmes_curve = "HlHmes_curve"         ' Liquid holdup (содержание жидкости) в потоке через НКТ
Public Const str_HLtubHmes_curve = "HLtubHmes_curve"         ' Liquid holdup (содержание жидкости) в потоке через НКТ
Public Const str_HLcasHmes_curve = "HLcasHmes_curve"         ' Liquid holdup (содержание жидкости) в потоке по затрубу
Public Const str_muoTubCurve = "muoTubCurve" '
Public Const str_muwTubCurve = "muwTubCurve" '
Public Const str_mugTubCurve = "mugTubCurve" '
Public Const str_mumixTubCurve = "mumixTubCurve" '
Public Const str_rhooTubCurve = "rhooTubCurve" '
Public Const str_rhowTubCurve = "rhowTubCurve" '
Public Const str_rholTubCurve = "rholTubCurve" '
Public Const str_rhogTubCurve = "rhogTubCurve" '
Public Const str_rhomixTubCurve = "rhomixTubCurve" '
Public Const str_qoTubCurve = "qoTubCurve" '
Public Const str_qwTubCurve = "qwTubCurve" '
Public Const str_qgTubCurve = "qgTubCurve" '
Public Const str_moTubCurve = "moTubCurve" '
Public Const str_mwTubCurve = "mwTubCurve" '
Public Const str_mgTubCurve = "mgTubCurve" '
Public Const str_vlTubCurve = "vlTubCurve" '
Public Const str_vgTubCurve = "vgTubCurve" '
Public Const str_muoCasCurve = "muoCasCurve" '
Public Const str_muwCasCurve = "muwCasCurve" '
Public Const str_mugCasCurve = "mugCasCurve" '
Public Const str_mumixCasCurve = "mumixCasCurve" '
Public Const str_rhooCasCurve = "rhooCasCurve" '
Public Const str_rhowCasCurve = "rhowCasCurve" '
Public Const str_rholCasCurve = "rholCasCurve" '
Public Const str_rhogCasCurve = "rhogCasCurve" '
Public Const str_rhomixCasCurve = "rhomixCasCurve" '
Public Const str_qoCasCurve = "qoCasCurve" '
Public Const str_qwCasCurve = "qwCasCurve" 'a's
Public Const str_qgCasCurve = "qgCasCurve" '
Public Const str_moCasCurve = "moCasCurve" '
Public Const str_mwCasCurve = "mwCasCurve" '
Public Const str_mgCasCurve = "mgCasCurve" '
Public Const str_vlCasCurve = "vlCasCurve" '
Public Const str_vgCasCurve = "vgCasCurve" '
Public Const PVT_DEFAULT = "{""gamma_gas"":0.6,""gamma_oil"":0.86,""gamma_wat"":1,""rsb_m3m3"":100}"
Public Const WELL_DEFAULT = "{""h_perf_m"":1600,""h_tub_m"":1000,""rough_m"":0.0001,""d_choke_mm"":15,""t_val_C"":[[25]],""h_list_m"":[[2000]],""d_tub_list_mm"":[[62]],""d_cas_list_mm"":[[125]]}"
Public Const const_t_K_min = 273         ' ниже нуля ничего не считаем?
Public Const const_tMcCain_K_min = 289   ' ниже нуля ничего не считаем?
Public Const const_t_K_max = 573         ' выше тоже ничего не считаем?
Public Const const_t_K_zero_C = 273
Public Const const_t_C_min = const_t_K_min - const_t_K_zero_C
Public Const const_t_C_max = const_t_K_max - const_t_K_min
Public Const const_Pi As Double = 3.14159265358979
Public Const const_tsc_C = 20
Public Const const_tsc_K As Double = const_tsc_C + const_t_K_zero_C ' температура стандартных условиях, К
Public Const const_psc_atma As Double = 1
Public Const const_r As Double = 8.31 'Universal gas constant
Public Const const_g = 9.81
Public Const const_rho_air = 1.2217
Public Const const_gamma_w = 1
Public Const const_rho_ref = 1000
Public Const const_ZNLF_rate = 0.1
Public Const const_m_a_kgmol As Double = 0.029 'Air molar mass
Public Const const_sigma_wat_gas_Nm = 0.01 ' поверхностное натяжение на границе с воздухом (газом) - типовые значения для дефолтных параметров  Н/м
Public Const const_sigma_oil_Nm = 0.025
Public Const const_mu_w = 0.36
Public Const const_mu_g = 0.0122
Public Const const_mu_o = 0.7
Public Const const_gg_ = 0.6
Public Const const_gw_ = 1
Public Const const_go_ = 0.86
Public Const const_rsb_default = 100
Public Const const_Bob_default = 1.2
Public Const const_tres_default = 90
Public Const const_Roughness_default = 0.0001
' набор констант для общих ограничений значений переменных
Public Const const_gamma_gas_min = 0.5   ' плотность метана 0.59 - предпологаем легче газов не будет
Public Const const_gamma_gas_max = 2     ' плотность углеводородных газов (гексан) может доходить до 4, но мы считаем что в смеси таких не много должно быть
Public Const const_gamma_water_min = 0.9 ' плотность воды от 0.9 до 1.5
Public Const const_gamma_water_max = 1.5
Public Const const_gamma_oil_min = 0.5   ' плотность нефти
Public Const const_gamma_oil_max = 1.5
Public Const const_P_MPa_min = 0
Public Const const_P_MPa_max = 50
Public Const const_Salinity_ppm_min = 0
Public Const const_Salinity_ppm_max = 265000  ' equal to weigh percent salinity 26.5%.  Ограничение по границам применимости корреляций МакКейна
Public Const const_rsb_m3m3_min = 0
Public Const const_rsb_m3m3_max = 100000 ' rsb more that 100 000 not allowed
Public Const const_Ppr_min = 0.002
Public Const const_Ppr_max = 30
Public Const const_Tpr_min = 0.7
Public Const const_Tpr_max = 3
Public Const const_Z_min = 0.05
Public Const const_Z_max = 5
Public Const const_TGeoGrad_C100m = 3   ' геотермальный градиент в градусах на 100 м
Public Const const_Heps_m = 0.001       ' дельта для корретировки кривой трубы, - примерно соответствует длине сочленения труб
Public Const const_ESP_length = 1      ' длина УЭЦН по умолчанию
Public Const const_pipe_diam_default_mm = 62
' набор констант для перевода единиц измерений в различных размерностях
Public Const const_convert_atma_Pa = 101325
Public Const const_convert_Pa_atma = 1 / const_convert_atma_Pa
Public Const const_convert_kgfcm2_Pa = 98066.5
Public Const const_convert_m3day_bbl = 6.289810569
Public Const const_convert_gpm_m3day = 5.450992992     ' (US) gallon per minute
Public Const const_convert_m3day_gpm = 1 / const_convert_gpm_m3day
Public Const const_convert_m3m3_scfbbl = 5.614583544
Public Const const_convert_scfbbl_m3m3 = 1 / const_convert_m3m3_scfbbl
Public Const const_convert_bbl_m3day = 1 / const_convert_m3day_bbl
Public Const const_conver_day_sec = 86400   ' updated for test  rnt21
Public Const const_convert_hr_sec = 3600
Public Const const_convert_m3day_m3sec = 1 / const_conver_day_sec
Public Const const_conver_sec_day = 1 / const_conver_day_sec
Public Const const_convert_atma_psi = 14.7
Public Const const_convert_psi_atma = 1 / const_convert_atma_psi
Public Const const_convert_ft_m = 0.3048
Public Const const_convert_m_ft = 1 / const_convert_ft_m
Public Const const_convert_m_mm = 1000
Public Const const_convert_mm_m = 1 / const_convert_m_mm
Public Const const_convert_cP_Pasec = 1 / 1000
Public Const const_convert_HP_W = 745.69987  ' 735.49875  ' метрическая лошадиная сила. следует учесть, что иногда может применяться механическя лошадиная сила (1.013 метрической)
Public Const const_convert_W_HP = 1 / const_convert_HP_W
Public Const const_convert_Nm_dynescm = 1000
Public Const const_convert_lbmft3_kgm3 = 16.01846
Public Const const_convert_kgm3_lbmft3 = 1 / const_convert_lbmft3_kgm3
Public Const const_convert_psift_atmm = 1 / const_convert_atma_psi / const_convert_ft_m ' pressure gradient conversion factor
Public Const const_convert_MPa_atma = 1000000 / const_convert_atma_Pa  ' 9.8692
Public Const const_convert_MPa_psia = const_convert_MPa_atma * const_convert_atma_psi
Public Const const_convert_atma_MPa = 1 / const_convert_MPa_atma ' 0.101325' константа для конверсии единиц давления из Мпа в atma
Public Const const_p_atma_min = const_P_MPa_min * const_convert_MPa_atma
Public Const const_p_atma_max = const_P_MPa_max * const_convert_MPa_atma
Public Const MAXIT = 100
' константы для расчета многофазного потока
Public Const const_MaxSegmLen = 100
Public Const const_n_n = 20
Public Const const_MaxdP = 10
Public Const const_minPpipe_atma = 0.9
Public Const const_pressure_tolerance = 0.01
' эта константа используется при интегрировании трубы
' попытка увеличить точность может при определенных обстоятельствах привести к тому
' что расчет по корреляции Ансари не будет сходиться из-за скачкой градиента давления 13.09.2021
' следует обращаться осторожно с этими параметрами
Public Const const_num_decimal_out = 3
Public Const const_well_P_tolerance = 0.05     ' допустимая погрешность при расчете забойного давления в скважине
Public Const const_P_difference = 0.0001       ' допустимая погрешность при сравнении (в основном) давлений
Public Const ang_max = 5
Public Const const_OutputCurveNumPoints = 50
Public Const DEFAULT_PAN_STEP = 15
Public Const kErrWellConstruction = 513 + vbObjectError
Public Const kErrPVTinput = 514 + vbObjectError
Public Const kErrNodalCalc = 515 + vbObjectError
Public Const kErrInitCalc = 516 + vbObjectError
Public Const kErrESPbase = 517 + vbObjectError
Public Const kErrPVTcalc = 518 + vbObjectError
Public Const kErrESPcalc = 519 + vbObjectError
Public Const kErrGradcalc = 520 + vbObjectError
Public Const kErrArraySize = 701 + vbObjectError
Public Const kErrBuildCurve = 702 + vbObjectError
Public Const kErrcurvestablePointIndex = 703 + vbObjectError
Public Const kErrCurvePointIndex = 704 + vbObjectError
Public Const kErrReadDataFromWorksheet = 705 + vbObjectError
Public Const kErrWriteDataFromWorksheet = 706 + vbObjectError
Public Const kStrConversion = 707 + vbObjectError
Public Const kErrDegradationNotFound = 708 + vbObjectError
Public Const kErrDegradationError = 709 + vbObjectError
Public Const kreadRangeError = 710 + vbObjectError
Public Const kErrCInterpolation = 711 + vbObjectError
Public Const kErrTester = 712 + vbObjectError
Public Const kErrBisection = 713 + vbObjectError
Public Const kreadJsonError = 714 + vbObjectError
Public Const sDELIM As String = vbNewLine
Public Const MinCountPoints_calc_pwf_pcas_hdyn_atma = 5
Public Const root3 = 3 ^ 0.5
' hydraulic correlations types
Public Enum H_CORRELATION
    BeggsBrill = 0
    Ansari = 1
    Unified = 2
    Gray = 3
    HagedornBrown = 4
    SakharovMokhov = 5
    gas = 10
    Water = 11
End Enum
' PVT correlations set to be used
Public Enum PVT_correlation
    Standing_based = 0 '
    McCain_based = 1 '
    straigth_line = 2
End Enum
' z factor (gas compressibility) options
Public Enum Z_CORRELATION
    z_BB = 0
    z_Dranchuk = 1
    z_Kareem = 2
End Enum
' type determines the method of temperature calculation in well
Public Enum TEMP_CALC_METHOD
    StartEndTemp = 0
    GeoGradTemp = 1
    AmbientTemp = 2
    LengthTemp = 3    ' temperature along measured length
End Enum
' gas separation in well at pump intake. calculation method
Public Enum SEPAR_CALC_METHOD
    fullyManual = 3
    valueManual = 2
    pressureManual = 1
    byCorrealation = 0
End Enum
' standard port sizes for whetherford r1 glv
Public Enum GLV_R1_PORT_SIZE
    R1_port_1_8 = 3.18
    R1_port_5_32 = 3.97
    R1_port_3_16 = 4.76
    R1_port_1_4 = 6.35
    R1_port_5_16 = 7.94
End Enum
' multiphase flow in pipe and well calculation method
Public Type PARAMCALC
     correlation As H_CORRELATION         ' multiphase hydraulic correlation
     calc_along_coord As Boolean            ' calculation direction flag
                                          ' if True - pressure at lowest coordinate is given
                                          '           pressure at higher coordinate calculated
                                          '           for well (0 coord at top, hmes at bottom)
                                          '           equal to calc from top to bottom
                                          '    False - otherwise
     flow_along_coord As Boolean            ' flow direction flag
     temp_method As TEMP_CALC_METHOD      ' temperature caclulation method
     length_gas_m As Double               ' length in pipe where correlation changes.
                                          ' for points with cooed less then  length_gas_m
                                          ' gas correlation applied,
                                          ' other points - multiphase correlation applied
                                          ' allows to model easily static level in well
    start_length_gas_m As Double
End Type
' type to describe thermobaric conditions (for calculations)
Public Type PTtype
    p_atma As Double
    t_C As Double
End Type
' type for storing data about dynamic level
Public Type PCAS_HDYN_type
    p_cas_atma As Double
    hdyn_m As Double
    self_flow_condition As Boolean
    pump_off_condition As Boolean
    correct As Boolean
End Type
' Type for describing the operation of an electric motor
Public Type MOTOR_DATA
    U_lin_V As Double       ' voltage linear (between phases)
    I_lin_A As Double       ' Linear current (in line)
    U_phase_V As Double     ' phase voltage (between phase and zero)
    I_phase_A As Double     ' phase current (in winding)
    f_Hz As Double          ' frequency synchronous (field rotation)
    eff_d As Double         ' Efficiency
    cosphi As Double        ' power factor
    s_d As Double           ' slippage
    Pshaft_kW As Double     ' mechanical power on the shaft
    Pelectr_kW As Double    ' power supply electric
    Mshaft_Nm As Double     ' torque on the shaft - mechanical
    load_d As Double        ' motor load
    eff_full_d As Double
    cable_dU_V As Double
    U_trans_high_V As Double
    power_fact_kW As Double
    power_CS_calc_W As Double        ' мощность на входе в станцию управления (с учетом корректировки) факт
    power_CS_teor_calc_W As Double   ' мощность на входе в станцию управления  расчетная без корретировки
End Type
Public Type CABLE_DATA
    type_num As Integer    ' номер кабеля todo сделать базу кабелей
    name As String         ' название кабеля
    manufacturer As String
    d_mm As Double
    R_Omkm As Double       ' удельное сопротивление
    X_Omkm As Double       ' удельное реактивое сопротивление
    Tmax_C As Double       ' температурный рейтинг  todo сделать проверки на температурный рейтинг
    dU_V As Double         ' падение напряжения на кабеле
    dPower_W As Double     ' мощность потребляемая кабелем
    power_W As Double      ' мощность на входе в кабель
End Type
' ESP description to be loaded from DB
' combined in type to decrease a mess in CESPpump
Public Type ESP_PARAMS
     ID As String                    ' ID from database
     source As String
     manufacturer As String
     name As String
     stages_max As Integer           ' максимальной количество ступеней в насосе (из базы)
     rate_max_sm3day As Double       ' максимальный дебит насос (из базы) - хорошо бы для надежности определять параметр из характеристики
     rate_nom_sm3day As Double
     rate_opt_min_sm3day As Double   ' границы оптимального диапазона для насоса - минимум
     rate_opt_max_sm3day As Double   ' границы оптимального диапазона  - максимум
     freq_Hz As Double               ' частота насоса для номинальной характеристики в базе
     
     ' характеристика заданные по точкам
     head_points() As Double
     rate_points() As Double
     power_points() As Double
     eff_points() As Double
     
     height_stage_m As Double        ' примерная высота ступени
     d_od_m As Double                ' внешний диаметр ЭЦН
     d_motor_od_m As Double         ' внешний диаметр ПЭД
     d_cas_min_m As Double           ' минимальный диаметр обсадной колонны, заданный производителем оборудования
     d_shaft_m As Double             ' диаметр вала для насоса
     area_shaft_m2 As Double         ' площадь поперечного сечения вала   (дублирует диаметр, но задается производителем)
     
     power_limit_shaft_kW As Double ' максимальная мощность передаваемая валом на номинальной частоте
     power_limit_shaft_high_kW As Double
     power_limit_shaft_max_kW As Double ' максимальная мощность передаваемая валом на номинальной частоте для высокопрочного вала
     pressure_limit_housing_atma As Double ' максимальное давление на корпус
     slip_nom_rpm As Double
     eff_max As Double
End Type
' type of extended description of multiphase flow parameters at a point
Public Type PIPE_FLOW_PARAMS
  md_m As Double         ' pipe measured depth (from start - top)
  vd_m As Double         ' pipe vertical depth from start - top
  diam_mm As Double      ' pipe diam
  p_atma As Double       ' pipe pressure at measured depth
  t_C As Double          ' pipe temp at measured depth
  
  dp_dl As Double
  dt_dl As Double
  
  dpdl_g_atmm As Double  ' gravity gradient at measured depth
  dpdl_f_atmm As Double  ' friction gradient at measured depth
  dpdl_a_atmm As Double  ' acceleration gradient at measured depth
  v_sl_msec As Double    ' superficial liquid velosity
  v_sg_msec As Double    ' superficial gas velosity
  h_l_d As Double        ' liquid hold up
  fpat As Double         ' flow pattern code
  thete_deg As Double
  roughness_m As Double
  
  rs_m3m3 As Double     ' dissolved gas in oil in the stream
  gasfrac As Double     ' gas flow rate
  
  mu_oil_cP As Double   ' oil viscosity in flow
  mu_wat_cP As Double   ' water viscosity in the flow
  mu_gas_cP As Double   ' gas viscosity in flow
  mu_mix_cP As Double   ' viscosity of the mixture in the flow
  
  Rhoo_kgm3 As Double   ' oil Density
  Rhow_kgm3 As Double   ' water Density
  rhol_kgm3 As Double   ' liquid density
  Rhog_kgm3 As Double   ' gas Density
  rhomix_kgm3 As Double ' density of the mixture in the thread
  
  q_oil_m3day As Double ' oil consumption in working conditions
  qw_m3day As Double    ' water consumption in working conditions
  Qg_m3day As Double    ' gas flow rate under operating conditions
  
  mo_kgsec As Double    ' mass flow rate of oil in working conditions
  mw_kgsec As Double    ' mass flow rate in working conditions
  mg_kgsec As Double    ' mass flow rate of gas under operating conditions
  
  vl_msec As Double     ' fluid velocity is real
  vg_msec As Double     ' real gas velocity
End Type
' type showing the way of saving the extended calculation results
' determines which set of calculated distribution curves will be saved
Public Enum CALC_RESULTS
    noCurves = 0
    mainCurves = 1
    allCurves = 2
End Enum
Public Type PTESP_LIST
    feed() As String
    p_intake() As Double
    t_intake() As Double
    p_dis() As Double
    t_dis() As Double
    d As Dictionary
    len As Integer
End Type
' list data for UDF calculations
Public Type PTQ_LIST
    feed() As String
    p() As Double
    t() As Double
    val() As Double
    len As Integer
End Type
'=========================================================================================
'types support functions
'=========================================================================================
' flow parameter setting function in the pipe or well
Public Function set_calc_flow_param( _
                Optional ByVal calc_along_coord As Boolean = False, _
                Optional ByVal flow_along_coord As Boolean = False, _
                Optional ByVal hcor As H_CORRELATION = Ansari, _
                Optional ByVal temp_method As TEMP_CALC_METHOD = StartEndTemp, _
                Optional ByVal length_gas_m As Double = 0, _
                Optional ByVal start_length_gas_m As Double = 0) As PARAMCALC
' calc_along_coord - calculation direction flag
' flow_along_coord - flow direction relative to coordinate
' hcor             - hydraulic correlation selector
' temp_method      - temperature method selector
' length_gas_m     - boundary of gas correlation application in flow
    Dim prm As PARAMCALC
    prm.calc_along_coord = calc_along_coord
    prm.flow_along_coord = flow_along_coord
    prm.correlation = hcor
    prm.temp_method = temp_method
    prm.length_gas_m = length_gas_m
    prm.start_length_gas_m = start_length_gas_m
    set_calc_flow_param = prm
End Function
Public Function sum_PT(PT1 As PTtype, PT2 As PTtype) As PTtype
    sum_PT.p_atma = PT1.p_atma + PT2.p_atma
    sum_PT.t_C = PT1.t_C + PT2.t_C
End Function
Public Function subtract_PT(PT1 As PTtype, PT2 As PTtype) As PTtype
    subtract_PT.p_atma = PT1.p_atma - PT2.p_atma
    subtract_PT.t_C = PT1.t_C - PT2.t_C
End Function
Public Function set_PT(ByVal p As Double, ByVal t As Double) As PTtype
    set_PT.p_atma = p
    set_PT.t_C = t
End Function
Public Function PT_to_array(PT As PTtype)
    PT_to_array = Array(PT.p_atma, PT.t_C)
End Function
'=======================================================================================
'simple math function (additional to alglib)
Public Function cosd(ang) As Double
 cosd = Cos(ang / 180 * const_Pi)
End Function
Public Function sind(ang) As Double
 sind = Sin(ang / 180 * const_Pi)
End Function
Public Function isEqual(a As Double, b As Double) As Double
    Const eps = const_P_difference
    isEqual = False
    If Abs(a - b) < eps Then isEqual = True
End Function
Public Function isGreater(a As Double, b As Double) As Double
    Const eps = const_P_difference
    isGreater = False
    If (a - b) > eps Then isGreater = True
End Function
Public Function isBetween(a As Double, a0 As Double, a1 As Double)
    isBetween = False
    If ((a <= a0) And (a >= a1)) Or ((a >= a0) And (a <= a1)) Then isBetween = True
End Function
Public Function SplitTrim(ByVal s As String, ByVal SEP As String) As String()
    Dim SPrev As String
    s = Trim(s)
    Do
        SPrev = s
        s = Replace(s, "  ", " ")
    Loop Until s = SPrev
    SplitTrim = Split(s, SEP)
End Function
Public Function s(val As Double) As String
    s = Format(val, "0##.########")
End Function
Public Function Cdbl_(str_ As Variant) As Double
On Error GoTo er11:
    Dim dec_sep As String
    Dim s_ As String
    dec_sep = Application.International(xlDecimalSeparator)
    If dec_sep = "." Then
        s_ = Replace(str_, ",", ".")
    ElseIf dec_sep = "," Then
        s_ = Replace(str_, ".", ",")
    End If
    Cdbl_ = CDbl(s_)
    Exit Function
On Error GoTo erl2:
er11: ' Исключение возникает при ошибки типа Cdbl_
        If dec_sep = "." Then
            s_ = Replace(str_, ".", ",")
        ElseIf dec_sep = "," Then
            s_ = Replace(str_, ",", ".")
        End If
        Cdbl_ = CDbl(s_)
        Exit Function
erl2: ' Добавлено исключение
    Dim errmsg As String
    errmsg = "Cdbl_ string number conversion: str =" & str_ & ":" & Err.Description
    add_log_msg errmsg
    Err.Raise kStrConversion, Err.source, errmsg
End Function
Public Function CDbl_safe(str_ As Variant)
On Error GoTo err1:
    CDbl_safe = Cdbl_(str_)
Exit Function
err1:
    CDbl_safe = str_
End Function
'=============== array manipulation functions =========================
Public Function array_from_range(var_input, _
                                Optional transpose As Boolean = False)
' return array from range or from array or from number
    Dim ar() As Variant
    Dim rng As range
    Dim col As Collection
    Dim d As Long
    Dim i As Integer, j As Integer
    Dim done As Boolean
    
On Error GoTo err1:
    done = False
    If (TypeOf var_input Is range) Then
        Set rng = var_input
        If rng.Cells.Count = 1 Then
            Dim ST As String
            ST = CStr(rng.Value2)
            If Mid(ST, 1, 1) = "[" Then
                Dim cl As Collection
                Set cl = ParseJson(ST)
                Set var_input = cl.Item(1)
            Else
                ReDim ar(1 To 1, 1 To 1)
                ar(1, 1) = rng.Value
                done = True
            End If
        Else
            ar = rng.Value2
            done = True
        End If
    End If
    
    If Not done Then
        If (TypeOf var_input Is Collection) Then
            Set col = var_input
            ar = collection_to_array_2d(col)
        ElseIf IsArray(var_input) Then
            d = getDimension(var_input)
            If d = 2 Then
                ReDim ar(1 To UBound(var_input, 1) - LBound(var_input, 1) + 1, 1 To UBound(var_input, 2) - LBound(var_input, 2) + 1)
                For i = 1 To UBound(var_input, 1) - LBound(var_input, 1) + 1
                    For j = 1 To UBound(var_input, 2) - LBound(var_input, 2) + 1
                        ar(i, j) = var_input(i + LBound(var_input, 1) - 1, j + LBound(var_input, 2) - 1)
                    Next
                Next
            ElseIf d = 1 Then
                
                ReDim ar(1 To UBound(var_input, 1) - LBound(var_input, 1) + 1, 1 To 1)
                For i = 1 To UBound(var_input, 1) - LBound(var_input, 1) + 1
                    ar(i, 1) = var_input(i + LBound(var_input, 1) - 1)
                Next
            Else
                GoTo err1:
            End If
        Else
            ReDim ar(1 To 1, 1 To 1)
            ar(1, 1) = var_input
        End If
    End If
    If transpose Then
        array_from_range = array_transpose_(ar)
    Else
        array_from_range = ar
    End If
    Exit Function
err1:
    Dim errmsg As String
    errmsg = "Error:array_from_range:" & Err.Description
    add_log_msg (errmsg)
    Err.Raise kreadRangeError, "array_from_range", errmsg
End Function
Public Function array_transpose(var_input)
    array_transpose = array_transpose_(array_from_range(var_input))
End Function
Private Function array_transpose_(var_input)
    Dim i As Integer, j As Integer
    Dim ard
    
    ReDim ard(1 To UBound(var_input, 2), 1 To UBound(var_input, 1))
    For i = LBound(var_input, 1) To UBound(var_input, 1)
        For j = LBound(var_input, 2) To UBound(var_input, 2)
            ard(j, i) = var_input(i, j)
        Next
    Next
    array_transpose_ = ard
End Function
Public Function array_num_from_dictionary(dict As Dictionary, _
                                          x_key As String, y_key As String)
    ' extract array from dictionary - where stored as vectors
    Dim arr_out() As Double
    Dim i As Integer
    Dim xarr
    Dim yarr
    
    If dict.Exists(x_key) Then
        xarr = collection_to_array_1d(dict(x_key))
    End If
    If dict.Exists(y_key) Then
        yarr = collection_to_array_1d(dict(y_key))
    End If
    ReDim arr_out(LBound(xarr) To UBound(xarr), 1 To 2)
    For i = LBound(xarr) To UBound(xarr)
        arr_out(i, 1) = xarr(i)
        arr_out(i, 2) = yarr(i)
    Next i
    array_num_from_dictionary = arr_out
End Function
Public Function array_num_from_range(var_input, _
                            Optional remove_zeros As Boolean = False, _
                            Optional remove_only_rows As Boolean = False, _
                            Optional transpose As Boolean = False)
    Dim ar() As Variant
    Dim ard() As Double
    Dim ard2() As Double
    Dim val As Double
    Dim i As Integer, j As Integer
    
    ar = array_from_range(var_input, transpose)
    
On Error GoTo err1:
    ReDim ard(1 To (UBound(ar, 1) - LBound(ar, 1) + 1), 1 To (UBound(ar, 2) - LBound(ar, 2) + 1))
    For i = LBound(ar, 1) To UBound(ar, 1)
        For j = LBound(ar, 2) To UBound(ar, 2)
            val = Cdbl_(CStr(ar(i, j)))
            ard(i, j) = val
        Next
    Next
    Dim M As Double
    If remove_zeros Then
On Error GoTo err2:
        ' transpose to delete zeros rows
        ReDim ard2(1 To UBound(ard, 2), 1 To UBound(ard, 1))
        For i = UBound(ard, 1) To LBound(ard, 1) Step -1
            For j = UBound(ard, 2) To LBound(ard, 2) Step -1
                ard2(j, i) = ard(i, j)
            Next
        Next
        ' delete zero rows
        For i = UBound(ard2, 2) To LBound(ard2, 2) Step -1
            M = 0
            For j = UBound(ard2, 1) To LBound(ard2, 1) Step -1
                M = M + Abs(ard2(j, i))
            Next
            If M = 0 And i > 1 Then
                ReDim Preserve ard2(1 To UBound(ard2, 1), 1 To i - 1)
            Else
                Exit For
            End If
        Next
        ' transpose back
        
        ReDim ard(1 To UBound(ard2, 2), 1 To UBound(ard2, 1))
        For i = UBound(ard2, 1) To LBound(ard2, 1) Step -1
            For j = UBound(ard2, 2) To LBound(ard2, 2) Step -1
                ard(j, i) = ard2(i, j)
            Next
        Next
        If Not remove_only_rows Then
        ' when array used for pipe trajectory
        ' zeros in columns can have meaning
        ' delete zero cols
            For i = UBound(ard, 2) To LBound(ard, 2) Step -1
                M = 0
                For j = UBound(ard, 1) To LBound(ard, 1) Step -1
                    M = M + Abs(ard(j, i))
                Next
                If M = 0 And i > 1 Then
                    ReDim Preserve ard(1 To UBound(ard, 1), 1 To i - 1)
                Else
                    Exit For
                End If
            Next
        End If
    End If
    array_num_from_range = ard
    Exit Function
err1:
    val = 0
    Resume Next
err2:
    Dim errmsg As String
    errmsg = "Error:array_num_from_range:" & Err.Description
    add_log_msg (errmsg)
    Err.Raise kreadRangeError, "array_num_from_range", errmsg
End Function
Public Function array1d_from_range(var_input, _
                        Optional ByVal num_only As Boolean = False, _
                        Optional ByVal no_zero As Boolean = False)
' return 1 d array from range or from array or from number
    Dim ar
    Dim arout() As Variant
    Dim rng As range
    Dim i As Integer
    Dim j As Integer
    Dim K As Integer
    Dim num As Integer
On Error GoTo err1:
    If num_only And no_zero Then
        ar = array_num_from_range(var_input, remove_zeros:=True)
    ElseIf num_only Then
        ar = array_num_from_range(var_input, remove_zeros:=False)
    Else
        ar = array_from_range(var_input)
    End If
    num = (UBound(ar, 1) - LBound(ar, 1) + 1) * (UBound(ar, 2) - LBound(ar, 2) + 1)
    ReDim arout(1 To num)
    K = 1
    For i = LBound(ar, 1) To UBound(ar, 1)
        For j = LBound(ar, 2) To UBound(ar, 2)
            arout(K) = ar(i, j)
            K = K + 1
        Next
    Next
    array1d_from_range = arout
    Exit Function
err1:
    Dim errmsg As String
    errmsg = "Error:array1d_from_range:" & Err.Description
    add_log_msg (errmsg)
    Err.Raise kreadRangeError, "array1d_from_range", errmsg
End Function
Public Function collection_to_array_1d(myCol As Collection)
    Dim ncol As Integer
    Dim i As Integer
    Dim res() As Variant
    
    ncol = myCol.Count
    ReDim res(1 To ncol)
    For i = 1 To ncol
        res(i) = myCol(i)
    Next i
    collection_to_array_1d = res
End Function
Public Function collection_to_array_2d(myCol As Collection, _
                           Optional transpose As Boolean = False) As Variant
' на входе должно быть двумерная коллекция - коллекция коллекций
    Dim Result  As Variant
    Dim cnt     As Long
    Dim ncol As Integer
    Dim nrow As Integer
    Dim j As Long
    
    ncol = myCol.Count
    If ncol >= 1 Then
        nrow = myCol(1).Count
    Else
        Err.Raise kErrArraySize, , "collection_to_array_2d error - wrong dimension"
    End If
    
    If transpose Then
        ReDim Result(1 To nrow, 1 To ncol)
        For cnt = 1 To myCol.Count
            For j = 1 To nrow
                If Not IsNull(myCol(cnt)(j)) Then
                    Result(j, cnt) = myCol(cnt)(j)
                Else
                    Result(j, cnt) = "null"
                End If
            Next j
        Next cnt
    Else
        ReDim Result(1 To ncol, 1 To nrow)
        For cnt = 1 To myCol.Count
            For j = 1 To nrow
                If Not IsNull(myCol(cnt)(j)) Then
                    Result(cnt, j) = myCol(cnt)(j)
                Else
                    Result(cnt, j) = "null"
                End If
            Next j
        Next cnt
    End If
    collection_to_array_2d = Result
End Function
Public Function array_join(arr_in As Variant)
' get one two dimensional array from array of arrays
' needed to support array output to range from VBA
    Dim arr_out As Variant
    Dim num_rows As Integer
    Dim num_cols As Integer
    Dim L As Integer, U As Integer
    Dim i As Integer, j As Integer
    L = LBound(arr_in)
    U = UBound(arr_in)
    num_cols = UBound(arr_in(L)) - LBound(arr_in(L)) + 1
    num_rows = UBound(arr_in) - LBound(arr_in) + 1
    ReDim arr_out(1 To num_rows, 1 To num_cols)
    For i = 1 To num_rows
        For j = 1 To num_cols
            arr_out(i, j) = arr_in(i - 1 + L)(j - 1 + L)
        Next j
    Next i
    array_join = arr_out
End Function
Private Function getDimension(var As Variant) As Long
    On Error GoTo Err
    Dim i As Long
    Dim tmp As Long
    i = 0
    Do While True
        i = i + 1
        tmp = UBound(var, i)
    Loop
Err:
    getDimension = i - 1
End Function
' чтение исходных данных в виде списков
Public Sub read_PTQ(ptq As PTQ_LIST, feed, p, t, log_, _
                    Optional ksep = -1#)
    Dim M As Integer
    Dim N As Integer
    Dim i As Integer
    Dim len_feed As Integer
    Dim len_p As Integer
    Dim len_t As Integer
    Dim len_ksep As Integer
' здесь читаем и причесываем потенциально списочные входных данных расчетных функций
    With ptq
         ' определяем что на входе - один поток или вектор потоков и складываем все в коллекцию
        .feed = parse_feed_list(feed)
        .p = parse_list(p)
        .t = parse_list(t)
        .val = parse_list(ksep)
        len_feed = UBound(.feed) - LBound(.feed) + 1
        len_p = UBound(.p) - LBound(.p) + 1
        len_t = UBound(.t) - LBound(.t) + 1
        len_ksep = UBound(.val) - LBound(.val) + 1
        
        'далее проверим что длины были везде одинаковые
        If len_feed <> len_p Or len_feed <> len_t Or len_feed <> len_ksep Then
        ' надо выровнять
            M = MaxInt(len_feed, len_p)
            M = MaxInt(M, len_t)
            M = MaxInt(M, len_ksep)
            If len_feed < M Then
                N = UBound(.feed)
                If N > 1 Then log_.add_msg "warning: input list feed length > 1 but less that max length"
                ReDim Preserve .feed(1 To M)
                For i = N + 1 To M
                    .feed(i) = .feed(N)
                Next i
            End If
            If len_p < M Then
                N = UBound(.p)
                If N > 1 Then log_.add_msg "warning: input list p length > 1 but less that max length"
                ReDim Preserve .p(1 To M)
                For i = N + 1 To M
                    .p(i) = .p(N)
                Next i
            End If
            If len_t < M Then
                N = UBound(.t)
                If N > 1 Then log_.add_msg "warning: input list t length > 1 but less that max length"
                ReDim Preserve .t(1 To M)
                For i = N + 1 To M
                    .t(i) = .t(N)
                Next i
            End If
            If len_ksep < M Then
                N = UBound(.val)
                If N > 1 Then log_.add_msg "warning: input list ksep length > 1 but less that max length"
                ReDim Preserve .val(1 To M)
                For i = N + 1 To M
                    .val(i) = .val(N)
                Next i
            End If
        End If
        len_feed = UBound(.feed) - LBound(.feed) + 1
        len_p = UBound(.p) - LBound(.p) + 1
        len_t = UBound(.t) - LBound(.t) + 1
        len_ksep = UBound(.val) - LBound(.val) + 1
        If len_feed <> len_p And len_feed <> len_t Then
            Err.Raise 1000
        End If
        .len = len_feed
    End With
End Sub
Public Sub init_ptq(ptq As PTQ_LIST, ptq_from As PTQ_LIST)
    ReDim ptq.feed(LBound(ptq_from.feed) To UBound(ptq_from.feed))
    ReDim ptq.p(LBound(ptq_from.p) To UBound(ptq_from.p))
    ReDim ptq.t(LBound(ptq_from.t) To UBound(ptq_from.t))
    ReDim ptq.val(LBound(ptq_from.val) To UBound(ptq_from.val))
    ptq.len = ptq_from.len
End Sub
Public Sub init_ptesp(ptq As PTESP_LIST, ptq_from As PTQ_LIST)
    ReDim ptq.feed(LBound(ptq_from.feed) To UBound(ptq_from.feed))
    ReDim ptq.p_intake(LBound(ptq_from.p) To UBound(ptq_from.p))
    ReDim ptq.p_dis(LBound(ptq_from.p) To UBound(ptq_from.p))
    ReDim ptq.t_intake(LBound(ptq_from.t) To UBound(ptq_from.t))
    ReDim ptq.t_dis(LBound(ptq_from.t) To UBound(ptq_from.t))
    Set ptq.d = New Dictionary
    ptq.len = ptq_from.len
End Sub
Public Function convert_to_json_ptq(ptq As PTQ_LIST)
    convert_to_json_ptq = ConvertToJson(convert_to_dict_ptq(ptq))
End Function
Public Function convert_to_json_ptesp(ptq As PTESP_LIST)
    convert_to_json_ptesp = ConvertToJson(convert_to_dict_ptesp(ptq))
End Function
Public Function convert_to_dict_ptq(ptq As PTQ_LIST)
    Dim d As New Dictionary
    Dim i As Integer
    Dim c As New Collection
    
    d("p_atma") = ptq.p
    d("t_C") = ptq.t
    For i = LBound(ptq.feed) To UBound(ptq.feed)
        c.Add ParseJson(ptq.feed(i))
    Next i
    d("feed") = c
    Set convert_to_dict_ptq = d
End Function
Public Function convert_to_dict_ptesp(ptesp As PTESP_LIST)
    Dim d As New Dictionary
    Dim i As Integer
    Dim c As New Collection
    
    d("p_intake_atma") = ptesp.p_intake
    d("p_dis_atma") = ptesp.p_dis
    d("t_intake_C") = ptesp.t_intake
    d("t_dis_C") = ptesp.t_dis
    For i = LBound(ptesp.feed) To UBound(ptesp.feed)
        c.Add ParseJson(ptesp.feed(i))
    Next i
    d("feed") = c
    Set convert_to_dict_ptesp = d
End Function
Public Function parse_feed_list(ByVal feed As String) As Variant
    Dim col As Collection
    Dim c
    Dim res() As String
    Dim i As Integer
    
    If Mid(feed, 1, 1) = "[" Then
        Set col = ParseJson(feed)
        ReDim res(1 To col.Count)
        i = 1
        For Each c In col
            res(i) = ConvertToJson(c)
            i = i + 1
        Next
    Else
        ReDim res(1 To 1)
        res(1) = feed
    End If
    parse_feed_list = res
End Function
Public Function parse_list(val) As Variant
' convert input argument to array for UDF
' from number
' or from json sting
    Dim col As New Collection
    Dim c
    Dim res() As Double
    Dim i As Integer
    
    Select Case VarType(val)
        Case vbDouble, vbLong, vbInteger
            ReDim res(1 To 1)
            res(1) = val
        Case vbString
            Set col = ParseJson(val)
            ReDim res(1 To col.Count)
            i = 1
            For Each c In col
                res(i) = c
                i = i + 1
            Next
        Case vbEmpty
            ReDim res(1 To 1)
            res(1) = 0
    End Select
    parse_list = res
End Function

